/*
Copyright (c) 2016, The Environmental Council of the States (ECOS)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

 * Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
 * Neither the name of the ECOS nor the names of its contributors may
   be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE ;ODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
*/

/*****************************************************************************************************************************
 *
 *  Script Name:  RCRA_5.10_to_5.11-upgrade_SQL-DDL.sql
 *
 *  Company:  Windsor Solutions, Inc.
 *
 *  Purpose:  This DDL script will update the SQL Server RCRA v5.10 database objects to support the RCRA v5.11 data flow.
 *
 *  Maintenance:
 *
 *    Analyst         Date            Comment
 *    ----------      ----------      ------------------------------------------------------------------------------
 *    Windsor         12/02/2021      Created
 *
 ****************************************************************************************************************************
 */

---$ Alter table dbo.RCRA_CA_AREA
IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CA_AREA') AND NAME = 'LAST_UPDT_BY')
BEGIN
ALTER TABLE dbo.RCRA_CA_AREA
    ADD LAST_UPDT_BY VARCHAR(255) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CA_AREA') AND NAME = 'LAST_UPDT_DATE')
BEGIN
ALTER TABLE dbo.RCRA_CA_AREA
    ADD LAST_UPDT_DATE datetime NULL
END
GO


---$ Alter table dbo.RCRA_CA_AUTHORITY
IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CA_AUTHORITY') AND NAME = 'LAST_UPDT_BY')
BEGIN
ALTER TABLE dbo.RCRA_CA_AUTHORITY
    ADD LAST_UPDT_BY VARCHAR(255) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CA_AUTHORITY') AND NAME = 'LAST_UPDT_DATE')
BEGIN
ALTER TABLE dbo.RCRA_CA_AUTHORITY
    ADD LAST_UPDT_DATE datetime NULL
END
GO


---$ Alter table dbo.RCRA_CA_EVENT
IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CA_EVENT') AND NAME = 'LAST_UPDT_BY')
BEGIN
ALTER TABLE dbo.RCRA_CA_EVENT
    ADD LAST_UPDT_BY VARCHAR(255) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CA_EVENT') AND NAME = 'LAST_UPDT_DATE')
BEGIN
ALTER TABLE dbo.RCRA_CA_EVENT
    ADD LAST_UPDT_DATE datetime NULL
END
GO


---$ Alter table dbo.RCRA_CME_ENFRC_ACT
IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CME_ENFRC_ACT') AND NAME = 'LAST_UPDT_BY')
BEGIN
ALTER TABLE dbo.RCRA_CME_ENFRC_ACT
    ADD LAST_UPDT_BY VARCHAR(255) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CME_ENFRC_ACT') AND NAME = 'LAST_UPDT_DATE')
BEGIN
ALTER TABLE dbo.RCRA_CME_ENFRC_ACT
    ADD LAST_UPDT_DATE datetime NULL
END
GO

---$ Alter table dbo.RCRA_CME_EVAL
IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CME_EVAL') AND NAME = 'LAST_UPDT_BY')
BEGIN
ALTER TABLE dbo.RCRA_CME_EVAL
    ADD LAST_UPDT_BY VARCHAR(255) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CME_EVAL') AND NAME = 'LAST_UPDT_DATE')
BEGIN
ALTER TABLE dbo.RCRA_CME_EVAL
    ADD LAST_UPDT_DATE datetime NULL
END
GO


---$ Alter table dbo.RCRA_CME_VIOL
IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CME_VIOL') AND NAME = 'LAST_UPDT_BY')
BEGIN
ALTER TABLE dbo.RCRA_CME_VIOL
    ADD LAST_UPDT_BY VARCHAR(255) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CME_VIOL') AND NAME = 'LAST_UPDT_DATE')
BEGIN
ALTER TABLE dbo.RCRA_CME_VIOL
    ADD LAST_UPDT_DATE datetime NULL
END
GO


---$ Alter table dbo.RCRA_EM_EMANIFEST
ALTER TABLE dbo.RCRA_EM_EMANIFEST
ALTER COLUMN CREATED_DATE datetime NULL
GO

ALTER TABLE dbo.RCRA_EM_EMANIFEST
ALTER COLUMN MAN_TRACKING_NUM VARCHAR(12) NULL
GO

ALTER TABLE dbo.RCRA_EM_EMANIFEST
ALTER COLUMN [STATUS] VARCHAR(17) NULL
GO

ALTER TABLE dbo.RCRA_EM_EMANIFEST
ALTER COLUMN ORIGIN_TYPE VARCHAR(7) NULL
GO

ALTER TABLE dbo.RCRA_EM_EMANIFEST
ALTER COLUMN REJ_IND CHAR(1) NULL
GO

ALTER TABLE dbo.RCRA_EM_EMANIFEST
ALTER COLUMN DISCREPANCY_IND CHAR(1) NULL
GO

ALTER TABLE dbo.RCRA_EM_EMANIFEST
ALTER COLUMN IMP_IND CHAR(1) NULL
GO

ALTER TABLE dbo.RCRA_EM_EMANIFEST
ALTER COLUMN RESIDUE_IND CHAR(1) NULL
GO

---$ Alter table dbo.RCRA_EM_HANDLER
ALTER TABLE dbo.RCRA_EM_HANDLER
ALTER COLUMN SITE_TYPE VARCHAR(11) NULL
GO

ALTER TABLE dbo.RCRA_EM_HANDLER
ALTER COLUMN MANIFEST_NAME VARCHAR(80) NULL
GO

ALTER TABLE dbo.RCRA_EM_HANDLER
ALTER COLUMN MANIFEST_HANDLER_TYPE VARCHAR(40) NULL
GO

---$ Alter table dbo.RCRA_EM_WASTE
ALTER TABLE dbo.RCRA_EM_WASTE
ALTER COLUMN DOT_HAZ_IND CHAR(1) NULL
GO

ALTER TABLE dbo.RCRA_EM_WASTE
ALTER COLUMN PCB_IND CHAR(1) NULL
GO

ALTER TABLE dbo.RCRA_EM_WASTE
ALTER COLUMN LINE_NUM INT NULL
GO


---$ Alter table dbo.RCRA_FA_COST_EST
ALTER TABLE dbo.RCRA_FA_COST_EST
ALTER COLUMN COST_ESTIMATE_DATE datetime NULL
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_FA_COST_EST') AND NAME = 'UPDATE_DUE_DATE')
BEGIN
ALTER TABLE dbo.RCRA_FA_COST_EST
    ADD UPDATE_DUE_DATE datetime NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_FA_COST_EST') AND NAME = 'CURRENT_COST_ESTIMATE_IND')
BEGIN
ALTER TABLE dbo.RCRA_FA_COST_EST
    ADD CURRENT_COST_ESTIMATE_IND CHAR(1) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_FA_COST_EST') AND NAME = 'LAST_UPDT_BY')
BEGIN
ALTER TABLE dbo.RCRA_FA_COST_EST
    ADD LAST_UPDT_BY VARCHAR(255) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_FA_COST_EST') AND NAME = 'LAST_UPDT_DATE')
BEGIN
ALTER TABLE dbo.RCRA_FA_COST_EST
    ADD LAST_UPDT_DATE datetime NULL
END
GO


---$ Alter table dbo.RCRA_FA_MECHANISM
IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_FA_MECHANISM') AND NAME = 'PROVIDER_CONTACT_EMAIL')
BEGIN
ALTER TABLE dbo.RCRA_FA_MECHANISM
    ADD PROVIDER_CONTACT_EMAIL VARCHAR(80) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_FA_MECHANISM') AND NAME = 'ACTIVE_MECHANISM_IND')
BEGIN
ALTER TABLE dbo.RCRA_FA_MECHANISM
    ADD ACTIVE_MECHANISM_IND CHAR(1) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_FA_MECHANISM') AND NAME = 'LAST_UPDT_BY')
BEGIN
ALTER TABLE dbo.RCRA_FA_MECHANISM
    ADD LAST_UPDT_BY VARCHAR(255) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_FA_MECHANISM') AND NAME = 'LAST_UPDT_DATE')
BEGIN
ALTER TABLE dbo.RCRA_FA_MECHANISM
    ADD LAST_UPDT_DATE datetime NULL
END
GO


---$ Alter table dbo.RCRA_FA_MECHANISM_DETAIL
IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_FA_MECHANISM_DETAIL') AND NAME = 'FAC_FACE_VAL_AMOUNT')
BEGIN
ALTER TABLE dbo.RCRA_FA_MECHANISM_DETAIL
    ADD FAC_FACE_VAL_AMOUNT DECIMAL(14,6) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_FA_MECHANISM_DETAIL') AND NAME = 'ALT_IND')
BEGIN
ALTER TABLE dbo.RCRA_FA_MECHANISM_DETAIL
    ADD ALT_IND CHAR(1) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_FA_MECHANISM_DETAIL') AND NAME = 'LAST_UPDT_BY')
BEGIN
ALTER TABLE dbo.RCRA_FA_MECHANISM_DETAIL
    ADD LAST_UPDT_BY VARCHAR(255) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_FA_MECHANISM_DETAIL') AND NAME = 'LAST_UPDT_DATE')
BEGIN
ALTER TABLE dbo.RCRA_FA_MECHANISM_DETAIL
    ADD LAST_UPDT_DATE datetime NULL
END
GO


---$ Alter table dbo.RCRA_GIS_GEO_INFORMATION
IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_GIS_GEO_INFORMATION') AND NAME = 'LAST_UPDT_BY')
BEGIN
ALTER TABLE dbo.RCRA_GIS_GEO_INFORMATION
    ADD LAST_UPDT_BY VARCHAR(255) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_GIS_GEO_INFORMATION') AND NAME = 'LAST_UPDT_DATE')
BEGIN
ALTER TABLE dbo.RCRA_GIS_GEO_INFORMATION
    ADD LAST_UPDT_DATE datetime NULL
END
GO


---$ Alter table dbo.RCRA_HD_HANDLER
IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_HD_HANDLER') AND NAME = 'LAST_UPDT_BY')
BEGIN
ALTER TABLE dbo.RCRA_HD_HANDLER
    ADD LAST_UPDT_BY VARCHAR(255) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_HD_HANDLER') AND NAME = 'LAST_UPDT_DATE')
BEGIN
ALTER TABLE dbo.RCRA_HD_HANDLER
    ADD LAST_UPDT_DATE datetime NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_HD_HANDLER') AND NAME = 'BR_EXEMPT_IND')
BEGIN
ALTER TABLE dbo.RCRA_HD_HANDLER
    ADD BR_EXEMPT_IND CHAR(1) NULL
END
GO


---$ Alter table dbo.RCRA_PRM_EVENT
IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_PRM_EVENT') AND NAME = 'LAST_UPDT_BY')
BEGIN
ALTER TABLE dbo.RCRA_PRM_EVENT
    ADD LAST_UPDT_BY VARCHAR(255) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_PRM_EVENT') AND NAME = 'LAST_UPDT_DATE')
BEGIN
ALTER TABLE dbo.RCRA_PRM_EVENT
    ADD LAST_UPDT_DATE datetime NULL
END
GO


---$ Alter table dbo.RCRA_PRM_SERIES
IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_PRM_SERIES') AND NAME = 'LAST_UPDT_BY')
BEGIN
ALTER TABLE dbo.RCRA_PRM_SERIES
    ADD LAST_UPDT_BY VARCHAR(255) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_PRM_SERIES') AND NAME = 'LAST_UPDT_DATE')
BEGIN
ALTER TABLE dbo.RCRA_PRM_SERIES
    ADD LAST_UPDT_DATE datetime NULL
END
GO


---$ Alter table dbo.RCRA_PRM_UNIT
IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_PRM_UNIT') AND NAME = 'LAST_UPDT_BY')
BEGIN
ALTER TABLE dbo.RCRA_PRM_UNIT
    ADD LAST_UPDT_BY VARCHAR(255) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_PRM_UNIT') AND NAME = 'LAST_UPDT_DATE')
BEGIN
ALTER TABLE dbo.RCRA_PRM_UNIT
    ADD LAST_UPDT_DATE datetime NULL
END
GO


---$ Alter table dbo.RCRA_PRM_UNIT_DETAIL
IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_PRM_UNIT_DETAIL') AND NAME = 'LAST_UPDT_BY')
BEGIN
ALTER TABLE dbo.RCRA_PRM_UNIT_DETAIL
    ADD LAST_UPDT_BY VARCHAR(255) NULL
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_PRM_UNIT_DETAIL') AND NAME = 'LAST_UPDT_DATE')
BEGIN
ALTER TABLE dbo.RCRA_PRM_UNIT_DETAIL
    ADD LAST_UPDT_DATE datetime NULL
END
GO

-- recompile view
ALTER VIEW ETL_CA_AREA_VW AS
    (
        SELECT WH.CA_AREA_ID WH_CA_AREA_ID,
               ETL.WH_CA_FAC_SUBM_ID,
               ETL.CA_SUBM_ID,
               NODE.*
        FROM NODE_RCRA_CA_AREA NODE
                 INNER JOIN ETL_CA_FAC_SUBM_VW ETL ON ETL.CA_FAC_SUBM_ID = NODE.CA_FAC_SUBM_ID
                 LEFT OUTER JOIN RCRA_CA_AREA WH ON WH.CA_FAC_SUBM_ID = ETL.WH_CA_FAC_SUBM_ID
            AND WH.AREA_SEQ_NUM = NODE.AREA_SEQ_NUM
    )
GO

-- recompile view
ALTER VIEW ETL_CA_AUTHORITY_VW AS
    (
        SELECT WH.CA_AUTHORITY_ID WH_CA_AUTHORITY_ID,
               ETL.WH_CA_FAC_SUBM_ID,
               ETL.CA_SUBM_ID,
               NODE.*
        FROM NODE_RCRA_CA_AUTHORITY NODE
                 INNER JOIN ETL_CA_FAC_SUBM_VW ETL ON ETL.CA_FAC_SUBM_ID = NODE.CA_FAC_SUBM_ID
                 LEFT OUTER JOIN RCRA_CA_AUTHORITY WH ON WH.CA_FAC_SUBM_ID = ETL.WH_CA_FAC_SUBM_ID
            AND WH.ACT_LOC_CODE = NODE.ACT_LOC_CODE
            AND WH.AUTHORITY_AGN_CODE = NODE.AUTHORITY_AGN_CODE
            AND WH.AUTHORITY_EFFC_DATE = NODE.AUTHORITY_EFFC_DATE
            AND WH.AUTHORITY_DATA_OWNER_CODE = NODE.AUTHORITY_DATA_OWNER_CODE
            AND WH.AUTHORITY_TYPE_CODE = NODE.AUTHORITY_TYPE_CODE
    )
GO

-- recompile view
ALTER VIEW ETL_CA_EVENT_VW AS
    (
        SELECT WH.CA_EVENT_ID WH_CA_EVENT_ID,
               ETL.WH_CA_FAC_SUBM_ID,
               ETL.CA_SUBM_ID,
               NODE.*
        FROM NODE_RCRA_CA_EVENT NODE
                 INNER JOIN ETL_CA_FAC_SUBM_VW ETL ON ETL.CA_FAC_SUBM_ID = NODE.CA_FAC_SUBM_ID
                 LEFT OUTER JOIN RCRA_CA_EVENT WH ON WH.CA_FAC_SUBM_ID = ETL.WH_CA_FAC_SUBM_ID
            AND WH.EVENT_SEQ_NUM = NODE.EVENT_SEQ_NUM
            AND WH.EVENT_AGN_CODE = NODE.EVENT_AGN_CODE
            AND WH.CORCT_ACT_EVENT_CODE = NODE.CORCT_ACT_EVENT_CODE
    )
GO

-- recompile view
ALTER VIEW ETL_CME_ENFRC_ACT_VW AS
    (
        SELECT WH.CME_ENFRC_ACT_ID WH_CME_ENFR_ACT_ID,
               ETL.WH_CME_FAC_SUBM_ID,
               ETL.CME_SUBM_ID,
               NODE.*
        FROM NODE_RCRA_CME_ENFRC_ACT NODE
                 INNER JOIN ETL_CME_FAC_SUBM_VW ETL ON ETL.CME_FAC_SUBM_ID = NODE.CME_FAC_SUBM_ID
                 LEFT OUTER JOIN RCRA_CME_ENFRC_ACT WH ON WH.CME_FAC_SUBM_ID = ETL.WH_CME_FAC_SUBM_ID
            AND WH.ENFRC_ACT_IDEN = NODE.ENFRC_ACT_IDEN
            AND WH.ENFRC_ACT_DATE = NODE.ENFRC_ACT_DATE
            AND WH.ENFRC_AGN_NAME = NODE.ENFRC_AGN_NAME
    )
GO

-- recompile view
ALTER VIEW ETL_CME_EVAL_VW AS
    (
        SELECT WH.CME_EVAL_ID WH_CME_EVAL_ID,
               ETL.WH_CME_FAC_SUBM_ID,
               ETL.CME_SUBM_ID,
               NODE.*
        FROM NODE_RCRA_CME_EVAL NODE
                 JOIN ETL_CME_FAC_SUBM_VW ETL ON ETL.CME_FAC_SUBM_ID = NODE.CME_FAC_SUBM_ID
                 LEFT OUTER JOIN RCRA_CME_EVAL WH ON WH.CME_FAC_SUBM_ID = ETL.WH_CME_FAC_SUBM_ID
            AND WH.EVAL_ACT_LOC = NODE.EVAL_ACT_LOC
            AND WH.EVAL_IDEN = NODE.EVAL_IDEN
            AND WH.EVAL_RESP_AGN = NODE.EVAL_RESP_AGN
            AND WH.EVAL_START_DATE = NODE.EVAL_START_DATE
    )
GO

-- recompile view
ALTER VIEW ETL_CME_VIOL_VW AS
    (
        SELECT WH.CME_VIOL_ID WH_CME_VIOL_ID,
               ETL.WH_CME_FAC_SUBM_ID,
               ETL.CME_SUBM_ID,
               NODE.*
        FROM NODE_RCRA_CME_VIOL NODE
                 JOIN ETL_CME_FAC_SUBM_VW ETL ON ETL.CME_FAC_SUBM_ID = NODE.CME_FAC_SUBM_ID
                 LEFT OUTER JOIN RCRA_CME_VIOL WH ON WH.CME_FAC_SUBM_ID = ETL.WH_CME_FAC_SUBM_ID
            AND WH.VIOL_SEQ_NUM = NODE.VIOL_SEQ_NUM
            AND WH.VIOL_ACT_LOC = NODE.VIOL_ACT_LOC
            AND WH.AGN_WHICH_DTRM_VIOL = NODE.AGN_WHICH_DTRM_VIOL
    )
GO

-- recompile view
ALTER VIEW ETL_EM_EMANIFEST_VW AS (
    SELECT WH.EM_EMANIFEST_ID WH_EM_EMANIFEST_ID,
           NODE.*
    FROM NODE_RCRA_EM_EMANIFEST NODE
             LEFT OUTER JOIN RCRA_EM_EMANIFEST WH ON WH.MAN_TRACKING_NUM = NODE.MAN_TRACKING_NUM
        AND ((WH.CORR_VERSION_NUM = NODE.CORR_VERSION_NUM) OR (WH.CORR_VERSION_NUM IS NULL AND NODE.CORR_VERSION_NUM IS NULL))
)
GO

-- recompile view
ALTER VIEW ETL_EM_HANDLER_VW AS (
    SELECT ETL.WH_EM_EMANIFEST_ID,
           ETL.EM_SUBM_ID,
           NODE.*
    FROM NODE_RCRA_EM_HANDLER NODE
             INNER JOIN ETL_EM_EMANIFEST_VW ETL ON ETL.EM_EMANIFEST_ID = NODE.EM_EMANIFEST_ID
)
GO

-- recompile view
ALTER VIEW ETL_EM_WASTE_VW AS (
    SELECT WH.EM_WASTE_ID WH_EM_WASTE_ID,
           ETL.WH_EM_EMANIFEST_ID,
           ETL.EM_SUBM_ID,
           NODE.*
    FROM NODE_RCRA_EM_WASTE NODE
             INNER JOIN ETL_EM_EMANIFEST_VW ETL ON ETL.EM_EMANIFEST_ID = NODE.EM_EMANIFEST_ID
             LEFT OUTER JOIN RCRA_EM_WASTE WH ON WH.EM_EMANIFEST_ID = ETL.WH_EM_EMANIFEST_ID
        AND WH.LINE_NUM = NODE.LINE_NUM
)
GO

-- recompile view
ALTER VIEW ETL_FA_COST_EST_VW AS (
    SELECT
        WH.FA_COST_EST_ID WH_FA_COST_EST_ID,
        ETL.WH_FA_FAC_SUBM_ID,
        ETL.FA_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_FA_COST_EST NODE
             INNER JOIN ETL_FA_FAC_SUBM_VW ETL ON ETL.FA_FAC_SUBM_ID = NODE.FA_FAC_SUBM_ID
             LEFT OUTER JOIN RCRA_FA_COST_EST WH ON WH.FA_FAC_SUBM_ID = ETL.WH_FA_FAC_SUBM_ID
        AND WH.COST_ESTIMATE_SEQ_NUM = NODE.COST_ESTIMATE_SEQ_NUM
)
GO

-- recompile view
ALTER VIEW ETL_FA_MECHANISM_VW AS (
    SELECT
        WH.FA_MECHANISM_ID WH_FA_MECHANISM_ID,
        ETL.WH_FA_FAC_SUBM_ID,
        ETL.FA_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_FA_MECHANISM NODE
             INNER JOIN ETL_FA_FAC_SUBM_VW ETL ON ETL.FA_FAC_SUBM_ID = NODE.FA_FAC_SUBM_ID
             LEFT OUTER JOIN RCRA_FA_MECHANISM WH ON WH.FA_FAC_SUBM_ID = ETL.WH_FA_FAC_SUBM_ID
        AND WH.MECHANISM_SEQ_NUM = NODE.MECHANISM_SEQ_NUM
        AND WH.MECHANISM_AGN_CODE = NODE.MECHANISM_AGN_CODE
)
GO

-- recompile view
ALTER VIEW ETL_FA_MECHANISM_DETAIL_VW AS (
    SELECT
        WH.FA_MECHANISM_DETAIL_ID WH_FA_MECHANISM_DETAIL_ID,
        ETL.WH_FA_MECHANISM_ID,
        ETL.FA_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_FA_MECHANISM_DETAIL NODE
             INNER JOIN ETL_FA_MECHANISM_VW ETL ON ETL.FA_MECHANISM_ID = NODE.FA_MECHANISM_ID
             LEFT OUTER JOIN RCRA_FA_MECHANISM_DETAIL WH ON WH.FA_MECHANISM_ID = ETL.WH_FA_MECHANISM_ID
        AND WH.MECHANISM_DETAIL_SEQ_NUM = NODE.MECHANISM_DETAIL_SEQ_NUM
)
GO

-- recompile view
ALTER VIEW ETL_GIS_GEO_INFORMATION_VW AS
    (
        SELECT WH.GIS_GEO_INFORMATION_ID WH_GIS_GEO_INFORMATION_ID,
               ETL.WH_GIS_FAC_SUBM_ID,
               ETL.GIS_SUBM_ID,
               NODE.*
        FROM NODE_RCRA_GIS_GEO_INFORMATION NODE
                 JOIN ETL_GIS_FAC_SUBM_VW ETL ON ETL.GIS_FAC_SUBM_ID = NODE.GIS_FAC_SUBM_ID
                 LEFT OUTER JOIN RCRA_GIS_GEO_INFORMATION WH ON WH.GIS_FAC_SUBM_ID = ETL.WH_GIS_FAC_SUBM_ID
            AND WH.GEO_INFO_SEQ_NUM = NODE.GEO_INFO_SEQ_NUM
    )
GO

-- recompile view
ALTER VIEW ETL_HD_HANDLER_VW AS
    (
        SELECT WH.HD_HANDLER_ID WH_HD_HANDLER_ID,
               ETL.WH_HD_HBASIC_ID,
               ETL.HD_SUBM_ID,
               NODE.*
        FROM NODE_RCRA_HD_HANDLER NODE
                 INNER JOIN ETL_HD_BASIC_VW ETL ON ETL.HD_HBASIC_ID = NODE.HD_HBASIC_ID
                 LEFT OUTER JOIN RCRA_HD_HANDLER WH ON WH.HD_HBASIC_ID = ETL.WH_HD_HBASIC_ID
            AND WH.ACTIVITY_LOCATION = NODE.ACTIVITY_LOCATION
            AND WH.SEQ_NUMBER = NODE.SEQ_NUMBER
            AND WH.SOURCE_TYPE = NODE.SOURCE_TYPE
    )
GO

-- recompile the view
ALTER VIEW ETL_PRM_EVENT_VW AS
    (
        SELECT WH.PRM_EVENT_ID WH_PRM_EVENT_ID,
               ETL.WH_PRM_SERIES_ID,
               ETL.PRM_SUBM_ID,
               NODE.*
        FROM NODE_RCRA_PRM_EVENT NODE
                 INNER JOIN ETL_PRM_SERIES_VW ETL ON ETL.PRM_SERIES_ID = NODE.PRM_SERIES_ID
                 LEFT OUTER JOIN RCRA_PRM_EVENT WH ON WH.PRM_SERIES_ID = ETL.WH_PRM_SERIES_ID
            AND WH.EVENT_SEQ_NUM = NODE.EVENT_SEQ_NUM
            AND WH.PERMIT_EVENT_CODE = NODE.PERMIT_EVENT_CODE
    )
GO

-- recompile the view
ALTER VIEW ETL_PRM_SERIES_VW AS
    (
        SELECT WH.PRM_SERIES_ID WH_PRM_SERIES_ID,
               ETL.WH_PRM_FAC_SUBM_ID,
               ETL.PRM_SUBM_ID,
               NODE.*
        FROM NODE_RCRA_PRM_SERIES NODE
                 INNER JOIN ETL_PRM_FAC_SUBM_VW ETL ON ETL.PRM_FAC_SUBM_ID = NODE.PRM_FAC_SUBM_ID
                 LEFT OUTER JOIN RCRA_PRM_SERIES WH ON WH.PRM_FAC_SUBM_ID = ETL.WH_PRM_FAC_SUBM_ID
            AND WH.PERMIT_SERIES_SEQ_NUM = NODE.PERMIT_SERIES_SEQ_NUM
    )
GO

-- recompile the view
ALTER VIEW ETL_PRM_UNIT_VW AS
    (
        SELECT WH.PRM_UNIT_ID WH_PRM_UNIT_ID,
               ETL.WH_PRM_FAC_SUBM_ID,
               ETL.PRM_SUBM_ID,
               NODE.*
        FROM NODE_RCRA_PRM_UNIT NODE
                 INNER JOIN ETL_PRM_FAC_SUBM_VW ETL ON ETL.PRM_FAC_SUBM_ID = NODE.PRM_FAC_SUBM_ID
                 LEFT OUTER JOIN RCRA_PRM_UNIT WH ON WH.PRM_FAC_SUBM_ID = ETL.WH_PRM_FAC_SUBM_ID
            AND WH.PERMIT_UNIT_SEQ_NUM = NODE.PERMIT_UNIT_SEQ_NUM
    )
GO

-- recompile the view
ALTER VIEW ETL_PRM_UNIT_DETAIL_VW AS (
    SELECT WH.PRM_UNIT_DETAIL_ID WH_PRM_UNIT_DETAIL_ID,
           ETL.WH_PRM_UNIT_ID,
           ETL.PRM_SUBM_ID,
           NODE.*
    FROM NODE_RCRA_PRM_UNIT_DETAIL NODE
             INNER JOIN ETL_PRM_UNIT_VW ETL ON ETL.PRM_UNIT_ID = NODE.PRM_UNIT_ID
             LEFT OUTER JOIN RCRA_PRM_UNIT_DETAIL WH ON WH.PRM_UNIT_ID = ETL.WH_PRM_UNIT_ID
        AND WH.PERMIT_UNIT_DETAIL_SEQ_NUM = NODE.PERMIT_UNIT_DETAIL_SEQ_NUM
)
GO

/*************************************************************************************************
** ObjectName: CA_MERGE_AREA.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CA_AREA table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor      Created.
**  07/29/2020   Windsor      Updated for new columns.
**  02/21/2022   Windsor      Updated for new 5.11 columns.
**
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[CA_MERGE_AREA] @CA_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
BEGIN
            SET @localTran = 1
BEGIN TRANSACTION LocalTran
END

BEGIN TRY
MERGE INTO RCRA_CA_AREA D
        USING (SELECT *
               FROM ETL_CA_AREA_VW
               WHERE CA_SUBM_ID = @CA_SUBM_ID) S
        ON (D.CA_AREA_ID = S.WH_CA_AREA_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.AREA_SEQ_NUM IS NOT NULL AND S.AREA_SEQ_NUM IS NOT NULL AND D.AREA_SEQ_NUM <> S.AREA_SEQ_NUM)
                    OR (D.AREA_SEQ_NUM IS NULL AND S.AREA_SEQ_NUM IS NOT NULL)
                    OR (D.AREA_SEQ_NUM IS NOT NULL AND S.AREA_SEQ_NUM IS NULL)
                    OR (D.FAC_WIDE_IND IS NOT NULL AND S.FAC_WIDE_IND IS NOT NULL AND D.FAC_WIDE_IND <> S.FAC_WIDE_IND)
                    OR (D.FAC_WIDE_IND IS NULL AND S.FAC_WIDE_IND IS NOT NULL)
                    OR (D.FAC_WIDE_IND IS NOT NULL AND S.FAC_WIDE_IND IS NULL)
                    OR (D.AREA_NAME IS NOT NULL AND S.AREA_NAME IS NOT NULL AND D.AREA_NAME <> S.AREA_NAME)
                    OR (D.AREA_NAME IS NULL AND S.AREA_NAME IS NOT NULL)
                    OR (D.AREA_NAME IS NOT NULL AND S.AREA_NAME IS NULL)
                    OR (D.AIR_REL_IND IS NOT NULL AND S.AIR_REL_IND IS NOT NULL AND D.AIR_REL_IND <> S.AIR_REL_IND)
                    OR (D.AIR_REL_IND IS NULL AND S.AIR_REL_IND IS NOT NULL)
                    OR (D.AIR_REL_IND IS NOT NULL AND S.AIR_REL_IND IS NULL)
                    OR (D.GROUNDWATER_REL_IND IS NOT NULL AND S.GROUNDWATER_REL_IND IS NOT NULL AND
                        D.GROUNDWATER_REL_IND <> S.GROUNDWATER_REL_IND)
                    OR (D.GROUNDWATER_REL_IND IS NULL AND S.GROUNDWATER_REL_IND IS NOT NULL)
                    OR (D.GROUNDWATER_REL_IND IS NOT NULL AND S.GROUNDWATER_REL_IND IS NULL)
                    OR (D.SOIL_REL_IND IS NOT NULL AND S.SOIL_REL_IND IS NOT NULL AND D.SOIL_REL_IND <> S.SOIL_REL_IND)
                    OR (D.SOIL_REL_IND IS NULL AND S.SOIL_REL_IND IS NOT NULL)
                    OR (D.SOIL_REL_IND IS NOT NULL AND S.SOIL_REL_IND IS NULL)
                    OR (D.SURFACE_WATER_REL_IND IS NOT NULL AND S.SURFACE_WATER_REL_IND IS NOT NULL AND
                        D.SURFACE_WATER_REL_IND <> S.SURFACE_WATER_REL_IND)
                    OR (D.SURFACE_WATER_REL_IND IS NULL AND S.SURFACE_WATER_REL_IND IS NOT NULL)
                    OR (D.SURFACE_WATER_REL_IND IS NOT NULL AND S.SURFACE_WATER_REL_IND IS NULL)
                    OR (D.REGULATED_UNIT_IND IS NOT NULL AND S.REGULATED_UNIT_IND IS NOT NULL AND
                        D.REGULATED_UNIT_IND <> S.REGULATED_UNIT_IND)
                    OR (D.REGULATED_UNIT_IND IS NULL AND S.REGULATED_UNIT_IND IS NOT NULL)
                    OR (D.REGULATED_UNIT_IND IS NOT NULL AND S.REGULATED_UNIT_IND IS NULL)
                    OR
                    (D.EPA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND S.EPA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND
                     D.EPA_RESP_PERSON_DATA_OWNER_CDE <> S.EPA_RESP_PERSON_DATA_OWNER_CDE)
                    OR (D.EPA_RESP_PERSON_DATA_OWNER_CDE IS NULL AND S.EPA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL)
                    OR (D.EPA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND S.EPA_RESP_PERSON_DATA_OWNER_CDE IS NULL)
                    OR (D.EPA_RESP_PERSON_ID IS NOT NULL AND S.EPA_RESP_PERSON_ID IS NOT NULL AND
                        D.EPA_RESP_PERSON_ID <> S.EPA_RESP_PERSON_ID)
                    OR (D.EPA_RESP_PERSON_ID IS NULL AND S.EPA_RESP_PERSON_ID IS NOT NULL)
                    OR (D.EPA_RESP_PERSON_ID IS NOT NULL AND S.EPA_RESP_PERSON_ID IS NULL)
                    OR
                    (D.STA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND S.STA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND
                     D.STA_RESP_PERSON_DATA_OWNER_CDE <> S.STA_RESP_PERSON_DATA_OWNER_CDE)
                    OR (D.STA_RESP_PERSON_DATA_OWNER_CDE IS NULL AND S.STA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL)
                    OR (D.STA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND S.STA_RESP_PERSON_DATA_OWNER_CDE IS NULL)
                    OR (D.STA_RESP_PERSON_ID IS NOT NULL AND S.STA_RESP_PERSON_ID IS NOT NULL AND
                        D.STA_RESP_PERSON_ID <> S.STA_RESP_PERSON_ID)
                    OR (D.STA_RESP_PERSON_ID IS NULL AND S.STA_RESP_PERSON_ID IS NOT NULL)
                    OR (D.STA_RESP_PERSON_ID IS NOT NULL AND S.STA_RESP_PERSON_ID IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR
                    (D.CREATED_BY_USERID IS NOT NULL AND s.CREATED_BY_USERID IS NOT NULL AND
                     D.CREATED_BY_USERID <> s.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND s.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND s.CREATED_BY_USERID IS NULL)
                    OR
                    (D.A_CREATED_DATE IS NOT NULL AND S.A_CREATED_DATE IS NOT NULL AND
                     D.A_CREATED_DATE <> S.A_CREATED_DATE)
                    OR (D.A_CREATED_DATE IS NULL AND S.A_CREATED_DATE IS NOT NULL)
                    OR (D.A_CREATED_DATE IS NOT NULL AND S.A_CREATED_DATE IS NULL)
                    OR
                    (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NOT NULL AND D.DATA_ORIG <> S.DATA_ORIG)
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL)
                    OR
                    (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NOT NULL AND D.LAST_UPDT_BY <> S.LAST_UPDT_BY)
                    OR (D.LAST_UPDT_BY IS NULL AND S.LAST_UPDT_BY IS NOT NULL)
                    OR (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NULL)
                    OR
                    (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NOT NULL AND D.LAST_UPDT_DATE <> S.LAST_UPDT_DATE)
                    OR (D.LAST_UPDT_DATE IS NULL AND S.LAST_UPDT_DATE IS NOT NULL)
                    OR (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NULL)
                )
            THEN
UPDATE
    SET D.TRANS_CODE                     = S.TRANS_CODE,
    D.AREA_SEQ_NUM                   = S.AREA_SEQ_NUM,
    D.FAC_WIDE_IND                   = S.FAC_WIDE_IND,
    D.AREA_NAME                      = S.AREA_NAME,
    D.AIR_REL_IND                    = S.AIR_REL_IND,
    D.GROUNDWATER_REL_IND            = S.GROUNDWATER_REL_IND,
    D.SOIL_REL_IND                   = S.SOIL_REL_IND,
    D.SURFACE_WATER_REL_IND          = S.SURFACE_WATER_REL_IND,
    D.REGULATED_UNIT_IND             = S.REGULATED_UNIT_IND,
    D.EPA_RESP_PERSON_DATA_OWNER_CDE = S.EPA_RESP_PERSON_DATA_OWNER_CDE,
    D.EPA_RESP_PERSON_ID             = S.EPA_RESP_PERSON_ID,
    D.STA_RESP_PERSON_DATA_OWNER_CDE = S.STA_RESP_PERSON_DATA_OWNER_CDE,
    D.STA_RESP_PERSON_ID             = S.STA_RESP_PERSON_ID,
    D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT,
    D.CREATED_BY_USERID             = s.CREATED_BY_USERID,
    D.A_CREATED_DATE                 = S.A_CREATED_DATE,
    D.DATA_ORIG                      = S.DATA_ORIG,
    D.LAST_UPDT_BY                   = s.LAST_UPDT_BY,
    D.LAST_UPDT_DATE                 = s.LAST_UPDT_DATE
    WHEN NOT MATCHED THEN
INSERT (CA_FAC_SUBM_ID,
TRANS_CODE,
AREA_SEQ_NUM,
FAC_WIDE_IND,
AREA_NAME,
AIR_REL_IND,
GROUNDWATER_REL_IND,
SOIL_REL_IND,
SURFACE_WATER_REL_IND,
REGULATED_UNIT_IND,
EPA_RESP_PERSON_DATA_OWNER_CDE,
EPA_RESP_PERSON_ID,
STA_RESP_PERSON_DATA_OWNER_CDE,
STA_RESP_PERSON_ID,
SUPP_INFO_TXT,
CREATED_BY_USERID,
A_CREATED_DATE,
DATA_ORIG,
LAST_UPDT_BY,
LAST_UPDT_DATE
)
VALUES (S.WH_CA_FAC_SUBM_ID,
    S.TRANS_CODE,
    S.AREA_SEQ_NUM,
    S.FAC_WIDE_IND,
    S.AREA_NAME,
    S.AIR_REL_IND,
    S.GROUNDWATER_REL_IND,
    S.SOIL_REL_IND,
    S.SURFACE_WATER_REL_IND,
    S.REGULATED_UNIT_IND,
    S.EPA_RESP_PERSON_DATA_OWNER_CDE,
    S.EPA_RESP_PERSON_ID,
    S.STA_RESP_PERSON_DATA_OWNER_CDE,
    S.STA_RESP_PERSON_ID,
    S.SUPP_INFO_TXT,
    s.CREATED_BY_USERID,
    S.A_CREATED_DATE,
    S.DATA_ORIG,
    s.LAST_UPDT_BY,
    s.LAST_UPDT_DATE);
IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

SELECT @ErrorMessage = ERROR_MESSAGE(),
       @ErrorSeverity = ERROR_SEVERITY(),
       @ErrorState = ERROR_STATE()

           IF @localTran = 1 AND XACT_STATE() <> 0
    ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
END
GO

/*************************************************************************************************
** ObjectName: CA_MERGE_AUTHORITY.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CA_AUTHORITY table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/21/2022   Windsor     Updated for new 5.11 columns.
**
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[CA_MERGE_AUTHORITY] @CA_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
BEGIN
            SET @localTran = 1
BEGIN TRANSACTION LocalTran
END

BEGIN TRY
MERGE INTO RCRA_CA_AUTHORITY D
        USING (SELECT *
               FROM ETL_CA_AUTHORITY_VW
               WHERE CA_SUBM_ID = @CA_SUBM_ID) S
        ON (D.CA_AUTHORITY_ID = S.WH_CA_AUTHORITY_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NOT NULL AND D.ACT_LOC_CODE <> S.ACT_LOC_CODE)
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NULL)
                    OR (D.AUTHORITY_DATA_OWNER_CODE IS NOT NULL AND S.AUTHORITY_DATA_OWNER_CODE IS NOT NULL AND
                        D.AUTHORITY_DATA_OWNER_CODE <> S.AUTHORITY_DATA_OWNER_CODE)
                    OR (D.AUTHORITY_DATA_OWNER_CODE IS NULL AND S.AUTHORITY_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.AUTHORITY_DATA_OWNER_CODE IS NOT NULL AND S.AUTHORITY_DATA_OWNER_CODE IS NULL)
                    OR (D.AUTHORITY_TYPE_CODE IS NOT NULL AND S.AUTHORITY_TYPE_CODE IS NOT NULL AND
                        D.AUTHORITY_TYPE_CODE <> S.AUTHORITY_TYPE_CODE)
                    OR (D.AUTHORITY_TYPE_CODE IS NULL AND S.AUTHORITY_TYPE_CODE IS NOT NULL)
                    OR (D.AUTHORITY_TYPE_CODE IS NOT NULL AND S.AUTHORITY_TYPE_CODE IS NULL)
                    OR (D.AUTHORITY_AGN_CODE IS NOT NULL AND S.AUTHORITY_AGN_CODE IS NOT NULL AND
                        D.AUTHORITY_AGN_CODE <> S.AUTHORITY_AGN_CODE)
                    OR (D.AUTHORITY_AGN_CODE IS NULL AND S.AUTHORITY_AGN_CODE IS NOT NULL)
                    OR (D.AUTHORITY_AGN_CODE IS NOT NULL AND S.AUTHORITY_AGN_CODE IS NULL)
                    OR (D.AUTHORITY_EFFC_DATE IS NOT NULL AND S.AUTHORITY_EFFC_DATE IS NOT NULL AND
                        D.AUTHORITY_EFFC_DATE <> S.AUTHORITY_EFFC_DATE)
                    OR (D.AUTHORITY_EFFC_DATE IS NULL AND S.AUTHORITY_EFFC_DATE IS NOT NULL)
                    OR (D.AUTHORITY_EFFC_DATE IS NOT NULL AND S.AUTHORITY_EFFC_DATE IS NULL)
                    OR (D.ISSUE_DATE IS NOT NULL AND S.ISSUE_DATE IS NOT NULL AND D.ISSUE_DATE <> S.ISSUE_DATE)
                    OR (D.ISSUE_DATE IS NULL AND S.ISSUE_DATE IS NOT NULL)
                    OR (D.ISSUE_DATE IS NOT NULL AND S.ISSUE_DATE IS NULL)
                    OR (D.END_DATE IS NOT NULL AND S.END_DATE IS NOT NULL AND D.END_DATE <> S.END_DATE)
                    OR (D.END_DATE IS NULL AND S.END_DATE IS NOT NULL)
                    OR (D.END_DATE IS NOT NULL AND S.END_DATE IS NULL)
                    OR (D.ESTABLISHED_REPOSITORY_CODE IS NOT NULL AND S.ESTABLISHED_REPOSITORY_CODE IS NOT NULL AND
                        D.ESTABLISHED_REPOSITORY_CODE <> S.ESTABLISHED_REPOSITORY_CODE)
                    OR (D.ESTABLISHED_REPOSITORY_CODE IS NULL AND S.ESTABLISHED_REPOSITORY_CODE IS NOT NULL)
                    OR (D.ESTABLISHED_REPOSITORY_CODE IS NOT NULL AND S.ESTABLISHED_REPOSITORY_CODE IS NULL)
                    OR (D.RESP_LEAD_PROG_IDEN IS NOT NULL AND S.RESP_LEAD_PROG_IDEN IS NOT NULL AND
                        D.RESP_LEAD_PROG_IDEN <> S.RESP_LEAD_PROG_IDEN)
                    OR (D.RESP_LEAD_PROG_IDEN IS NULL AND S.RESP_LEAD_PROG_IDEN IS NOT NULL)
                    OR (D.RESP_LEAD_PROG_IDEN IS NOT NULL AND S.RESP_LEAD_PROG_IDEN IS NULL)
                    OR
                    (D.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NOT NULL AND S.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NOT NULL AND
                     D.AUTHORITY_SUBORG_DATA_OWNR_CDE <> S.AUTHORITY_SUBORG_DATA_OWNR_CDE)
                    OR (D.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NULL AND S.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NOT NULL)
                    OR (D.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NOT NULL AND S.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NULL)
                    OR (D.AUTHORITY_SUBORG_CODE IS NOT NULL AND S.AUTHORITY_SUBORG_CODE IS NOT NULL AND
                        D.AUTHORITY_SUBORG_CODE <> S.AUTHORITY_SUBORG_CODE)
                    OR (D.AUTHORITY_SUBORG_CODE IS NULL AND S.AUTHORITY_SUBORG_CODE IS NOT NULL)
                    OR (D.AUTHORITY_SUBORG_CODE IS NOT NULL AND S.AUTHORITY_SUBORG_CODE IS NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND
                        D.RESP_PERSON_DATA_OWNER_CODE <> S.RESP_PERSON_DATA_OWNER_CODE)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NULL)
                    OR
                    (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NOT NULL AND
                     D.RESP_PERSON_ID <> S.RESP_PERSON_ID)
                    OR (D.RESP_PERSON_ID IS NULL AND S.RESP_PERSON_ID IS NOT NULL)
                    OR (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR
                    (D.CREATED_BY_USERID IS NOT NULL AND s.CREATED_BY_USERID IS NOT NULL AND
                     D.CREATED_BY_USERID <> s.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND s.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND s.CREATED_BY_USERID IS NULL)
                    OR
                    (D.A_CREATED_DATE IS NOT NULL AND S.A_CREATED_DATE IS NOT NULL AND
                     D.A_CREATED_DATE <> S.A_CREATED_DATE)
                    OR (D.A_CREATED_DATE IS NULL AND S.A_CREATED_DATE IS NOT NULL)
                    OR (D.A_CREATED_DATE IS NOT NULL AND S.A_CREATED_DATE IS NULL)
                    OR
                    (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NOT NULL AND D.DATA_ORIG <> S.DATA_ORIG)
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL)
                    OR
                    (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NOT NULL AND D.LAST_UPDT_BY <> S.LAST_UPDT_BY)
                    OR (D.LAST_UPDT_BY IS NULL AND S.LAST_UPDT_BY IS NOT NULL)
                    OR (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NULL)
                    OR
                    (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NOT NULL AND D.LAST_UPDT_DATE <> S.LAST_UPDT_DATE)
                    OR (D.LAST_UPDT_DATE IS NULL AND S.LAST_UPDT_DATE IS NOT NULL)
                    OR (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NULL)
                ) THEN
UPDATE
    SET D.TRANS_CODE                     = S.TRANS_CODE,
    D.ACT_LOC_CODE                   = S.ACT_LOC_CODE,
    D.AUTHORITY_DATA_OWNER_CODE      = S.AUTHORITY_DATA_OWNER_CODE,
    D.AUTHORITY_TYPE_CODE            = S.AUTHORITY_TYPE_CODE,
    D.AUTHORITY_AGN_CODE             = S.AUTHORITY_AGN_CODE,
    D.AUTHORITY_EFFC_DATE            = S.AUTHORITY_EFFC_DATE,
    D.ISSUE_DATE                     = S.ISSUE_DATE,
    D.END_DATE                       = S.END_DATE,
    D.ESTABLISHED_REPOSITORY_CODE    = S.ESTABLISHED_REPOSITORY_CODE,
    D.RESP_LEAD_PROG_IDEN            = S.RESP_LEAD_PROG_IDEN,
    D.AUTHORITY_SUBORG_DATA_OWNR_CDE = S.AUTHORITY_SUBORG_DATA_OWNR_CDE,
    D.AUTHORITY_SUBORG_CODE          = S.AUTHORITY_SUBORG_CODE,
    D.RESP_PERSON_DATA_OWNER_CODE    = S.RESP_PERSON_DATA_OWNER_CODE,
    D.RESP_PERSON_ID                 = S.RESP_PERSON_ID,
    D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT,
    D.CREATED_BY_USERID             = s.CREATED_BY_USERID,
    D.A_CREATED_DATE                 = S.A_CREATED_DATE,
    D.DATA_ORIG                      = S.DATA_ORIG,
    D.LAST_UPDT_BY                   = s.LAST_UPDT_BY,
    D.LAST_UPDT_DATE                 = s.LAST_UPDT_DATE
    WHEN NOT MATCHED THEN
INSERT (CA_FAC_SUBM_ID,
TRANS_CODE,
ACT_LOC_CODE,
AUTHORITY_DATA_OWNER_CODE,
AUTHORITY_TYPE_CODE,
AUTHORITY_AGN_CODE,
AUTHORITY_EFFC_DATE,
ISSUE_DATE,
END_DATE,
ESTABLISHED_REPOSITORY_CODE,
RESP_LEAD_PROG_IDEN,
AUTHORITY_SUBORG_DATA_OWNR_CDE,
AUTHORITY_SUBORG_CODE,
RESP_PERSON_DATA_OWNER_CODE,
RESP_PERSON_ID,
SUPP_INFO_TXT,
CREATED_BY_USERID,
A_CREATED_DATE,
DATA_ORIG,
LAST_UPDT_BY,
LAST_UPDT_DATE)
VALUES (S.WH_CA_FAC_SUBM_ID,
    S.TRANS_CODE,
    S.ACT_LOC_CODE,
    S.AUTHORITY_DATA_OWNER_CODE,
    S.AUTHORITY_TYPE_CODE,
    S.AUTHORITY_AGN_CODE,
    S.AUTHORITY_EFFC_DATE,
    S.ISSUE_DATE,
    S.END_DATE,
    S.ESTABLISHED_REPOSITORY_CODE,
    S.RESP_LEAD_PROG_IDEN,
    S.AUTHORITY_SUBORG_DATA_OWNR_CDE,
    S.AUTHORITY_SUBORG_CODE,
    S.RESP_PERSON_DATA_OWNER_CODE,
    S.RESP_PERSON_ID,
    S.SUPP_INFO_TXT,
    s.CREATED_BY_USERID,
    S.A_CREATED_DATE,
    S.DATA_ORIG,
    s.LAST_UPDT_BY,
    s.LAST_UPDT_DATE);
IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

SELECT @ErrorMessage = ERROR_MESSAGE(),
       @ErrorSeverity = ERROR_SEVERITY(),
       @ErrorState = ERROR_STATE()

           IF @localTran = 1 AND XACT_STATE() <> 0
    ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
END
GO

/*************************************************************************************************
** ObjectName: CA_MERGE_EVENT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CA_EVENT table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor      Created.
**  07/29/2020   Windsor      Updated for new columns.
**  02/21/2022   Windsor      Updated for new 5.11 columns.
**
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[CA_MERGE_EVENT] @CA_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
BEGIN
            SET @localTran = 1
BEGIN TRANSACTION LocalTran
END

BEGIN TRY
MERGE INTO RCRA_CA_EVENT D
        USING (SELECT *
               FROM ETL_CA_EVENT_VW
               WHERE CA_SUBM_ID = @CA_SUBM_ID) S
        ON (D.CA_EVENT_ID = S.WH_CA_EVENT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NOT NULL AND D.ACT_LOC_CODE <> S.ACT_LOC_CODE)
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NULL)
                    OR
                    (D.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL AND S.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL AND
                     D.CORCT_ACT_EVENT_DATA_OWNER_CDE <> S.CORCT_ACT_EVENT_DATA_OWNER_CDE)
                    OR (D.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NULL AND S.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL)
                    OR (D.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL AND S.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NULL)
                    OR (D.CORCT_ACT_EVENT_CODE IS NOT NULL AND S.CORCT_ACT_EVENT_CODE IS NOT NULL AND
                        D.CORCT_ACT_EVENT_CODE <> S.CORCT_ACT_EVENT_CODE)
                    OR (D.CORCT_ACT_EVENT_CODE IS NULL AND S.CORCT_ACT_EVENT_CODE IS NOT NULL)
                    OR (D.CORCT_ACT_EVENT_CODE IS NOT NULL AND S.CORCT_ACT_EVENT_CODE IS NULL)
                    OR
                    (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NOT NULL AND
                     D.EVENT_AGN_CODE <> S.EVENT_AGN_CODE)
                    OR (D.EVENT_AGN_CODE IS NULL AND S.EVENT_AGN_CODE IS NOT NULL)
                    OR (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NULL)
                    OR
                    (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NOT NULL AND D.EVENT_SEQ_NUM <> S.EVENT_SEQ_NUM)
                    OR (D.EVENT_SEQ_NUM IS NULL AND S.EVENT_SEQ_NUM IS NOT NULL)
                    OR (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NULL)
                    OR (D.ACTL_DATE IS NOT NULL AND S.ACTL_DATE IS NOT NULL AND D.ACTL_DATE <> S.ACTL_DATE)
                    OR (D.ACTL_DATE IS NULL AND S.ACTL_DATE IS NOT NULL)
                    OR (D.ACTL_DATE IS NOT NULL AND S.ACTL_DATE IS NULL)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND S.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND
                        D.ORIGINAL_SCHEDULE_DATE <> S.ORIGINAL_SCHEDULE_DATE)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NULL AND S.ORIGINAL_SCHEDULE_DATE IS NOT NULL)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND S.ORIGINAL_SCHEDULE_DATE IS NULL)
                    OR (D.NEW_SCHEDULE_DATE IS NOT NULL AND S.NEW_SCHEDULE_DATE IS NOT NULL AND
                        D.NEW_SCHEDULE_DATE <> S.NEW_SCHEDULE_DATE)
                    OR (D.NEW_SCHEDULE_DATE IS NULL AND S.NEW_SCHEDULE_DATE IS NOT NULL)
                    OR (D.NEW_SCHEDULE_DATE IS NOT NULL AND S.NEW_SCHEDULE_DATE IS NULL)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND
                        D.EVENT_SUBORG_DATA_OWNER_CODE <> S.EVENT_SUBORG_DATA_OWNER_CODE)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NULL)
                    OR (D.EVENT_SUBORG_CODE IS NOT NULL AND S.EVENT_SUBORG_CODE IS NOT NULL AND
                        D.EVENT_SUBORG_CODE <> S.EVENT_SUBORG_CODE)
                    OR (D.EVENT_SUBORG_CODE IS NULL AND S.EVENT_SUBORG_CODE IS NOT NULL)
                    OR (D.EVENT_SUBORG_CODE IS NOT NULL AND S.EVENT_SUBORG_CODE IS NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND
                        D.RESP_PERSON_DATA_OWNER_CODE <> S.RESP_PERSON_DATA_OWNER_CODE)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NULL)
                    OR
                    (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NOT NULL AND
                     D.RESP_PERSON_ID <> S.RESP_PERSON_ID)
                    OR (D.RESP_PERSON_ID IS NULL AND S.RESP_PERSON_ID IS NOT NULL)
                    OR (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR
                    (D.PUBLIC_SUPP_INFO_TXT IS NOT NULL AND S.PUBLIC_SUPP_INFO_TXT IS NOT NULL AND
                     D.PUBLIC_SUPP_INFO_TXT <> S.PUBLIC_SUPP_INFO_TXT)
                    OR (D.PUBLIC_SUPP_INFO_TXT IS NULL AND S.PUBLIC_SUPP_INFO_TXT IS NOT NULL)
                    OR (D.PUBLIC_SUPP_INFO_TXT IS NOT NULL AND S.PUBLIC_SUPP_INFO_TXT IS NULL)
                    OR
                    (D.CREATED_BY_USERID IS NOT NULL AND s.CREATED_BY_USERID IS NOT NULL AND
                     D.CREATED_BY_USERID <> s.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND s.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND s.CREATED_BY_USERID IS NULL)
                    OR
                    (D.A_CREATED_DATE IS NOT NULL AND S.A_CREATED_DATE IS NOT NULL AND
                     D.A_CREATED_DATE <> S.A_CREATED_DATE)
                    OR (D.A_CREATED_DATE IS NULL AND S.A_CREATED_DATE IS NOT NULL)
                    OR (D.A_CREATED_DATE IS NOT NULL AND S.A_CREATED_DATE IS NULL)
                    OR
                    (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NOT NULL AND D.DATA_ORIG <> S.DATA_ORIG)
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL)
                    OR
                    (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NOT NULL AND D.LAST_UPDT_BY <> S.LAST_UPDT_BY)
                    OR (D.LAST_UPDT_BY IS NULL AND S.LAST_UPDT_BY IS NOT NULL)
                    OR (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NULL)
                    OR
                    (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NOT NULL AND D.LAST_UPDT_DATE <> S.LAST_UPDT_DATE)
                    OR (D.LAST_UPDT_DATE IS NULL AND S.LAST_UPDT_DATE IS NOT NULL)
                    OR (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NULL)
                )
            THEN
UPDATE
    SET D.TRANS_CODE                     = S.TRANS_CODE,
    D.ACT_LOC_CODE                   = S.ACT_LOC_CODE,
    D.CORCT_ACT_EVENT_DATA_OWNER_CDE = S.CORCT_ACT_EVENT_DATA_OWNER_CDE,
    D.CORCT_ACT_EVENT_CODE           = S.CORCT_ACT_EVENT_CODE,
    D.EVENT_AGN_CODE                 = S.EVENT_AGN_CODE,
    D.EVENT_SEQ_NUM                  = S.EVENT_SEQ_NUM,
    D.ACTL_DATE                      = S.ACTL_DATE,
    D.ORIGINAL_SCHEDULE_DATE         = S.ORIGINAL_SCHEDULE_DATE,
    D.NEW_SCHEDULE_DATE              = S.NEW_SCHEDULE_DATE,
    D.EVENT_SUBORG_DATA_OWNER_CODE   = S.EVENT_SUBORG_DATA_OWNER_CODE,
    D.EVENT_SUBORG_CODE              = S.EVENT_SUBORG_CODE,
    D.RESP_PERSON_DATA_OWNER_CODE    = S.RESP_PERSON_DATA_OWNER_CODE,
    D.RESP_PERSON_ID                 = S.RESP_PERSON_ID,
    D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT,
    D.PUBLIC_SUPP_INFO_TXT           = S.PUBLIC_SUPP_INFO_TXT,
    D.CREATED_BY_USERID             = s.CREATED_BY_USERID,
    D.A_CREATED_DATE                 = S.A_CREATED_DATE,
    D.DATA_ORIG                      = S.DATA_ORIG,
    D.LAST_UPDT_BY                   = s.LAST_UPDT_BY,
    D.LAST_UPDT_DATE                 = s.LAST_UPDT_DATE
    WHEN NOT MATCHED THEN
INSERT (CA_FAC_SUBM_ID,
TRANS_CODE,
ACT_LOC_CODE,
CORCT_ACT_EVENT_DATA_OWNER_CDE,
CORCT_ACT_EVENT_CODE,
EVENT_AGN_CODE,
EVENT_SEQ_NUM,
ACTL_DATE,
ORIGINAL_SCHEDULE_DATE,
NEW_SCHEDULE_DATE,
EVENT_SUBORG_DATA_OWNER_CODE,
EVENT_SUBORG_CODE,
RESP_PERSON_DATA_OWNER_CODE,
RESP_PERSON_ID,
SUPP_INFO_TXT,
PUBLIC_SUPP_INFO_TXT,
CREATED_BY_USERID,
A_CREATED_DATE,
DATA_ORIG,
LAST_UPDT_BY,
LAST_UPDT_DATE)
VALUES (S.WH_CA_FAC_SUBM_ID,
    S.TRANS_CODE,
    S.ACT_LOC_CODE,
    S.CORCT_ACT_EVENT_DATA_OWNER_CDE,
    S.CORCT_ACT_EVENT_CODE,
    S.EVENT_AGN_CODE,
    S.EVENT_SEQ_NUM,
    S.ACTL_DATE,
    S.ORIGINAL_SCHEDULE_DATE,
    S.NEW_SCHEDULE_DATE,
    S.EVENT_SUBORG_DATA_OWNER_CODE,
    S.EVENT_SUBORG_CODE,
    S.RESP_PERSON_DATA_OWNER_CODE,
    S.RESP_PERSON_ID,
    S.SUPP_INFO_TXT,
    S.PUBLIC_SUPP_INFO_TXT,
    s.CREATED_BY_USERID,
    S.A_CREATED_DATE,
    S.DATA_ORIG,
    s.LAST_UPDT_BY,
    s.LAST_UPDT_DATE);
IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

SELECT @ErrorMessage = ERROR_MESSAGE(),
       @ErrorSeverity = ERROR_SEVERITY(),
       @ErrorState = ERROR_STATE()

           IF @localTran = 1 AND XACT_STATE() <> 0
    ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
END
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_ENFRC_ACT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_ENFRC_ACT table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/21/2022   Windsor     Updated for new 5.11 columns.
**
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[CME_MERGE_ENFRC_ACT] @CME_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
BEGIN
            SET @localTran = 1
BEGIN TRANSACTION LocalTran
END

BEGIN TRY
MERGE INTO RCRA_CME_ENFRC_ACT D
        USING (SELECT *
               FROM ETL_CME_ENFRC_ACT_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_ENFRC_ACT_ID = S.WH_CME_ENFR_ACT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.ENFRC_AGN_LOC_NAME IS NOT NULL AND S.ENFRC_AGN_LOC_NAME IS NOT NULL AND
                        D.ENFRC_AGN_LOC_NAME <> S.ENFRC_AGN_LOC_NAME)
                    OR (D.ENFRC_AGN_LOC_NAME IS NULL AND S.ENFRC_AGN_LOC_NAME IS NOT NULL)
                    OR (D.ENFRC_AGN_LOC_NAME IS NOT NULL AND S.ENFRC_AGN_LOC_NAME IS NULL)
                    OR
                    (D.ENFRC_ACT_IDEN IS NOT NULL AND S.ENFRC_ACT_IDEN IS NOT NULL AND
                     D.ENFRC_ACT_IDEN <> S.ENFRC_ACT_IDEN)
                    OR (D.ENFRC_ACT_IDEN IS NULL AND S.ENFRC_ACT_IDEN IS NOT NULL)
                    OR (D.ENFRC_ACT_IDEN IS NOT NULL AND S.ENFRC_ACT_IDEN IS NULL)
                    OR
                    (D.ENFRC_ACT_DATE IS NOT NULL AND S.ENFRC_ACT_DATE IS NOT NULL AND
                     D.ENFRC_ACT_DATE <> S.ENFRC_ACT_DATE)
                    OR (D.ENFRC_ACT_DATE IS NULL AND S.ENFRC_ACT_DATE IS NOT NULL)
                    OR (D.ENFRC_ACT_DATE IS NOT NULL AND S.ENFRC_ACT_DATE IS NULL)
                    OR
                    (D.ENFRC_AGN_NAME IS NOT NULL AND S.ENFRC_AGN_NAME IS NOT NULL AND
                     D.ENFRC_AGN_NAME <> S.ENFRC_AGN_NAME)
                    OR (D.ENFRC_AGN_NAME IS NULL AND S.ENFRC_AGN_NAME IS NOT NULL)
                    OR (D.ENFRC_AGN_NAME IS NOT NULL AND S.ENFRC_AGN_NAME IS NULL)
                    OR
                    (D.ENFRC_DOCKET_NUM IS NOT NULL AND S.ENFRC_DOCKET_NUM IS NOT NULL AND
                     D.ENFRC_DOCKET_NUM <> S.ENFRC_DOCKET_NUM)
                    OR (D.ENFRC_DOCKET_NUM IS NULL AND S.ENFRC_DOCKET_NUM IS NOT NULL)
                    OR (D.ENFRC_DOCKET_NUM IS NOT NULL AND S.ENFRC_DOCKET_NUM IS NULL)
                    OR (D.ENFRC_ATTRY IS NOT NULL AND S.ENFRC_ATTRY IS NOT NULL AND D.ENFRC_ATTRY <> S.ENFRC_ATTRY)
                    OR (D.ENFRC_ATTRY IS NULL AND S.ENFRC_ATTRY IS NOT NULL)
                    OR (D.ENFRC_ATTRY IS NOT NULL AND S.ENFRC_ATTRY IS NULL)
                    OR (D.CORCT_ACT_COMPT IS NOT NULL AND S.CORCT_ACT_COMPT IS NOT NULL AND
                        D.CORCT_ACT_COMPT <> S.CORCT_ACT_COMPT)
                    OR (D.CORCT_ACT_COMPT IS NULL AND S.CORCT_ACT_COMPT IS NOT NULL)
                    OR (D.CORCT_ACT_COMPT IS NOT NULL AND S.CORCT_ACT_COMPT IS NULL)
                    OR (D.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NOT NULL AND S.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NOT NULL AND
                        D.CNST_AGMT_FINAL_ORDER_SEQ_NUM <> S.CNST_AGMT_FINAL_ORDER_SEQ_NUM)
                    OR (D.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NULL AND S.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NOT NULL)
                    OR (D.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NOT NULL AND S.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NULL)
                    OR
                    (D.APPEAL_INIT_DATE IS NOT NULL AND S.APPEAL_INIT_DATE IS NOT NULL AND
                     D.APPEAL_INIT_DATE <> S.APPEAL_INIT_DATE)
                    OR (D.APPEAL_INIT_DATE IS NULL AND S.APPEAL_INIT_DATE IS NOT NULL)
                    OR (D.APPEAL_INIT_DATE IS NOT NULL AND S.APPEAL_INIT_DATE IS NULL)
                    OR
                    (D.APPEAL_RSLN_DATE IS NOT NULL AND S.APPEAL_RSLN_DATE IS NOT NULL AND
                     D.APPEAL_RSLN_DATE <> S.APPEAL_RSLN_DATE)
                    OR (D.APPEAL_RSLN_DATE IS NULL AND S.APPEAL_RSLN_DATE IS NOT NULL)
                    OR (D.APPEAL_RSLN_DATE IS NOT NULL AND S.APPEAL_RSLN_DATE IS NULL)
                    OR
                    (D.DISP_STAT_DATE IS NOT NULL AND S.DISP_STAT_DATE IS NOT NULL AND
                     D.DISP_STAT_DATE <> S.DISP_STAT_DATE)
                    OR (D.DISP_STAT_DATE IS NULL AND S.DISP_STAT_DATE IS NOT NULL)
                    OR (D.DISP_STAT_DATE IS NOT NULL AND S.DISP_STAT_DATE IS NULL)
                    OR (D.DISP_STAT_OWNER IS NOT NULL AND S.DISP_STAT_OWNER IS NOT NULL AND
                        D.DISP_STAT_OWNER <> S.DISP_STAT_OWNER)
                    OR (D.DISP_STAT_OWNER IS NULL AND S.DISP_STAT_OWNER IS NOT NULL)
                    OR (D.DISP_STAT_OWNER IS NOT NULL AND S.DISP_STAT_OWNER IS NULL)
                    OR (D.DISP_STAT IS NOT NULL AND S.DISP_STAT IS NOT NULL AND D.DISP_STAT <> S.DISP_STAT)
                    OR (D.DISP_STAT IS NULL AND S.DISP_STAT IS NOT NULL)
                    OR (D.DISP_STAT IS NOT NULL AND S.DISP_STAT IS NULL)
                    OR (D.ENFRC_OWNER IS NOT NULL AND S.ENFRC_OWNER IS NOT NULL AND D.ENFRC_OWNER <> S.ENFRC_OWNER)
                    OR (D.ENFRC_OWNER IS NULL AND S.ENFRC_OWNER IS NOT NULL)
                    OR (D.ENFRC_OWNER IS NOT NULL AND S.ENFRC_OWNER IS NULL)
                    OR (D.ENFRC_TYPE IS NOT NULL AND S.ENFRC_TYPE IS NOT NULL AND D.ENFRC_TYPE <> S.ENFRC_TYPE)
                    OR (D.ENFRC_TYPE IS NULL AND S.ENFRC_TYPE IS NOT NULL)
                    OR (D.ENFRC_TYPE IS NOT NULL AND S.ENFRC_TYPE IS NULL)
                    OR (D.ENFRC_RESP_PERSON_OWNER IS NOT NULL AND S.ENFRC_RESP_PERSON_OWNER IS NOT NULL AND
                        D.ENFRC_RESP_PERSON_OWNER <> S.ENFRC_RESP_PERSON_OWNER)
                    OR (D.ENFRC_RESP_PERSON_OWNER IS NULL AND S.ENFRC_RESP_PERSON_OWNER IS NOT NULL)
                    OR (D.ENFRC_RESP_PERSON_OWNER IS NOT NULL AND S.ENFRC_RESP_PERSON_OWNER IS NULL)
                    OR (D.ENFRC_RESP_PERSON_IDEN IS NOT NULL AND S.ENFRC_RESP_PERSON_IDEN IS NOT NULL AND
                        D.ENFRC_RESP_PERSON_IDEN <> S.ENFRC_RESP_PERSON_IDEN)
                    OR (D.ENFRC_RESP_PERSON_IDEN IS NULL AND S.ENFRC_RESP_PERSON_IDEN IS NOT NULL)
                    OR (D.ENFRC_RESP_PERSON_IDEN IS NOT NULL AND S.ENFRC_RESP_PERSON_IDEN IS NULL)
                    OR (D.ENFRC_RESP_SUBORG_OWNER IS NOT NULL AND S.ENFRC_RESP_SUBORG_OWNER IS NOT NULL AND
                        D.ENFRC_RESP_SUBORG_OWNER <> S.ENFRC_RESP_SUBORG_OWNER)
                    OR (D.ENFRC_RESP_SUBORG_OWNER IS NULL AND S.ENFRC_RESP_SUBORG_OWNER IS NOT NULL)
                    OR (D.ENFRC_RESP_SUBORG_OWNER IS NOT NULL AND S.ENFRC_RESP_SUBORG_OWNER IS NULL)
                    OR (D.ENFRC_RESP_SUBORG IS NOT NULL AND S.ENFRC_RESP_SUBORG IS NOT NULL AND
                        D.ENFRC_RESP_SUBORG <> S.ENFRC_RESP_SUBORG)
                    OR (D.ENFRC_RESP_SUBORG IS NULL AND S.ENFRC_RESP_SUBORG IS NOT NULL)
                    OR (D.ENFRC_RESP_SUBORG IS NOT NULL AND S.ENFRC_RESP_SUBORG IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                    OR (D.FA_REQUIRED IS NOT NULL AND S.FA_REQUIRED IS NOT NULL AND D.FA_REQUIRED <> S.FA_REQUIRED)
                    OR (D.FA_REQUIRED IS NULL AND S.FA_REQUIRED IS NOT NULL)
                    OR (D.FA_REQUIRED IS NOT NULL AND S.FA_REQUIRED IS NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND s.CREATED_BY_USERID IS NOT NULL AND
                        D.CREATED_BY_USERID <> s.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND s.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND s.CREATED_BY_USERID IS NULL)
                    OR (D.C_CREATED_DATE IS NOT NULL AND S.C_CREATED_DATE IS NOT NULL AND
                        D.C_CREATED_DATE <> S.C_CREATED_DATE)
                    OR (D.C_CREATED_DATE IS NULL AND S.C_CREATED_DATE IS NOT NULL)
                    OR (D.C_CREATED_DATE IS NOT NULL AND S.C_CREATED_DATE IS NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NOT NULL AND D.DATA_ORIG <> S.DATA_ORIG)
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL)
                    OR
                    (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NOT NULL AND D.LAST_UPDT_BY <> S.LAST_UPDT_BY)
                    OR (D.LAST_UPDT_BY IS NULL AND S.LAST_UPDT_BY IS NOT NULL)
                    OR (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NULL)
                    OR
                    (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NOT NULL AND D.LAST_UPDT_DATE <> S.LAST_UPDT_DATE)
                    OR (D.LAST_UPDT_DATE IS NULL AND S.LAST_UPDT_DATE IS NOT NULL)
                    OR (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NULL)
                ) THEN
UPDATE
    SET D.TRANS_CODE                    = S.TRANS_CODE,
    D.ENFRC_AGN_LOC_NAME            = S.ENFRC_AGN_LOC_NAME,
    D.ENFRC_ACT_IDEN                = S.ENFRC_ACT_IDEN,
    D.ENFRC_ACT_DATE                = S.ENFRC_ACT_DATE,
    D.ENFRC_AGN_NAME                = S.ENFRC_AGN_NAME,
    D.ENFRC_DOCKET_NUM              = S.ENFRC_DOCKET_NUM,
    D.ENFRC_ATTRY                   = S.ENFRC_ATTRY,
    D.CORCT_ACT_COMPT               = S.CORCT_ACT_COMPT,
    D.CNST_AGMT_FINAL_ORDER_SEQ_NUM = S.CNST_AGMT_FINAL_ORDER_SEQ_NUM,
    D.APPEAL_INIT_DATE              = S.APPEAL_INIT_DATE,
    D.APPEAL_RSLN_DATE              = S.APPEAL_RSLN_DATE,
    D.DISP_STAT_DATE                = S.DISP_STAT_DATE,
    D.DISP_STAT_OWNER               = S.DISP_STAT_OWNER,
    D.DISP_STAT                     = S.DISP_STAT,
    D.ENFRC_OWNER                   = S.ENFRC_OWNER,
    D.ENFRC_TYPE                    = S.ENFRC_TYPE,
    D.ENFRC_RESP_PERSON_OWNER       = S.ENFRC_RESP_PERSON_OWNER,
    D.ENFRC_RESP_PERSON_IDEN        = S.ENFRC_RESP_PERSON_IDEN,
    D.ENFRC_RESP_SUBORG_OWNER       = S.ENFRC_RESP_SUBORG_OWNER,
    D.ENFRC_RESP_SUBORG             = S.ENFRC_RESP_SUBORG,
    D.NOTES                         = S.NOTES,
    D.FA_REQUIRED                   = S.FA_REQUIRED,
    D.CREATED_BY_USERID            = s.CREATED_BY_USERID,
    D.C_CREATED_DATE                = S.C_CREATED_DATE,
    D.DATA_ORIG                     = S.DATA_ORIG,
    D.LAST_UPDT_BY                  = s.LAST_UPDT_BY,
    D.LAST_UPDT_DATE                = s.LAST_UPDT_DATE
    WHEN NOT MATCHED THEN
INSERT (CME_FAC_SUBM_ID,
TRANS_CODE,
ENFRC_AGN_LOC_NAME,
ENFRC_ACT_IDEN,
ENFRC_ACT_DATE,
ENFRC_AGN_NAME,
ENFRC_DOCKET_NUM,
ENFRC_ATTRY,
CORCT_ACT_COMPT,
CNST_AGMT_FINAL_ORDER_SEQ_NUM,
APPEAL_INIT_DATE,
APPEAL_RSLN_DATE,
DISP_STAT_DATE,
DISP_STAT_OWNER,
DISP_STAT,
ENFRC_OWNER,
ENFRC_TYPE,
ENFRC_RESP_PERSON_OWNER,
ENFRC_RESP_PERSON_IDEN,
ENFRC_RESP_SUBORG_OWNER,
ENFRC_RESP_SUBORG,
NOTES,
FA_REQUIRED,
CREATED_BY_USERID,
C_CREATED_DATE,
DATA_ORIG,
LAST_UPDT_BY,
LAST_UPDT_DATE
)
VALUES (S.WH_CME_FAC_SUBM_ID,
    S.TRANS_CODE,
    S.ENFRC_AGN_LOC_NAME,
    S.ENFRC_ACT_IDEN,
    S.ENFRC_ACT_DATE,
    S.ENFRC_AGN_NAME,
    S.ENFRC_DOCKET_NUM,
    S.ENFRC_ATTRY,
    S.CORCT_ACT_COMPT,
    S.CNST_AGMT_FINAL_ORDER_SEQ_NUM,
    S.APPEAL_INIT_DATE,
    S.APPEAL_RSLN_DATE,
    S.DISP_STAT_DATE,
    S.DISP_STAT_OWNER,
    S.DISP_STAT,
    S.ENFRC_OWNER,
    S.ENFRC_TYPE,
    S.ENFRC_RESP_PERSON_OWNER,
    S.ENFRC_RESP_PERSON_IDEN,
    S.ENFRC_RESP_SUBORG_OWNER,
    S.ENFRC_RESP_SUBORG,
    S.NOTES,
    S.FA_REQUIRED,
    s.CREATED_BY_USERID,
    S.C_CREATED_DATE,
    S.DATA_ORIG,
    s.LAST_UPDT_BY,
    s.LAST_UPDT_DATE);
IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

SELECT @ErrorMessage = ERROR_MESSAGE(),
       @ErrorSeverity = ERROR_SEVERITY(),
       @ErrorState = ERROR_STATE()

           IF @localTran = 1 AND XACT_STATE() <> 0
    ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
END
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_EVAL.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_EVAL table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/21/2022   Windsor     Updated for new 5.11 columns.
**
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[CME_MERGE_EVAL] @CME_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
BEGIN
            SET @localTran = 1
BEGIN TRANSACTION LocalTran
END

BEGIN TRY
MERGE INTO RCRA_CME_EVAL D
        USING (SELECT *
               FROM ETL_CME_EVAL_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_EVAL_ID = S.WH_CME_EVAL_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.EVAL_ACT_LOC IS NOT NULL AND S.EVAL_ACT_LOC IS NOT NULL AND D.EVAL_ACT_LOC <> S.EVAL_ACT_LOC)
                    OR (D.EVAL_ACT_LOC IS NULL AND S.EVAL_ACT_LOC IS NOT NULL)
                    OR (D.EVAL_ACT_LOC IS NOT NULL AND S.EVAL_ACT_LOC IS NULL)
                    OR (D.EVAL_IDEN IS NOT NULL AND S.EVAL_IDEN IS NOT NULL AND D.EVAL_IDEN <> S.EVAL_IDEN)
                    OR (D.EVAL_IDEN IS NULL AND S.EVAL_IDEN IS NOT NULL)
                    OR (D.EVAL_IDEN IS NOT NULL AND S.EVAL_IDEN IS NULL)
                    OR (D.EVAL_START_DATE IS NOT NULL AND S.EVAL_START_DATE IS NOT NULL AND
                        D.EVAL_START_DATE <> S.EVAL_START_DATE)
                    OR (D.EVAL_START_DATE IS NULL AND S.EVAL_START_DATE IS NOT NULL)
                    OR (D.EVAL_START_DATE IS NOT NULL AND S.EVAL_START_DATE IS NULL)
                    OR
                    (D.EVAL_RESP_AGN IS NOT NULL AND S.EVAL_RESP_AGN IS NOT NULL AND D.EVAL_RESP_AGN <> S.EVAL_RESP_AGN)
                    OR (D.EVAL_RESP_AGN IS NULL AND S.EVAL_RESP_AGN IS NOT NULL)
                    OR (D.EVAL_RESP_AGN IS NOT NULL AND S.EVAL_RESP_AGN IS NULL)
                    OR (D.DAY_ZERO IS NOT NULL AND S.DAY_ZERO IS NOT NULL AND D.DAY_ZERO <> S.DAY_ZERO)
                    OR (D.DAY_ZERO IS NULL AND S.DAY_ZERO IS NOT NULL)
                    OR (D.DAY_ZERO IS NOT NULL AND S.DAY_ZERO IS NULL)
                    OR (D.FOUND_VIOL IS NOT NULL AND S.FOUND_VIOL IS NOT NULL AND D.FOUND_VIOL <> S.FOUND_VIOL)
                    OR (D.FOUND_VIOL IS NULL AND S.FOUND_VIOL IS NOT NULL)
                    OR (D.FOUND_VIOL IS NOT NULL AND S.FOUND_VIOL IS NULL)
                    OR
                    (D.CTZN_CPLT_IND IS NOT NULL AND S.CTZN_CPLT_IND IS NOT NULL AND D.CTZN_CPLT_IND <> S.CTZN_CPLT_IND)
                    OR (D.CTZN_CPLT_IND IS NULL AND S.CTZN_CPLT_IND IS NOT NULL)
                    OR (D.CTZN_CPLT_IND IS NOT NULL AND S.CTZN_CPLT_IND IS NULL)
                    OR
                    (D.MULTIMEDIA_IND IS NOT NULL AND S.MULTIMEDIA_IND IS NOT NULL AND
                     D.MULTIMEDIA_IND <> S.MULTIMEDIA_IND)
                    OR (D.MULTIMEDIA_IND IS NULL AND S.MULTIMEDIA_IND IS NOT NULL)
                    OR (D.MULTIMEDIA_IND IS NOT NULL AND S.MULTIMEDIA_IND IS NULL)
                    OR (D.SAMPL_IND IS NOT NULL AND S.SAMPL_IND IS NOT NULL AND D.SAMPL_IND <> S.SAMPL_IND)
                    OR (D.SAMPL_IND IS NULL AND S.SAMPL_IND IS NOT NULL)
                    OR (D.SAMPL_IND IS NOT NULL AND S.SAMPL_IND IS NULL)
                    OR (D.NOT_SUBTL_C_IND IS NOT NULL AND S.NOT_SUBTL_C_IND IS NOT NULL AND
                        D.NOT_SUBTL_C_IND <> S.NOT_SUBTL_C_IND)
                    OR (D.NOT_SUBTL_C_IND IS NULL AND S.NOT_SUBTL_C_IND IS NOT NULL)
                    OR (D.NOT_SUBTL_C_IND IS NOT NULL AND S.NOT_SUBTL_C_IND IS NULL)
                    OR (D.EVAL_TYPE_OWNER IS NOT NULL AND S.EVAL_TYPE_OWNER IS NOT NULL AND
                        D.EVAL_TYPE_OWNER <> S.EVAL_TYPE_OWNER)
                    OR (D.EVAL_TYPE_OWNER IS NULL AND S.EVAL_TYPE_OWNER IS NOT NULL)
                    OR (D.EVAL_TYPE_OWNER IS NOT NULL AND S.EVAL_TYPE_OWNER IS NULL)
                    OR (D.EVAL_TYPE IS NOT NULL AND S.EVAL_TYPE IS NOT NULL AND D.EVAL_TYPE <> S.EVAL_TYPE)
                    OR (D.EVAL_TYPE IS NULL AND S.EVAL_TYPE IS NOT NULL)
                    OR (D.EVAL_TYPE IS NOT NULL AND S.EVAL_TYPE IS NULL)
                    OR
                    (D.FOCUS_AREA_OWNER IS NOT NULL AND S.FOCUS_AREA_OWNER IS NOT NULL AND
                     D.FOCUS_AREA_OWNER <> S.FOCUS_AREA_OWNER)
                    OR (D.FOCUS_AREA_OWNER IS NULL AND S.FOCUS_AREA_OWNER IS NOT NULL)
                    OR (D.FOCUS_AREA_OWNER IS NOT NULL AND S.FOCUS_AREA_OWNER IS NULL)
                    OR (D.FOCUS_AREA IS NOT NULL AND S.FOCUS_AREA IS NOT NULL AND D.FOCUS_AREA <> S.FOCUS_AREA)
                    OR (D.FOCUS_AREA IS NULL AND S.FOCUS_AREA IS NOT NULL)
                    OR (D.FOCUS_AREA IS NOT NULL AND S.FOCUS_AREA IS NULL)
                    OR (D.EVAL_RESP_PERSON_IDEN_OWNER IS NOT NULL AND S.EVAL_RESP_PERSON_IDEN_OWNER IS NOT NULL AND
                        D.EVAL_RESP_PERSON_IDEN_OWNER <> S.EVAL_RESP_PERSON_IDEN_OWNER)
                    OR (D.EVAL_RESP_PERSON_IDEN_OWNER IS NULL AND S.EVAL_RESP_PERSON_IDEN_OWNER IS NOT NULL)
                    OR (D.EVAL_RESP_PERSON_IDEN_OWNER IS NOT NULL AND S.EVAL_RESP_PERSON_IDEN_OWNER IS NULL)
                    OR (D.EVAL_RESP_PERSON_IDEN IS NOT NULL AND S.EVAL_RESP_PERSON_IDEN IS NOT NULL AND
                        D.EVAL_RESP_PERSON_IDEN <> S.EVAL_RESP_PERSON_IDEN)
                    OR (D.EVAL_RESP_PERSON_IDEN IS NULL AND S.EVAL_RESP_PERSON_IDEN IS NOT NULL)
                    OR (D.EVAL_RESP_PERSON_IDEN IS NOT NULL AND S.EVAL_RESP_PERSON_IDEN IS NULL)
                    OR (D.EVAL_RESP_SUBORG_OWNER IS NOT NULL AND S.EVAL_RESP_SUBORG_OWNER IS NOT NULL AND
                        D.EVAL_RESP_SUBORG_OWNER <> S.EVAL_RESP_SUBORG_OWNER)
                    OR (D.EVAL_RESP_SUBORG_OWNER IS NULL AND S.EVAL_RESP_SUBORG_OWNER IS NOT NULL)
                    OR (D.EVAL_RESP_SUBORG_OWNER IS NOT NULL AND S.EVAL_RESP_SUBORG_OWNER IS NULL)
                    OR
                    (D.EVAL_RESP_SUBORG IS NOT NULL AND S.EVAL_RESP_SUBORG IS NOT NULL AND
                     D.EVAL_RESP_SUBORG <> S.EVAL_RESP_SUBORG)
                    OR (D.EVAL_RESP_SUBORG IS NULL AND S.EVAL_RESP_SUBORG IS NOT NULL)
                    OR (D.EVAL_RESP_SUBORG IS NOT NULL AND S.EVAL_RESP_SUBORG IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                    OR (D.NOC_DATE IS NOT NULL AND S.NOC_DATE IS NOT NULL AND D.NOC_DATE <> S.NOC_DATE)
                    OR (D.NOC_DATE IS NULL AND S.NOC_DATE IS NOT NULL)
                    OR (D.NOC_DATE IS NOT NULL AND S.NOC_DATE IS NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND s.CREATED_BY_USERID IS NOT NULL AND
                        D.CREATED_BY_USERID <> s.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND s.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND s.CREATED_BY_USERID IS NULL)
                    OR (D.C_CREATED_DATE IS NOT NULL AND S.C_CREATED_DATE IS NOT NULL AND
                        D.C_CREATED_DATE <> S.C_CREATED_DATE)
                    OR (D.C_CREATED_DATE IS NULL AND S.C_CREATED_DATE IS NOT NULL)
                    OR (D.C_CREATED_DATE IS NOT NULL AND S.C_CREATED_DATE IS NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NOT NULL AND D.DATA_ORIG <> S.DATA_ORIG)
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL)
                    OR
                    (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NOT NULL AND D.LAST_UPDT_BY <> S.LAST_UPDT_BY)
                    OR (D.LAST_UPDT_BY IS NULL AND S.LAST_UPDT_BY IS NOT NULL)
                    OR (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NULL)
                    OR
                    (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NOT NULL AND D.LAST_UPDT_DATE <> S.LAST_UPDT_DATE)
                    OR (D.LAST_UPDT_DATE IS NULL AND S.LAST_UPDT_DATE IS NOT NULL)
                    OR (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NULL)
                ) THEN
UPDATE
    SET D.TRANS_CODE                  = S.TRANS_CODE,
    D.EVAL_ACT_LOC                = S.EVAL_ACT_LOC,
    D.EVAL_IDEN                   = S.EVAL_IDEN,
    D.EVAL_START_DATE             = S.EVAL_START_DATE,
    D.EVAL_RESP_AGN               = S.EVAL_RESP_AGN,
    D.DAY_ZERO                    = S.DAY_ZERO,
    D.FOUND_VIOL                  = S.FOUND_VIOL,
    D.CTZN_CPLT_IND               = S.CTZN_CPLT_IND,
    D.MULTIMEDIA_IND              = S.MULTIMEDIA_IND,
    D.SAMPL_IND                   = S.SAMPL_IND,
    D.NOT_SUBTL_C_IND             = S.NOT_SUBTL_C_IND,
    D.EVAL_TYPE_OWNER             = S.EVAL_TYPE_OWNER,
    D.EVAL_TYPE                   = S.EVAL_TYPE,
    D.FOCUS_AREA_OWNER            = S.FOCUS_AREA_OWNER,
    D.FOCUS_AREA                  = S.FOCUS_AREA,
    D.EVAL_RESP_PERSON_IDEN_OWNER = S.EVAL_RESP_PERSON_IDEN_OWNER,
    D.EVAL_RESP_PERSON_IDEN       = S.EVAL_RESP_PERSON_IDEN,
    D.EVAL_RESP_SUBORG_OWNER      = S.EVAL_RESP_SUBORG_OWNER,
    D.EVAL_RESP_SUBORG            = S.EVAL_RESP_SUBORG,
    D.NOTES                       = S.NOTES,
    D.NOC_DATE                    = S.NOC_DATE,
    D.CREATED_BY_USERID          = s.CREATED_BY_USERID,
    D.C_CREATED_DATE              = S.C_CREATED_DATE,
    D.DATA_ORIG                   = S.DATA_ORIG,
    D.LAST_UPDT_BY                = s.LAST_UPDT_BY,
    D.LAST_UPDT_DATE              = s.LAST_UPDT_DATE
    WHEN NOT MATCHED THEN
INSERT (CME_FAC_SUBM_ID,
TRANS_CODE,
EVAL_ACT_LOC,
EVAL_IDEN,
EVAL_START_DATE,
EVAL_RESP_AGN,
DAY_ZERO,
FOUND_VIOL,
CTZN_CPLT_IND,
MULTIMEDIA_IND,
SAMPL_IND,
NOT_SUBTL_C_IND,
EVAL_TYPE_OWNER,
EVAL_TYPE,
FOCUS_AREA_OWNER,
FOCUS_AREA,
EVAL_RESP_PERSON_IDEN_OWNER,
EVAL_RESP_PERSON_IDEN,
EVAL_RESP_SUBORG_OWNER,
EVAL_RESP_SUBORG,
NOTES,
NOC_DATE,
CREATED_BY_USERID,
C_CREATED_DATE,
DATA_ORIG,
LAST_UPDT_BY,
LAST_UPDT_DATE)
VALUES (S.WH_CME_FAC_SUBM_ID,
    S.TRANS_CODE,
    S.EVAL_ACT_LOC,
    S.EVAL_IDEN,
    S.EVAL_START_DATE,
    S.EVAL_RESP_AGN,
    S.DAY_ZERO,
    S.FOUND_VIOL,
    S.CTZN_CPLT_IND,
    S.MULTIMEDIA_IND,
    S.SAMPL_IND,
    S.NOT_SUBTL_C_IND,
    S.EVAL_TYPE_OWNER,
    S.EVAL_TYPE,
    S.FOCUS_AREA_OWNER,
    S.FOCUS_AREA,
    S.EVAL_RESP_PERSON_IDEN_OWNER,
    S.EVAL_RESP_PERSON_IDEN,
    S.EVAL_RESP_SUBORG_OWNER,
    S.EVAL_RESP_SUBORG,
    S.NOTES,
    S.NOC_DATE,
    s.CREATED_BY_USERID,
    S.C_CREATED_DATE,
    S.DATA_ORIG,
    s.LAST_UPDT_BY,
    s.LAST_UPDT_DATE);
IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

SELECT @ErrorMessage = ERROR_MESSAGE(),
       @ErrorSeverity = ERROR_SEVERITY(),
       @ErrorState = ERROR_STATE()

           IF @localTran = 1 AND XACT_STATE() <> 0
    ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
END
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_VIOL.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_VIOL table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/21/2022   Windsor     Updated for new 5.11 columns.
**
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[CME_MERGE_VIOL] @CME_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
BEGIN
            SET @localTran = 1
BEGIN TRANSACTION LocalTran
END

BEGIN TRY
MERGE INTO RCRA_CME_VIOL D
        USING (SELECT *
               FROM ETL_CME_VIOL_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_VIOL_ID = S.WH_CME_VIOL_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.VIOL_ACT_LOC IS NOT NULL AND S.VIOL_ACT_LOC IS NOT NULL AND D.VIOL_ACT_LOC <> S.VIOL_ACT_LOC)
                    OR (D.VIOL_ACT_LOC IS NULL AND S.VIOL_ACT_LOC IS NOT NULL)
                    OR (D.VIOL_ACT_LOC IS NOT NULL AND S.VIOL_ACT_LOC IS NULL)
                    OR (D.VIOL_SEQ_NUM IS NOT NULL AND S.VIOL_SEQ_NUM IS NOT NULL AND D.VIOL_SEQ_NUM <> S.VIOL_SEQ_NUM)
                    OR (D.VIOL_SEQ_NUM IS NULL AND S.VIOL_SEQ_NUM IS NOT NULL)
                    OR (D.VIOL_SEQ_NUM IS NOT NULL AND S.VIOL_SEQ_NUM IS NULL)
                    OR (D.AGN_WHICH_DTRM_VIOL IS NOT NULL AND S.AGN_WHICH_DTRM_VIOL IS NOT NULL AND
                        D.AGN_WHICH_DTRM_VIOL <> S.AGN_WHICH_DTRM_VIOL)
                    OR (D.AGN_WHICH_DTRM_VIOL IS NULL AND S.AGN_WHICH_DTRM_VIOL IS NOT NULL)
                    OR (D.AGN_WHICH_DTRM_VIOL IS NOT NULL AND S.AGN_WHICH_DTRM_VIOL IS NULL)
                    OR (D.VIOL_TYPE_OWNER IS NOT NULL AND S.VIOL_TYPE_OWNER IS NOT NULL AND
                        D.VIOL_TYPE_OWNER <> S.VIOL_TYPE_OWNER)
                    OR (D.VIOL_TYPE_OWNER IS NULL AND S.VIOL_TYPE_OWNER IS NOT NULL)
                    OR (D.VIOL_TYPE_OWNER IS NOT NULL AND S.VIOL_TYPE_OWNER IS NULL)
                    OR (D.VIOL_TYPE IS NOT NULL AND S.VIOL_TYPE IS NOT NULL AND D.VIOL_TYPE <> S.VIOL_TYPE)
                    OR (D.VIOL_TYPE IS NULL AND S.VIOL_TYPE IS NOT NULL)
                    OR (D.VIOL_TYPE IS NOT NULL AND S.VIOL_TYPE IS NULL)
                    OR (D.FORMER_CITATION_NAME IS NOT NULL AND S.FORMER_CITATION_NAME IS NOT NULL AND
                        D.FORMER_CITATION_NAME <> S.FORMER_CITATION_NAME)
                    OR (D.FORMER_CITATION_NAME IS NULL AND S.FORMER_CITATION_NAME IS NOT NULL)
                    OR (D.FORMER_CITATION_NAME IS NOT NULL AND S.FORMER_CITATION_NAME IS NULL)
                    OR
                    (D.VIOL_DTRM_DATE IS NOT NULL AND S.VIOL_DTRM_DATE IS NOT NULL AND
                     D.VIOL_DTRM_DATE <> S.VIOL_DTRM_DATE)
                    OR (D.VIOL_DTRM_DATE IS NULL AND S.VIOL_DTRM_DATE IS NOT NULL)
                    OR (D.VIOL_DTRM_DATE IS NOT NULL AND S.VIOL_DTRM_DATE IS NULL)
                    OR (D.RTN_COMPL_ACTL_DATE IS NOT NULL AND S.RTN_COMPL_ACTL_DATE IS NOT NULL AND
                        D.RTN_COMPL_ACTL_DATE <> S.RTN_COMPL_ACTL_DATE)
                    OR (D.RTN_COMPL_ACTL_DATE IS NULL AND S.RTN_COMPL_ACTL_DATE IS NOT NULL)
                    OR (D.RTN_COMPL_ACTL_DATE IS NOT NULL AND S.RTN_COMPL_ACTL_DATE IS NULL)
                    OR (D.RTN_TO_COMPL_QUAL IS NOT NULL AND S.RTN_TO_COMPL_QUAL IS NOT NULL AND
                        D.RTN_TO_COMPL_QUAL <> S.RTN_TO_COMPL_QUAL)
                    OR (D.RTN_TO_COMPL_QUAL IS NULL AND S.RTN_TO_COMPL_QUAL IS NOT NULL)
                    OR (D.RTN_TO_COMPL_QUAL IS NOT NULL AND S.RTN_TO_COMPL_QUAL IS NULL)
                    OR
                    (D.VIOL_RESP_AGN IS NOT NULL AND S.VIOL_RESP_AGN IS NOT NULL AND D.VIOL_RESP_AGN <> S.VIOL_RESP_AGN)
                    OR (D.VIOL_RESP_AGN IS NULL AND S.VIOL_RESP_AGN IS NOT NULL)
                    OR (D.VIOL_RESP_AGN IS NOT NULL AND S.VIOL_RESP_AGN IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND s.CREATED_BY_USERID IS NOT NULL AND
                        D.CREATED_BY_USERID <> s.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND s.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND s.CREATED_BY_USERID IS NULL)
                    OR (D.C_CREATED_DATE IS NOT NULL AND S.C_CREATED_DATE IS NOT NULL AND
                        D.C_CREATED_DATE <> S.C_CREATED_DATE)
                    OR (D.C_CREATED_DATE IS NULL AND S.C_CREATED_DATE IS NOT NULL)
                    OR (D.C_CREATED_DATE IS NOT NULL AND S.C_CREATED_DATE IS NULL)
                    OR
                    (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NOT NULL AND D.LAST_UPDT_BY <> S.LAST_UPDT_BY)
                    OR (D.LAST_UPDT_BY IS NULL AND S.LAST_UPDT_BY IS NOT NULL)
                    OR (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NULL)
                    OR
                    (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NOT NULL AND D.LAST_UPDT_DATE <> S.LAST_UPDT_DATE)
                    OR (D.LAST_UPDT_DATE IS NULL AND S.LAST_UPDT_DATE IS NOT NULL)
                    OR (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NULL)
                ) THEN
UPDATE
    SET D.TRANS_CODE           = S.TRANS_CODE,
    D.VIOL_ACT_LOC         = S.VIOL_ACT_LOC,
    D.VIOL_SEQ_NUM         = S.VIOL_SEQ_NUM,
    D.AGN_WHICH_DTRM_VIOL  = S.AGN_WHICH_DTRM_VIOL,
    D.VIOL_TYPE_OWNER      = S.VIOL_TYPE_OWNER,
    D.VIOL_TYPE            = S.VIOL_TYPE,
    D.FORMER_CITATION_NAME = S.FORMER_CITATION_NAME,
    D.VIOL_DTRM_DATE       = S.VIOL_DTRM_DATE,
    D.RTN_COMPL_ACTL_DATE  = S.RTN_COMPL_ACTL_DATE,
    D.RTN_TO_COMPL_QUAL    = S.RTN_TO_COMPL_QUAL,
    D.VIOL_RESP_AGN        = S.VIOL_RESP_AGN,
    D.NOTES                = S.NOTES,
    D.CREATED_BY_USERID   = s.CREATED_BY_USERID,
    D.C_CREATED_DATE       = S.C_CREATED_DATE,
    D.LAST_UPDT_BY         = s.LAST_UPDT_BY,
    D.LAST_UPDT_DATE       = s.LAST_UPDT_DATE
    WHEN NOT MATCHED THEN
INSERT (CME_FAC_SUBM_ID,
TRANS_CODE,
VIOL_ACT_LOC,
VIOL_SEQ_NUM,
AGN_WHICH_DTRM_VIOL,
VIOL_TYPE_OWNER,
VIOL_TYPE,
FORMER_CITATION_NAME,
VIOL_DTRM_DATE,
RTN_COMPL_ACTL_DATE,
RTN_TO_COMPL_QUAL,
VIOL_RESP_AGN,
NOTES,
CREATED_BY_USERID,
C_CREATED_DATE,
LAST_UPDT_BY,
LAST_UPDT_DATE)
VALUES (S.WH_CME_FAC_SUBM_ID,
    S.TRANS_CODE,
    S.VIOL_ACT_LOC,
    S.VIOL_SEQ_NUM,
    S.AGN_WHICH_DTRM_VIOL,
    S.VIOL_TYPE_OWNER,
    S.VIOL_TYPE,
    S.FORMER_CITATION_NAME,
    S.VIOL_DTRM_DATE,
    S.RTN_COMPL_ACTL_DATE,
    S.RTN_TO_COMPL_QUAL,
    S.VIOL_RESP_AGN,
    S.NOTES,
    s.CREATED_BY_USERID,
    s.C_CREATED_DATE,
    s.LAST_UPDT_BY,
    s.LAST_UPDT_DATE);
IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

SELECT @ErrorMessage = ERROR_MESSAGE(),
       @ErrorSeverity = ERROR_SEVERITY(),
       @ErrorState = ERROR_STATE()

           IF @localTran = 1 AND XACT_STATE() <> 0
    ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
END
GO

/*************************************************************************************************
** ObjectName: FA_MERGE_COST_EST.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_FA_COST_EST table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/21/2022   Windsor     Updated for new 5.11 columns.
**
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[FA_MERGE_COST_EST] @FA_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
BEGIN
            SET @localTran = 1
BEGIN TRANSACTION LocalTran
END

BEGIN TRY
MERGE INTO RCRA_FA_COST_EST D
        USING (SELECT *
               FROM ETL_FA_COST_EST_VW
               WHERE FA_SUBM_ID = @FA_SUBM_ID) S
        ON (D.FA_COST_EST_ID = S.WH_FA_COST_EST_ID)
        WHEN MATCHED
            AND (
                        D.TRANS_CODE <> S.TRANS_CODE
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR D.ACT_LOC_CODE <> S.ACT_LOC_CODE
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NULL)
                    OR D.COST_ESTIMATE_TYPE_CODE <> S.COST_ESTIMATE_TYPE_CODE
                    OR (D.COST_ESTIMATE_TYPE_CODE IS NULL AND S.COST_ESTIMATE_TYPE_CODE IS NOT NULL)
                    OR (D.COST_ESTIMATE_TYPE_CODE IS NOT NULL AND S.COST_ESTIMATE_TYPE_CODE IS NULL)
                    OR D.COST_ESTIMATE_AGN_CODE <> S.COST_ESTIMATE_AGN_CODE
                    OR (D.COST_ESTIMATE_AGN_CODE IS NULL AND S.COST_ESTIMATE_AGN_CODE IS NOT NULL)
                    OR (D.COST_ESTIMATE_AGN_CODE IS NOT NULL AND S.COST_ESTIMATE_AGN_CODE IS NULL)
                    OR D.COST_ESTIMATE_SEQ_NUM <> S.COST_ESTIMATE_SEQ_NUM
                    OR (D.COST_ESTIMATE_SEQ_NUM IS NULL AND S.COST_ESTIMATE_SEQ_NUM IS NOT NULL)
                    OR (D.COST_ESTIMATE_SEQ_NUM IS NOT NULL AND S.COST_ESTIMATE_SEQ_NUM IS NULL)
                    OR D.RESP_PERSON_DATA_OWNER_CODE <> S.RESP_PERSON_DATA_OWNER_CODE
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NULL)
                    OR D.RESP_PERSON_ID <> S.RESP_PERSON_ID
                    OR (D.RESP_PERSON_ID IS NULL AND S.RESP_PERSON_ID IS NOT NULL)
                    OR (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NULL)
                    OR D.COST_ESTIMATE_AMOUNT <> S.COST_ESTIMATE_AMOUNT
                    OR (D.COST_ESTIMATE_AMOUNT IS NULL AND S.COST_ESTIMATE_AMOUNT IS NOT NULL)
                    OR (D.COST_ESTIMATE_AMOUNT IS NOT NULL AND S.COST_ESTIMATE_AMOUNT IS NULL)
                    OR D.COST_ESTIMATE_DATE <> S.COST_ESTIMATE_DATE
                    OR (D.COST_ESTIMATE_DATE IS NULL AND S.COST_ESTIMATE_DATE IS NOT NULL)
                    OR (D.COST_ESTIMATE_DATE IS NOT NULL AND S.COST_ESTIMATE_DATE IS NULL)
                    OR D.COST_ESTIMATE_RSN_CODE <> S.COST_ESTIMATE_RSN_CODE
                    OR (D.COST_ESTIMATE_RSN_CODE IS NULL AND S.COST_ESTIMATE_RSN_CODE IS NOT NULL)
                    OR (D.COST_ESTIMATE_RSN_CODE IS NOT NULL AND S.COST_ESTIMATE_RSN_CODE IS NULL)
                    OR D.AREA_UNIT_NOTES_TXT <> S.AREA_UNIT_NOTES_TXT
                    OR (D.AREA_UNIT_NOTES_TXT IS NULL AND S.AREA_UNIT_NOTES_TXT IS NOT NULL)
                    OR (D.AREA_UNIT_NOTES_TXT IS NOT NULL AND S.AREA_UNIT_NOTES_TXT IS NULL)
                    OR D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR D.CREATED_BY_USERID <> s.CREATED_BY_USERID
                    OR (D.CREATED_BY_USERID IS NULL AND s.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND s.CREATED_BY_USERID IS NULL)
                    OR D.F_CREATED_DATE <> S.F_CREATED_DATE
                    OR (D.F_CREATED_DATE IS NULL AND S.F_CREATED_DATE IS NOT NULL)
                    OR (D.F_CREATED_DATE IS NOT NULL AND S.F_CREATED_DATE IS NULL)
                    OR D.DATA_ORIG <> S.DATA_ORIG
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL)
                    OR
                        (D.UPDATE_DUE_DATE IS NOT NULL AND S.UPDATE_DUE_DATE IS NOT NULL AND D.UPDATE_DUE_DATE <> S.UPDATE_DUE_DATE)
                    OR (D.UPDATE_DUE_DATE IS NULL AND S.UPDATE_DUE_DATE IS NOT NULL)
                    OR (D.UPDATE_DUE_DATE IS NOT NULL AND S.UPDATE_DUE_DATE IS NULL)
                    OR
                        (D.CURRENT_COST_ESTIMATE_IND IS NOT NULL AND S.CURRENT_COST_ESTIMATE_IND IS NOT NULL AND D.CURRENT_COST_ESTIMATE_IND <> S.CURRENT_COST_ESTIMATE_IND)
                    OR (D.CURRENT_COST_ESTIMATE_IND IS NULL AND S.CURRENT_COST_ESTIMATE_IND IS NOT NULL)
                    OR (D.CURRENT_COST_ESTIMATE_IND IS NOT NULL AND S.CURRENT_COST_ESTIMATE_IND IS NULL)
                    OR
                        (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NOT NULL AND D.LAST_UPDT_BY <> S.LAST_UPDT_BY)
                    OR (D.LAST_UPDT_BY IS NULL AND S.LAST_UPDT_BY IS NOT NULL)
                    OR (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NULL)
                    OR
                        (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NOT NULL AND D.LAST_UPDT_DATE <> S.LAST_UPDT_DATE)
                    OR (D.LAST_UPDT_DATE IS NULL AND S.LAST_UPDT_DATE IS NOT NULL)
                    OR (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NULL)

                )
            THEN
UPDATE
    SET D.TRANS_CODE                  = S.TRANS_CODE,
    D.ACT_LOC_CODE                = S.ACT_LOC_CODE,
    D.COST_ESTIMATE_TYPE_CODE     = S.COST_ESTIMATE_TYPE_CODE,
    D.COST_ESTIMATE_AGN_CODE      = S.COST_ESTIMATE_AGN_CODE,
    D.COST_ESTIMATE_SEQ_NUM       = S.COST_ESTIMATE_SEQ_NUM,
    D.RESP_PERSON_DATA_OWNER_CODE = S.RESP_PERSON_DATA_OWNER_CODE,
    D.RESP_PERSON_ID              = S.RESP_PERSON_ID,
    D.COST_ESTIMATE_AMOUNT        = S.COST_ESTIMATE_AMOUNT,
    D.COST_ESTIMATE_DATE          = S.COST_ESTIMATE_DATE,
    D.COST_ESTIMATE_RSN_CODE      = S.COST_ESTIMATE_RSN_CODE,
    D.AREA_UNIT_NOTES_TXT         = S.AREA_UNIT_NOTES_TXT,
    D.SUPP_INFO_TXT               = S.SUPP_INFO_TXT,
    D.CREATED_BY_USERID          = s.CREATED_BY_USERID,
    D.F_CREATED_DATE              = S.F_CREATED_DATE,
    D.DATA_ORIG                   = S.DATA_ORIG,
    D.UPDATE_DUE_DATE             = S.UPDATE_DUE_DATE,
    D.CURRENT_COST_ESTIMATE_IND   = S.CURRENT_COST_ESTIMATE_IND,
    D.LAST_UPDT_BY                = s.LAST_UPDT_BY,
    D.LAST_UPDT_DATE              = s.LAST_UPDT_DATE
    WHEN NOT MATCHED THEN
INSERT (FA_FAC_SUBM_ID,
TRANS_CODE,
ACT_LOC_CODE,
COST_ESTIMATE_TYPE_CODE,
COST_ESTIMATE_AGN_CODE,
COST_ESTIMATE_SEQ_NUM,
RESP_PERSON_DATA_OWNER_CODE,
RESP_PERSON_ID,
COST_ESTIMATE_AMOUNT,
COST_ESTIMATE_DATE,
COST_ESTIMATE_RSN_CODE,
AREA_UNIT_NOTES_TXT,
SUPP_INFO_TXT,
CREATED_BY_USERID,
F_CREATED_DATE,
DATA_ORIG,
UPDATE_DUE_DATE,
CURRENT_COST_ESTIMATE_IND,
LAST_UPDT_BY,
LAST_UPDT_DATE
)
VALUES (S.WH_FA_FAC_SUBM_ID,
    S.TRANS_CODE,
    S.ACT_LOC_CODE,
    S.COST_ESTIMATE_TYPE_CODE,
    S.COST_ESTIMATE_AGN_CODE,
    S.COST_ESTIMATE_SEQ_NUM,
    S.RESP_PERSON_DATA_OWNER_CODE,
    S.RESP_PERSON_ID,
    S.COST_ESTIMATE_AMOUNT,
    S.COST_ESTIMATE_DATE,
    S.COST_ESTIMATE_RSN_CODE,
    S.AREA_UNIT_NOTES_TXT,
    S.SUPP_INFO_TXT,
    s.CREATED_BY_USERID,
    S.F_CREATED_DATE,
    S.DATA_ORIG,
    S.UPDATE_DUE_DATE,
    S.CURRENT_COST_ESTIMATE_IND,
    S.LAST_UPDT_BY,
    S.LAST_UPDT_DATE);
IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

SELECT @ErrorMessage = ERROR_MESSAGE(),
       @ErrorSeverity = ERROR_SEVERITY(),
       @ErrorState = ERROR_STATE()

           IF @localTran = 1 AND XACT_STATE() <> 0
    ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
END
GO

/*************************************************************************************************
** ObjectName: FA_MERGE_MECHANISM.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_FA_MECHANISM table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/21/2022   Windsor     Updated for new 5.11 columns.
**
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[FA_MERGE_MECHANISM] @FA_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
BEGIN
            SET @localTran = 1
BEGIN TRANSACTION LocalTran
END

BEGIN TRY
MERGE INTO RCRA_FA_MECHANISM D
        USING (SELECT *
               FROM ETL_FA_MECHANISM_VW
               WHERE FA_SUBM_ID = @FA_SUBM_ID) S
        ON (D.FA_MECHANISM_ID = S.WH_FA_MECHANISM_ID)
        WHEN MATCHED
            AND (
                        D.TRANS_CODE <> S.TRANS_CODE
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR D.ACT_LOC_CODE <> S.ACT_LOC_CODE
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NULL)
                    OR D.MECHANISM_AGN_CODE <> S.MECHANISM_AGN_CODE
                    OR (D.MECHANISM_AGN_CODE IS NULL AND S.MECHANISM_AGN_CODE IS NOT NULL)
                    OR (D.MECHANISM_AGN_CODE IS NOT NULL AND S.MECHANISM_AGN_CODE IS NULL)
                    OR D.MECHANISM_SEQ_NUM <> S.MECHANISM_SEQ_NUM
                    OR (D.MECHANISM_SEQ_NUM IS NULL AND S.MECHANISM_SEQ_NUM IS NOT NULL)
                    OR (D.MECHANISM_SEQ_NUM IS NOT NULL AND S.MECHANISM_SEQ_NUM IS NULL)
                    OR D.MECHANISM_TYPE_DATA_OWNER_CODE <> S.MECHANISM_TYPE_DATA_OWNER_CODE
                    OR (D.MECHANISM_TYPE_DATA_OWNER_CODE IS NULL AND S.MECHANISM_TYPE_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.MECHANISM_TYPE_DATA_OWNER_CODE IS NOT NULL AND S.MECHANISM_TYPE_DATA_OWNER_CODE IS NULL)
                    OR D.MECHANISM_TYPE_CODE <> S.MECHANISM_TYPE_CODE
                    OR (D.MECHANISM_TYPE_CODE IS NULL AND S.MECHANISM_TYPE_CODE IS NOT NULL)
                    OR (D.MECHANISM_TYPE_CODE IS NOT NULL AND S.MECHANISM_TYPE_CODE IS NULL)
                    OR D.PROVIDER_TXT <> S.PROVIDER_TXT
                    OR (D.PROVIDER_TXT IS NULL AND S.PROVIDER_TXT IS NOT NULL)
                    OR (D.PROVIDER_TXT IS NOT NULL AND S.PROVIDER_TXT IS NULL)
                    OR D.PROVIDER_FULL_CONTACT_NAME <> S.PROVIDER_FULL_CONTACT_NAME
                    OR (D.PROVIDER_FULL_CONTACT_NAME IS NULL AND S.PROVIDER_FULL_CONTACT_NAME IS NOT NULL)
                    OR (D.PROVIDER_FULL_CONTACT_NAME IS NOT NULL AND S.PROVIDER_FULL_CONTACT_NAME IS NULL)
                    OR D.TELE_NUM_TXT <> S.TELE_NUM_TXT
                    OR (D.TELE_NUM_TXT IS NULL AND S.TELE_NUM_TXT IS NOT NULL)
                    OR (D.TELE_NUM_TXT IS NOT NULL AND S.TELE_NUM_TXT IS NULL)
                    OR D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR D.CREATED_BY_USERID <> s.CREATED_BY_USERID
                    OR (D.CREATED_BY_USERID IS NULL AND s.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND s.CREATED_BY_USERID IS NULL)
                    OR D.F_CREATED_DATE <> S.F_CREATED_DATE
                    OR (D.F_CREATED_DATE IS NULL AND S.F_CREATED_DATE IS NOT NULL)
                    OR (D.F_CREATED_DATE IS NOT NULL AND S.F_CREATED_DATE IS NULL)
                    OR D.DATA_ORIG <> S.DATA_ORIG
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL)
                    OR
                        (D.PROVIDER_CONTACT_EMAIL IS NOT NULL AND S.PROVIDER_CONTACT_EMAIL IS NOT NULL AND D.PROVIDER_CONTACT_EMAIL <> S.PROVIDER_CONTACT_EMAIL)
                    OR (D.PROVIDER_CONTACT_EMAIL IS NULL AND S.PROVIDER_CONTACT_EMAIL IS NOT NULL)
                    OR (D.PROVIDER_CONTACT_EMAIL IS NOT NULL AND S.PROVIDER_CONTACT_EMAIL IS NULL)
                    OR
                        (D.ACTIVE_MECHANISM_IND IS NOT NULL AND S.ACTIVE_MECHANISM_IND IS NOT NULL AND D.ACTIVE_MECHANISM_IND <> S.ACTIVE_MECHANISM_IND)
                    OR (D.ACTIVE_MECHANISM_IND IS NULL AND S.ACTIVE_MECHANISM_IND IS NOT NULL)
                    OR (D.ACTIVE_MECHANISM_IND IS NOT NULL AND S.ACTIVE_MECHANISM_IND IS NULL)
                    OR
                        (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NOT NULL AND D.LAST_UPDT_BY <> S.LAST_UPDT_BY)
                    OR (D.LAST_UPDT_BY IS NULL AND S.LAST_UPDT_BY IS NOT NULL)
                    OR (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NULL)
                    OR
                        (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NOT NULL AND D.LAST_UPDT_DATE <> S.LAST_UPDT_DATE)
                    OR (D.LAST_UPDT_DATE IS NULL AND S.LAST_UPDT_DATE IS NOT NULL)
                    OR (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NULL)
                )
            THEN
UPDATE
    SET D.TRANS_CODE                     = S.TRANS_CODE,
    D.ACT_LOC_CODE                   = S.ACT_LOC_CODE,
    D.MECHANISM_AGN_CODE             = S.MECHANISM_AGN_CODE,
    D.MECHANISM_SEQ_NUM              = S.MECHANISM_SEQ_NUM,
    D.MECHANISM_TYPE_DATA_OWNER_CODE = S.MECHANISM_TYPE_DATA_OWNER_CODE,
    D.MECHANISM_TYPE_CODE            = S.MECHANISM_TYPE_CODE,
    D.PROVIDER_TXT                   = S.PROVIDER_TXT,
    D.PROVIDER_FULL_CONTACT_NAME     = S.PROVIDER_FULL_CONTACT_NAME,
    D.TELE_NUM_TXT                   = S.TELE_NUM_TXT,
    D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT,
    D.CREATED_BY_USERID             = s.CREATED_BY_USERID,
    D.F_CREATED_DATE                 = S.F_CREATED_DATE,
    D.DATA_ORIG                      = S.DATA_ORIG,
    D.PROVIDER_CONTACT_EMAIL         = S.PROVIDER_CONTACT_EMAIL,
    D.ACTIVE_MECHANISM_IND           = S.ACTIVE_MECHANISM_IND,
    D.LAST_UPDT_BY                   = s.LAST_UPDT_BY,
    D.LAST_UPDT_DATE                 = s.LAST_UPDT_DATE
    WHEN NOT MATCHED THEN
INSERT (FA_FAC_SUBM_ID,
TRANS_CODE,
ACT_LOC_CODE,
MECHANISM_AGN_CODE,
MECHANISM_SEQ_NUM,
MECHANISM_TYPE_DATA_OWNER_CODE,
MECHANISM_TYPE_CODE,
PROVIDER_TXT,
PROVIDER_FULL_CONTACT_NAME,
TELE_NUM_TXT,
SUPP_INFO_TXT,
CREATED_BY_USERID,
F_CREATED_DATE,
DATA_ORIG,
PROVIDER_CONTACT_EMAIL,
ACTIVE_MECHANISM_IND,
LAST_UPDT_BY,
LAST_UPDT_DATE)
VALUES (S.WH_FA_FAC_SUBM_ID,
    S.TRANS_CODE,
    S.ACT_LOC_CODE,
    S.MECHANISM_AGN_CODE,
    S.MECHANISM_SEQ_NUM,
    S.MECHANISM_TYPE_DATA_OWNER_CODE,
    S.MECHANISM_TYPE_CODE,
    S.PROVIDER_TXT,
    S.PROVIDER_FULL_CONTACT_NAME,
    S.TELE_NUM_TXT,
    S.SUPP_INFO_TXT,
    s.CREATED_BY_USERID,
    S.F_CREATED_DATE,
    S.DATA_ORIG,
    S.PROVIDER_CONTACT_EMAIL,
    S.ACTIVE_MECHANISM_IND,
    S.LAST_UPDT_BY,
    S.LAST_UPDT_DATE);
IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

SELECT @ErrorMessage = ERROR_MESSAGE(),
       @ErrorSeverity = ERROR_SEVERITY(),
       @ErrorState = ERROR_STATE()

           IF @localTran = 1 AND XACT_STATE() <> 0
    ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
END
GO

/*************************************************************************************************
** ObjectName: FA_MERGE_MECHANISM_DETAIL.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_FA_MECHANISM_DETAIL table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/21/2022   Windsor     Updated for new 5.11 columns.
**
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[FA_MERGE_MECHANISM_DETAIL] @FA_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
BEGIN
            SET @localTran = 1
BEGIN TRANSACTION LocalTran
END

BEGIN TRY
MERGE INTO RCRA_FA_MECHANISM_DETAIL D
        USING (SELECT *
               FROM ETL_FA_MECHANISM_DETAIL_VW
               WHERE FA_SUBM_ID = @FA_SUBM_ID) S
        ON (D.FA_MECHANISM_DETAIL_ID = S.WH_FA_MECHANISM_DETAIL_ID)
        WHEN MATCHED
            AND
                (D.TRANS_CODE <> S.TRANS_CODE
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR D.MECHANISM_DETAIL_SEQ_NUM <> S.MECHANISM_DETAIL_SEQ_NUM
                    OR (D.MECHANISM_DETAIL_SEQ_NUM IS NULL AND S.MECHANISM_DETAIL_SEQ_NUM IS NOT NULL)
                    OR (D.MECHANISM_DETAIL_SEQ_NUM IS NOT NULL AND S.MECHANISM_DETAIL_SEQ_NUM IS NULL)
                    OR D.MECHANISM_IDEN_TXT <> S.MECHANISM_IDEN_TXT
                    OR (D.MECHANISM_IDEN_TXT IS NULL AND S.MECHANISM_IDEN_TXT IS NOT NULL)
                    OR (D.MECHANISM_IDEN_TXT IS NOT NULL AND S.MECHANISM_IDEN_TXT IS NULL)
                    OR D.FACE_VAL_AMOUNT <> S.FACE_VAL_AMOUNT
                    OR (D.FACE_VAL_AMOUNT IS NULL AND S.FACE_VAL_AMOUNT IS NOT NULL)
                    OR (D.FACE_VAL_AMOUNT IS NOT NULL AND S.FACE_VAL_AMOUNT IS NULL)
                    OR D.EFFC_DATE <> S.EFFC_DATE
                    OR (D.EFFC_DATE IS NULL AND S.EFFC_DATE IS NOT NULL)
                    OR (D.EFFC_DATE IS NOT NULL AND S.EFFC_DATE IS NULL)
                    OR D.EXPIRATION_DATE <> S.EXPIRATION_DATE
                    OR (D.EXPIRATION_DATE IS NULL AND S.EXPIRATION_DATE IS NOT NULL)
                    OR (D.EXPIRATION_DATE IS NOT NULL AND S.EXPIRATION_DATE IS NULL)
                    OR D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR D.CURRENT_MECHANISM_DETAIL_IND <> s.CURRENT_MECHANISM_DETAIL_IND
                    OR (D.CURRENT_MECHANISM_DETAIL_IND IS NULL AND s.CURRENT_MECHANISM_DETAIL_IND IS NOT NULL)
                    OR (D.CURRENT_MECHANISM_DETAIL_IND IS NOT NULL AND s.CURRENT_MECHANISM_DETAIL_IND IS NULL)
                    OR D.CREATED_BY_USERID <> s.CREATED_BY_USERID
                    OR (D.CREATED_BY_USERID IS NULL AND s.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND s.CREATED_BY_USERID IS NULL)
                    OR D.F_CREATED_DATE <> S.F_CREATED_DATE
                    OR (D.F_CREATED_DATE IS NULL AND S.F_CREATED_DATE IS NOT NULL)
                    OR (D.F_CREATED_DATE IS NOT NULL AND S.F_CREATED_DATE IS NULL)
                    OR D.DATA_ORIG <> S.DATA_ORIG
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL))
                    OR
                (D.FAC_FACE_VAL_AMOUNT IS NOT NULL AND S.FAC_FACE_VAL_AMOUNT IS NOT NULL AND D.FAC_FACE_VAL_AMOUNT <> S.FAC_FACE_VAL_AMOUNT)
                    OR (D.FAC_FACE_VAL_AMOUNT IS NULL AND S.FAC_FACE_VAL_AMOUNT IS NOT NULL)
                    OR (D.FAC_FACE_VAL_AMOUNT IS NOT NULL AND S.FAC_FACE_VAL_AMOUNT IS NULL)
                    OR
                (D.ALT_IND IS NOT NULL AND S.ALT_IND IS NOT NULL AND D.ALT_IND <> S.ALT_IND)
                    OR (D.ALT_IND IS NULL AND S.ALT_IND IS NOT NULL)
                    OR (D.ALT_IND IS NOT NULL AND S.ALT_IND IS NULL)
                    OR
                (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NOT NULL AND D.LAST_UPDT_BY <> S.LAST_UPDT_BY)
                    OR (D.LAST_UPDT_BY IS NULL AND S.LAST_UPDT_BY IS NOT NULL)
                    OR (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NULL)
                    OR
                (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NOT NULL AND D.LAST_UPDT_DATE <> S.LAST_UPDT_DATE)
                    OR (D.LAST_UPDT_DATE IS NULL AND S.LAST_UPDT_DATE IS NOT NULL)
                    OR (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NULL)
            THEN
UPDATE
    SET D.TRANS_CODE                   = S.TRANS_CODE,
    D.MECHANISM_DETAIL_SEQ_NUM     = S.MECHANISM_DETAIL_SEQ_NUM,
    D.MECHANISM_IDEN_TXT           = S.MECHANISM_IDEN_TXT,
    D.FACE_VAL_AMOUNT              = S.FACE_VAL_AMOUNT,
    D.EFFC_DATE                    = S.EFFC_DATE,
    D.EXPIRATION_DATE              = S.EXPIRATION_DATE,
    D.SUPP_INFO_TXT                = S.SUPP_INFO_TXT,
    D.CURRENT_MECHANISM_DETAIL_IND = s.CURRENT_MECHANISM_DETAIL_IND,
    D.CREATED_BY_USERID            = s.CREATED_BY_USERID,
    D.F_CREATED_DATE               = S.F_CREATED_DATE,
    D.DATA_ORIG                    = S.DATA_ORIG,
    D.FAC_FACE_VAL_AMOUNT          = S.FAC_FACE_VAL_AMOUNT,
    D.ALT_IND                      = S.ALT_IND,
    D.LAST_UPDT_BY                 = s.LAST_UPDT_BY,
    D.LAST_UPDT_DATE               = s.LAST_UPDT_DATE
    WHEN NOT MATCHED THEN
INSERT (FA_MECHANISM_ID,
TRANS_CODE,
MECHANISM_DETAIL_SEQ_NUM,
MECHANISM_IDEN_TXT,
FACE_VAL_AMOUNT,
EFFC_DATE,
EXPIRATION_DATE,
SUPP_INFO_TXT,
CURRENT_MECHANISM_DETAIL_IND,
CREATED_BY_USERID,
F_CREATED_DATE,
DATA_ORIG,
FAC_FACE_VAL_AMOUNT,
ALT_IND,
LAST_UPDT_BY,
LAST_UPDT_DATE)
VALUES (S.WH_FA_MECHANISM_ID,
    S.TRANS_CODE,
    S.MECHANISM_DETAIL_SEQ_NUM,
    S.MECHANISM_IDEN_TXT,
    S.FACE_VAL_AMOUNT,
    S.EFFC_DATE,
    S.EXPIRATION_DATE,
    S.SUPP_INFO_TXT,
    s.CURRENT_MECHANISM_DETAIL_IND,
    s.CREATED_BY_USERID,
    S.F_CREATED_DATE,
    S.DATA_ORIG,
    S.FAC_FACE_VAL_AMOUNT,
    S.ALT_IND,
    S.LAST_UPDT_BY,
    S.LAST_UPDT_DATE);
IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

SELECT @ErrorMessage = ERROR_MESSAGE(),
       @ErrorSeverity = ERROR_SEVERITY(),
       @ErrorState = ERROR_STATE()

           IF @localTran = 1 AND XACT_STATE() <> 0
    ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
END
GO

/*************************************************************************************************
** ObjectName: GIS_MERGE_RCRA_GIS_GEO_INFO.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_GIS_GEO_INFORMATION table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USERID to CREATED_BY_USERID.
**  02/21/2022   Windsor     Updated for new 5.11 columns.
**
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[GIS_MERGE_RCRA_GIS_GEO_INFO] @GIS_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
BEGIN
            SET @localTran = 1
BEGIN TRANSACTION LocalTran
END

BEGIN TRY
MERGE INTO RCRA_GIS_GEO_INFORMATION D
        USING (SELECT *
               FROM ETL_GIS_GEO_INFORMATION_VW
               WHERE GIS_SUBM_ID = @GIS_SUBM_ID) S
        ON (D.GIS_GEO_INFORMATION_ID = S.WH_GIS_GEO_INFORMATION_ID)
        WHEN MATCHED
            AND
                (D.TRANS_CODE <> S.TRANS_CODE
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR D.GEO_INFO_OWNER <> S.GEO_INFO_OWNER
                    OR (D.GEO_INFO_OWNER IS NULL AND S.GEO_INFO_OWNER IS NOT NULL)
                    OR (D.GEO_INFO_OWNER IS NOT NULL AND S.GEO_INFO_OWNER IS NULL)
                    OR D.GEO_INFO_SEQ_NUM <> S.GEO_INFO_SEQ_NUM
                    OR (D.GEO_INFO_SEQ_NUM IS NULL AND S.GEO_INFO_SEQ_NUM IS NOT NULL)
                    OR (D.GEO_INFO_SEQ_NUM IS NOT NULL AND S.GEO_INFO_SEQ_NUM IS NULL)
                    OR D.PERMIT_UNIT_SEQ_NUM <> S.PERMIT_UNIT_SEQ_NUM
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NULL AND S.PERMIT_UNIT_SEQ_NUM IS NOT NULL)
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NOT NULL AND S.PERMIT_UNIT_SEQ_NUM IS NULL)
                    OR D.AREA_SEQ_NUM <> S.AREA_SEQ_NUM
                    OR (D.AREA_SEQ_NUM IS NULL AND S.AREA_SEQ_NUM IS NOT NULL)
                    OR (D.AREA_SEQ_NUM IS NOT NULL AND S.AREA_SEQ_NUM IS NULL)
                    OR D.LOC_COMM_TXT <> S.LOC_COMM_TXT
                    OR (D.LOC_COMM_TXT IS NULL AND S.LOC_COMM_TXT IS NOT NULL)
                    OR (D.LOC_COMM_TXT IS NOT NULL AND S.LOC_COMM_TXT IS NULL)
                    OR D.AREA_ACREAGE_MEAS <> S.AREA_ACREAGE_MEAS
                    OR (D.AREA_ACREAGE_MEAS IS NULL AND S.AREA_ACREAGE_MEAS IS NOT NULL)
                    OR (D.AREA_ACREAGE_MEAS IS NOT NULL AND S.AREA_ACREAGE_MEAS IS NULL)
                    OR D.AREA_MEAS_SRC_DATA_OWNER_CODE <> S.AREA_MEAS_SRC_DATA_OWNER_CODE
                    OR (D.AREA_MEAS_SRC_DATA_OWNER_CODE IS NULL AND S.AREA_MEAS_SRC_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.AREA_MEAS_SRC_DATA_OWNER_CODE IS NOT NULL AND S.AREA_MEAS_SRC_DATA_OWNER_CODE IS NULL)
                    OR D.AREA_MEAS_SRC_CODE <> S.AREA_MEAS_SRC_CODE
                    OR (D.AREA_MEAS_SRC_CODE IS NULL AND S.AREA_MEAS_SRC_CODE IS NOT NULL)
                    OR (D.AREA_MEAS_SRC_CODE IS NOT NULL AND S.AREA_MEAS_SRC_CODE IS NULL)
                    OR D.AREA_MEAS_DATE <> S.AREA_MEAS_DATE
                    OR (D.AREA_MEAS_DATE IS NULL AND S.AREA_MEAS_DATE IS NOT NULL)
                    OR (D.AREA_MEAS_DATE IS NOT NULL AND S.AREA_MEAS_DATE IS NULL)
                    OR D.DATA_COLL_DATE <> S.DATA_COLL_DATE
                    OR (D.DATA_COLL_DATE IS NULL AND S.DATA_COLL_DATE IS NOT NULL)
                    OR (D.DATA_COLL_DATE IS NOT NULL AND S.DATA_COLL_DATE IS NULL)
                    OR D.HORZ_ACC_MEAS <> S.HORZ_ACC_MEAS
                    OR (D.HORZ_ACC_MEAS IS NULL AND S.HORZ_ACC_MEAS IS NOT NULL)
                    OR (D.HORZ_ACC_MEAS IS NOT NULL AND S.HORZ_ACC_MEAS IS NULL)
                    OR D.SRC_MAP_SCALE_NUM <> S.SRC_MAP_SCALE_NUM
                    OR (D.SRC_MAP_SCALE_NUM IS NULL AND S.SRC_MAP_SCALE_NUM IS NOT NULL)
                    OR (D.SRC_MAP_SCALE_NUM IS NOT NULL AND S.SRC_MAP_SCALE_NUM IS NULL)
                    OR D.COORD_DATA_SRC_DATA_OWNER_CODE <> S.COORD_DATA_SRC_DATA_OWNER_CODE
                    OR (D.COORD_DATA_SRC_DATA_OWNER_CODE IS NULL AND S.COORD_DATA_SRC_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.COORD_DATA_SRC_DATA_OWNER_CODE IS NOT NULL AND S.COORD_DATA_SRC_DATA_OWNER_CODE IS NULL)
                    OR D.COORD_DATA_SRC_CODE <> S.COORD_DATA_SRC_CODE
                    OR (D.COORD_DATA_SRC_CODE IS NULL AND S.COORD_DATA_SRC_CODE IS NOT NULL)
                    OR (D.COORD_DATA_SRC_CODE IS NOT NULL AND S.COORD_DATA_SRC_CODE IS NULL)
                    OR D.GEO_REF_PT_DATA_OWNER_CODE <> S.GEO_REF_PT_DATA_OWNER_CODE
                    OR (D.GEO_REF_PT_DATA_OWNER_CODE IS NULL AND S.GEO_REF_PT_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.GEO_REF_PT_DATA_OWNER_CODE IS NOT NULL AND S.GEO_REF_PT_DATA_OWNER_CODE IS NULL)
                    OR D.GEO_REF_PT_CODE <> S.GEO_REF_PT_CODE
                    OR (D.GEO_REF_PT_CODE IS NULL AND S.GEO_REF_PT_CODE IS NOT NULL)
                    OR (D.GEO_REF_PT_CODE IS NOT NULL AND S.GEO_REF_PT_CODE IS NULL)
                    OR D.GEOM_TYPE_DATA_OWNER_CODE <> S.GEOM_TYPE_DATA_OWNER_CODE
                    OR (D.GEOM_TYPE_DATA_OWNER_CODE IS NULL AND S.GEOM_TYPE_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.GEOM_TYPE_DATA_OWNER_CODE IS NOT NULL AND S.GEOM_TYPE_DATA_OWNER_CODE IS NULL)
                    OR D.GEOM_TYPE_CODE <> S.GEOM_TYPE_CODE
                    OR (D.GEOM_TYPE_CODE IS NULL AND S.GEOM_TYPE_CODE IS NOT NULL)
                    OR (D.GEOM_TYPE_CODE IS NOT NULL AND S.GEOM_TYPE_CODE IS NULL)
                    OR D.HORZ_COLL_METH_DATA_OWNER_CODE <> S.HORZ_COLL_METH_DATA_OWNER_CODE
                    OR (D.HORZ_COLL_METH_DATA_OWNER_CODE IS NULL AND S.HORZ_COLL_METH_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.HORZ_COLL_METH_DATA_OWNER_CODE IS NOT NULL AND S.HORZ_COLL_METH_DATA_OWNER_CODE IS NULL)
                    OR D.HORZ_COLL_METH_CODE <> S.HORZ_COLL_METH_CODE
                    OR (D.HORZ_COLL_METH_CODE IS NULL AND S.HORZ_COLL_METH_CODE IS NOT NULL)
                    OR (D.HORZ_COLL_METH_CODE IS NOT NULL AND S.HORZ_COLL_METH_CODE IS NULL)
                    OR D.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE <> S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE
                    OR (D.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE IS NULL AND S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE IS NOT NULL)
                    OR (D.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE IS NOT NULL AND S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE IS NULL)
                    OR D.HORZ_COORD_REF_SYS_DATUM_CODE <> S.HORZ_COORD_REF_SYS_DATUM_CODE
                    OR (D.HORZ_COORD_REF_SYS_DATUM_CODE IS NULL AND S.HORZ_COORD_REF_SYS_DATUM_CODE IS NOT NULL)
                    OR (D.HORZ_COORD_REF_SYS_DATUM_CODE IS NOT NULL AND S.HORZ_COORD_REF_SYS_DATUM_CODE IS NULL)
                    OR D.VERF_METH_DATA_OWNER_CODE <> S.VERF_METH_DATA_OWNER_CODE
                    OR (D.VERF_METH_DATA_OWNER_CODE IS NULL AND S.VERF_METH_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.VERF_METH_DATA_OWNER_CODE IS NOT NULL AND S.VERF_METH_DATA_OWNER_CODE IS NULL)
                    OR D.VERF_METH_CODE <> S.VERF_METH_CODE
                    OR (D.VERF_METH_CODE IS NULL AND S.VERF_METH_CODE IS NOT NULL)
                    OR (D.VERF_METH_CODE IS NOT NULL AND S.VERF_METH_CODE IS NULL)
                    OR D.LATITUDE <> S.LATITUDE
                    OR (D.LATITUDE IS NULL AND S.LATITUDE IS NOT NULL)
                    OR (D.LATITUDE IS NOT NULL AND S.LATITUDE IS NULL)
                    OR D.LONGITUDE <> S.LONGITUDE
                    OR (D.LONGITUDE IS NULL AND S.LONGITUDE IS NOT NULL)
                    OR (D.LONGITUDE IS NOT NULL AND S.LONGITUDE IS NULL)
                    OR D.ELEVATION <> S.ELEVATION
                    OR (D.ELEVATION IS NULL AND S.ELEVATION IS NOT NULL)
                    OR (D.ELEVATION IS NOT NULL AND S.ELEVATION IS NULL)
                    OR D.CREATED_BY_USERID <> S.CREATED_BY_USERID
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR D.G_CREATED_DATE <> S.G_CREATED_DATE
                    OR (D.G_CREATED_DATE IS NULL AND S.G_CREATED_DATE IS NOT NULL)
                    OR (D.G_CREATED_DATE IS NOT NULL AND S.G_CREATED_DATE IS NULL)
                    OR D.DATA_ORIG <> S.DATA_ORIG
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL))
                    OR
                (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NOT NULL AND D.LAST_UPDT_BY <> S.LAST_UPDT_BY)
                    OR (D.LAST_UPDT_BY IS NULL AND S.LAST_UPDT_BY IS NOT NULL)
                    OR (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NULL)
                    OR
                (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NOT NULL AND D.LAST_UPDT_DATE <> S.LAST_UPDT_DATE)
                    OR (D.LAST_UPDT_DATE IS NULL AND S.LAST_UPDT_DATE IS NOT NULL)
                    OR (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NULL)
            THEN
UPDATE
    SET D.TRANS_CODE                     = S.TRANS_CODE,
    D.GEO_INFO_OWNER                 = S.GEO_INFO_OWNER,
    D.GEO_INFO_SEQ_NUM               = S.GEO_INFO_SEQ_NUM,
    D.PERMIT_UNIT_SEQ_NUM            = S.PERMIT_UNIT_SEQ_NUM,
    D.AREA_SEQ_NUM                   = S.AREA_SEQ_NUM,
    D.LOC_COMM_TXT                   = S.LOC_COMM_TXT,
    D.AREA_ACREAGE_MEAS              = S.AREA_ACREAGE_MEAS,
    D.AREA_MEAS_SRC_DATA_OWNER_CODE  = S.AREA_MEAS_SRC_DATA_OWNER_CODE,
    D.AREA_MEAS_SRC_CODE             = S.AREA_MEAS_SRC_CODE,
    D.AREA_MEAS_DATE                 = S.AREA_MEAS_DATE,
    D.DATA_COLL_DATE                 = S.DATA_COLL_DATE,
    D.HORZ_ACC_MEAS                  = S.HORZ_ACC_MEAS,
    D.SRC_MAP_SCALE_NUM              = S.SRC_MAP_SCALE_NUM,
    D.COORD_DATA_SRC_DATA_OWNER_CODE = S.COORD_DATA_SRC_DATA_OWNER_CODE,
    D.COORD_DATA_SRC_CODE            = S.COORD_DATA_SRC_CODE,
    D.GEO_REF_PT_DATA_OWNER_CODE     = S.GEO_REF_PT_DATA_OWNER_CODE,
    D.GEO_REF_PT_CODE                = S.GEO_REF_PT_CODE,
    D.GEOM_TYPE_DATA_OWNER_CODE      = S.GEOM_TYPE_DATA_OWNER_CODE,
    D.GEOM_TYPE_CODE                 = S.GEOM_TYPE_CODE,
    D.HORZ_COLL_METH_DATA_OWNER_CODE = S.HORZ_COLL_METH_DATA_OWNER_CODE,
    D.HORZ_COLL_METH_CODE            = S.HORZ_COLL_METH_CODE,
    D.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE = S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE,
    D.HORZ_COORD_REF_SYS_DATUM_CODE  = S.HORZ_COORD_REF_SYS_DATUM_CODE,
    D.VERF_METH_DATA_OWNER_CODE      = S.VERF_METH_DATA_OWNER_CODE,
    D.VERF_METH_CODE                 = S.VERF_METH_CODE,
    D.LATITUDE                       = S.LATITUDE,
    D.LONGITUDE                      = S.LONGITUDE,
    D.ELEVATION                      = S.ELEVATION,
    D.CREATED_BY_USERID              = S.CREATED_BY_USERID,
    D.G_CREATED_DATE                 = S.G_CREATED_DATE,
    D.DATA_ORIG                      = S.DATA_ORIG,
    D.LAST_UPDT_BY                   = s.LAST_UPDT_BY,
    D.LAST_UPDT_DATE                 = s.LAST_UPDT_DATE
    WHEN NOT MATCHED THEN
INSERT (GIS_FAC_SUBM_ID,
TRANS_CODE,
GEO_INFO_OWNER,
GEO_INFO_SEQ_NUM,
PERMIT_UNIT_SEQ_NUM,
AREA_SEQ_NUM,
LOC_COMM_TXT,
AREA_ACREAGE_MEAS,
AREA_MEAS_SRC_DATA_OWNER_CODE,
AREA_MEAS_SRC_CODE,
AREA_MEAS_DATE,
DATA_COLL_DATE,
HORZ_ACC_MEAS,
SRC_MAP_SCALE_NUM,
COORD_DATA_SRC_DATA_OWNER_CODE,
COORD_DATA_SRC_CODE,
GEO_REF_PT_DATA_OWNER_CODE,
GEO_REF_PT_CODE,
GEOM_TYPE_DATA_OWNER_CODE,
GEOM_TYPE_CODE,
HORZ_COLL_METH_DATA_OWNER_CODE,
HORZ_COLL_METH_CODE,
HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE,
HORZ_COORD_REF_SYS_DATUM_CODE,
VERF_METH_DATA_OWNER_CODE,
VERF_METH_CODE,
LATITUDE,
LONGITUDE,
ELEVATION,
CREATED_BY_USERID,
G_CREATED_DATE,
DATA_ORIG,
LAST_UPDT_BY,
LAST_UPDT_DATE)
VALUES (S.WH_GIS_FAC_SUBM_ID,
    S.TRANS_CODE,
    S.GEO_INFO_OWNER,
    S.GEO_INFO_SEQ_NUM,
    S.PERMIT_UNIT_SEQ_NUM,
    S.AREA_SEQ_NUM,
    S.LOC_COMM_TXT,
    S.AREA_ACREAGE_MEAS,
    S.AREA_MEAS_SRC_DATA_OWNER_CODE,
    S.AREA_MEAS_SRC_CODE,
    S.AREA_MEAS_DATE,
    S.DATA_COLL_DATE,
    S.HORZ_ACC_MEAS,
    S.SRC_MAP_SCALE_NUM,
    S.COORD_DATA_SRC_DATA_OWNER_CODE,
    S.COORD_DATA_SRC_CODE,
    S.GEO_REF_PT_DATA_OWNER_CODE,
    S.GEO_REF_PT_CODE,
    S.GEOM_TYPE_DATA_OWNER_CODE,
    S.GEOM_TYPE_CODE,
    S.HORZ_COLL_METH_DATA_OWNER_CODE,
    S.HORZ_COLL_METH_CODE,
    S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE,
    S.HORZ_COORD_REF_SYS_DATUM_CODE,
    S.VERF_METH_DATA_OWNER_CODE,
    S.VERF_METH_CODE,
    S.LATITUDE,
    S.LONGITUDE,
    S.ELEVATION,
    S.CREATED_BY_USERID,
    S.G_CREATED_DATE,
    S.DATA_ORIG,
    S.LAST_UPDT_BY,
    S.LAST_UPDT_DATE);
IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

SELECT @ErrorMessage = ERROR_MESSAGE(),
       @ErrorSeverity = ERROR_SEVERITY(),
       @ErrorState = ERROR_STATE()

           IF @localTran = 1 AND XACT_STATE() <> 0
    ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
END
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_HANDLER.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_HANDLER table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USERID to CREATED_BY_USERID and CURR_REC to
**                           CURRENT_RECORD, and added columns LOCATION_LATITUDE,
**                           LOCATION_LONGITUDE, LOCATION_GIS_PRIM and LOCATION_GIS_ORIG
**  02/21/2022   Windsor     Updated for new 5.11 columns.
**
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[HD_MERGE_HANDLER] @HD_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
BEGIN
            SET @localTran = 1
BEGIN TRANSACTION LocalTran
END

BEGIN TRY
MERGE INTO RCRA_HD_HANDLER D
        USING (SELECT *
               FROM ETL_HD_HANDLER_VW
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_HANDLER_ID = S.WH_HD_HANDLER_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR (D.ACTIVITY_LOCATION IS NOT NULL AND S.ACTIVITY_LOCATION IS NOT NULL AND
                        D.ACTIVITY_LOCATION <> S.ACTIVITY_LOCATION)
                    OR (D.ACTIVITY_LOCATION IS NULL AND S.ACTIVITY_LOCATION IS NOT NULL)
                    OR (D.ACTIVITY_LOCATION IS NOT NULL AND S.ACTIVITY_LOCATION IS NULL)
                    OR (D.SOURCE_TYPE IS NOT NULL AND S.SOURCE_TYPE IS NOT NULL AND D.SOURCE_TYPE <> S.SOURCE_TYPE)
                    OR (D.SOURCE_TYPE IS NULL AND S.SOURCE_TYPE IS NOT NULL)
                    OR (D.SOURCE_TYPE IS NOT NULL AND S.SOURCE_TYPE IS NULL)
                    OR (D.RECEIVE_DATE IS NOT NULL AND S.RECEIVE_DATE IS NOT NULL AND D.RECEIVE_DATE <> S.RECEIVE_DATE)
                    OR (D.RECEIVE_DATE IS NULL AND S.RECEIVE_DATE IS NOT NULL)
                    OR (D.RECEIVE_DATE IS NOT NULL AND S.RECEIVE_DATE IS NULL)
                    OR (D.HANDLER_NAME IS NOT NULL AND S.HANDLER_NAME IS NOT NULL AND D.HANDLER_NAME <> S.HANDLER_NAME)
                    OR (D.HANDLER_NAME IS NULL AND S.HANDLER_NAME IS NOT NULL)
                    OR (D.HANDLER_NAME IS NOT NULL AND S.HANDLER_NAME IS NULL)
                    OR
                    (D.ACKNOWLEDGE_DATE IS NOT NULL AND S.ACKNOWLEDGE_DATE IS NOT NULL AND
                     D.ACKNOWLEDGE_DATE <> S.ACKNOWLEDGE_DATE)
                    OR (D.ACKNOWLEDGE_DATE IS NULL AND S.ACKNOWLEDGE_DATE IS NOT NULL)
                    OR (D.ACKNOWLEDGE_DATE IS NOT NULL AND S.ACKNOWLEDGE_DATE IS NULL)
                    OR (D.NON_NOTIFIER IS NOT NULL AND S.NON_NOTIFIER IS NOT NULL AND D.NON_NOTIFIER <> S.NON_NOTIFIER)
                    OR (D.NON_NOTIFIER IS NULL AND S.NON_NOTIFIER IS NOT NULL)
                    OR (D.NON_NOTIFIER IS NOT NULL AND S.NON_NOTIFIER IS NULL)
                    OR
                    (D.OFF_SITE_RECEIPT IS NOT NULL AND S.OFF_SITE_RECEIPT IS NOT NULL AND
                     D.OFF_SITE_RECEIPT <> S.OFF_SITE_RECEIPT)
                    OR (D.OFF_SITE_RECEIPT IS NULL AND S.OFF_SITE_RECEIPT IS NOT NULL)
                    OR (D.OFF_SITE_RECEIPT IS NOT NULL AND S.OFF_SITE_RECEIPT IS NULL)
                    OR
                    (D.ACCESSIBILITY IS NOT NULL AND S.ACCESSIBILITY IS NOT NULL AND D.ACCESSIBILITY <> S.ACCESSIBILITY)
                    OR (D.ACCESSIBILITY IS NULL AND S.ACCESSIBILITY IS NOT NULL)
                    OR (D.ACCESSIBILITY IS NOT NULL AND S.ACCESSIBILITY IS NULL)
                    OR (D.COUNTY_CODE_OWNER IS NOT NULL AND S.COUNTY_CODE_OWNER IS NOT NULL AND
                        D.COUNTY_CODE_OWNER <> S.COUNTY_CODE_OWNER)
                    OR (D.COUNTY_CODE_OWNER IS NULL AND S.COUNTY_CODE_OWNER IS NOT NULL)
                    OR (D.COUNTY_CODE_OWNER IS NOT NULL AND S.COUNTY_CODE_OWNER IS NULL)
                    OR (D.COUNTY_CODE IS NOT NULL AND S.COUNTY_CODE IS NOT NULL AND D.COUNTY_CODE <> S.COUNTY_CODE)
                    OR (D.COUNTY_CODE IS NULL AND S.COUNTY_CODE IS NOT NULL)
                    OR (D.COUNTY_CODE IS NOT NULL AND S.COUNTY_CODE IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                    OR
                    (D.ACKNOWLEDGE_FLAG IS NOT NULL AND S.ACKNOWLEDGE_FLAG IS NOT NULL AND
                     D.ACKNOWLEDGE_FLAG <> S.ACKNOWLEDGE_FLAG)
                    OR (D.ACKNOWLEDGE_FLAG IS NULL AND S.ACKNOWLEDGE_FLAG IS NOT NULL)
                    OR (D.ACKNOWLEDGE_FLAG IS NOT NULL AND S.ACKNOWLEDGE_FLAG IS NULL)
                    OR
                    (D.LOCATION_STREET1 IS NOT NULL AND S.LOCATION_STREET1 IS NOT NULL AND
                     D.LOCATION_STREET1 <> S.LOCATION_STREET1)
                    OR (D.LOCATION_STREET1 IS NULL AND S.LOCATION_STREET1 IS NOT NULL)
                    OR (D.LOCATION_STREET1 IS NOT NULL AND S.LOCATION_STREET1 IS NULL)
                    OR
                    (D.LOCATION_STREET2 IS NOT NULL AND S.LOCATION_STREET2 IS NOT NULL AND
                     D.LOCATION_STREET2 <> S.LOCATION_STREET2)
                    OR (D.LOCATION_STREET2 IS NULL AND S.LOCATION_STREET2 IS NOT NULL)
                    OR (D.LOCATION_STREET2 IS NOT NULL AND S.LOCATION_STREET2 IS NULL)
                    OR
                    (D.LOCATION_CITY IS NOT NULL AND S.LOCATION_CITY IS NOT NULL AND D.LOCATION_CITY <> S.LOCATION_CITY)
                    OR (D.LOCATION_CITY IS NULL AND S.LOCATION_CITY IS NOT NULL)
                    OR (D.LOCATION_CITY IS NOT NULL AND S.LOCATION_CITY IS NULL)
                    OR
                    (D.LOCATION_STATE IS NOT NULL AND S.LOCATION_STATE IS NOT NULL AND
                     D.LOCATION_STATE <> S.LOCATION_STATE)
                    OR (D.LOCATION_STATE IS NULL AND S.LOCATION_STATE IS NOT NULL)
                    OR (D.LOCATION_STATE IS NOT NULL AND S.LOCATION_STATE IS NULL)
                    OR
                    (D.LOCATION_COUNTRY IS NOT NULL AND S.LOCATION_COUNTRY IS NOT NULL AND
                     D.LOCATION_COUNTRY <> S.LOCATION_COUNTRY)
                    OR (D.LOCATION_COUNTRY IS NULL AND S.LOCATION_COUNTRY IS NOT NULL)
                    OR (D.LOCATION_COUNTRY IS NOT NULL AND S.LOCATION_COUNTRY IS NULL)
                    OR (D.LOCATION_ZIP IS NOT NULL AND S.LOCATION_ZIP IS NOT NULL AND D.LOCATION_ZIP <> S.LOCATION_ZIP)
                    OR (D.LOCATION_ZIP IS NULL AND S.LOCATION_ZIP IS NOT NULL)
                    OR (D.LOCATION_ZIP IS NOT NULL AND S.LOCATION_ZIP IS NULL)
                    OR (D.MAIL_STREET1 IS NOT NULL AND S.MAIL_STREET1 IS NOT NULL AND D.MAIL_STREET1 <> S.MAIL_STREET1)
                    OR (D.MAIL_STREET1 IS NULL AND S.MAIL_STREET1 IS NOT NULL)
                    OR (D.MAIL_STREET1 IS NOT NULL AND S.MAIL_STREET1 IS NULL)
                    OR (D.MAIL_STREET2 IS NOT NULL AND S.MAIL_STREET2 IS NOT NULL AND D.MAIL_STREET2 <> S.MAIL_STREET2)
                    OR (D.MAIL_STREET2 IS NULL AND S.MAIL_STREET2 IS NOT NULL)
                    OR (D.MAIL_STREET2 IS NOT NULL AND S.MAIL_STREET2 IS NULL)
                    OR (D.MAIL_CITY IS NOT NULL AND S.MAIL_CITY IS NOT NULL AND D.MAIL_CITY <> S.MAIL_CITY)
                    OR (D.MAIL_CITY IS NULL AND S.MAIL_CITY IS NOT NULL)
                    OR (D.MAIL_CITY IS NOT NULL AND S.MAIL_CITY IS NULL)
                    OR (D.MAIL_STATE IS NOT NULL AND S.MAIL_STATE IS NOT NULL AND D.MAIL_STATE <> S.MAIL_STATE)
                    OR (D.MAIL_STATE IS NULL AND S.MAIL_STATE IS NOT NULL)
                    OR (D.MAIL_STATE IS NOT NULL AND S.MAIL_STATE IS NULL)
                    OR (D.MAIL_COUNTRY IS NOT NULL AND S.MAIL_COUNTRY IS NOT NULL AND D.MAIL_COUNTRY <> S.MAIL_COUNTRY)
                    OR (D.MAIL_COUNTRY IS NULL AND S.MAIL_COUNTRY IS NOT NULL)
                    OR (D.MAIL_COUNTRY IS NOT NULL AND S.MAIL_COUNTRY IS NULL)
                    OR (D.MAIL_ZIP IS NOT NULL AND S.MAIL_ZIP IS NOT NULL AND D.MAIL_ZIP <> S.MAIL_ZIP)
                    OR (D.MAIL_ZIP IS NULL AND S.MAIL_ZIP IS NOT NULL)
                    OR (D.MAIL_ZIP IS NOT NULL AND S.MAIL_ZIP IS NULL)
                    OR (D.CONTACT_FIRST_NAME IS NOT NULL AND S.CONTACT_FIRST_NAME IS NOT NULL AND
                        D.CONTACT_FIRST_NAME <> S.CONTACT_FIRST_NAME)
                    OR (D.CONTACT_FIRST_NAME IS NULL AND S.CONTACT_FIRST_NAME IS NOT NULL)
                    OR (D.CONTACT_FIRST_NAME IS NOT NULL AND S.CONTACT_FIRST_NAME IS NULL)
                    OR (D.CONTACT_MIDDLE_INITIAL IS NOT NULL AND S.CONTACT_MIDDLE_INITIAL IS NOT NULL AND
                        D.CONTACT_MIDDLE_INITIAL <> S.CONTACT_MIDDLE_INITIAL)
                    OR (D.CONTACT_MIDDLE_INITIAL IS NULL AND S.CONTACT_MIDDLE_INITIAL IS NOT NULL)
                    OR (D.CONTACT_MIDDLE_INITIAL IS NOT NULL AND S.CONTACT_MIDDLE_INITIAL IS NULL)
                    OR (D.CONTACT_LAST_NAME IS NOT NULL AND S.CONTACT_LAST_NAME IS NOT NULL AND
                        D.CONTACT_LAST_NAME <> S.CONTACT_LAST_NAME)
                    OR (D.CONTACT_LAST_NAME IS NULL AND S.CONTACT_LAST_NAME IS NOT NULL)
                    OR (D.CONTACT_LAST_NAME IS NOT NULL AND S.CONTACT_LAST_NAME IS NULL)
                    OR
                    (D.CONTACT_ORG_NAME IS NOT NULL AND S.CONTACT_ORG_NAME IS NOT NULL AND
                     D.CONTACT_ORG_NAME <> S.CONTACT_ORG_NAME)
                    OR (D.CONTACT_ORG_NAME IS NULL AND S.CONTACT_ORG_NAME IS NOT NULL)
                    OR (D.CONTACT_ORG_NAME IS NOT NULL AND S.CONTACT_ORG_NAME IS NULL)
                    OR
                    (D.CONTACT_TITLE IS NOT NULL AND S.CONTACT_TITLE IS NOT NULL AND D.CONTACT_TITLE <> S.CONTACT_TITLE)
                    OR (D.CONTACT_TITLE IS NULL AND S.CONTACT_TITLE IS NOT NULL)
                    OR (D.CONTACT_TITLE IS NOT NULL AND S.CONTACT_TITLE IS NULL)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NOT NULL AND S.CONTACT_EMAIL_ADDRESS IS NOT NULL AND
                        D.CONTACT_EMAIL_ADDRESS <> S.CONTACT_EMAIL_ADDRESS)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NULL AND S.CONTACT_EMAIL_ADDRESS IS NOT NULL)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NOT NULL AND S.CONTACT_EMAIL_ADDRESS IS NULL)
                    OR
                    (D.CONTACT_PHONE IS NOT NULL AND S.CONTACT_PHONE IS NOT NULL AND D.CONTACT_PHONE <> S.CONTACT_PHONE)
                    OR (D.CONTACT_PHONE IS NULL AND S.CONTACT_PHONE IS NOT NULL)
                    OR (D.CONTACT_PHONE IS NOT NULL AND S.CONTACT_PHONE IS NULL)
                    OR (D.CONTACT_PHONE_EXT IS NOT NULL AND S.CONTACT_PHONE_EXT IS NOT NULL AND
                        D.CONTACT_PHONE_EXT <> S.CONTACT_PHONE_EXT)
                    OR (D.CONTACT_PHONE_EXT IS NULL AND S.CONTACT_PHONE_EXT IS NOT NULL)
                    OR (D.CONTACT_PHONE_EXT IS NOT NULL AND S.CONTACT_PHONE_EXT IS NULL)
                    OR (D.CONTACT_FAX IS NOT NULL AND S.CONTACT_FAX IS NOT NULL AND D.CONTACT_FAX <> S.CONTACT_FAX)
                    OR (D.CONTACT_FAX IS NULL AND S.CONTACT_FAX IS NOT NULL)
                    OR (D.CONTACT_FAX IS NOT NULL AND S.CONTACT_FAX IS NULL)
                    OR (D.CONTACT_STREET1 IS NOT NULL AND S.CONTACT_STREET1 IS NOT NULL AND
                        D.CONTACT_STREET1 <> S.CONTACT_STREET1)
                    OR (D.CONTACT_STREET1 IS NULL AND S.CONTACT_STREET1 IS NOT NULL)
                    OR (D.CONTACT_STREET1 IS NOT NULL AND S.CONTACT_STREET1 IS NULL)
                    OR (D.CONTACT_STREET2 IS NOT NULL AND S.CONTACT_STREET2 IS NOT NULL AND
                        D.CONTACT_STREET2 <> S.CONTACT_STREET2)
                    OR (D.CONTACT_STREET2 IS NULL AND S.CONTACT_STREET2 IS NOT NULL)
                    OR (D.CONTACT_STREET2 IS NOT NULL AND S.CONTACT_STREET2 IS NULL)
                    OR (D.CONTACT_CITY IS NOT NULL AND S.CONTACT_CITY IS NOT NULL AND D.CONTACT_CITY <> S.CONTACT_CITY)
                    OR (D.CONTACT_CITY IS NULL AND S.CONTACT_CITY IS NOT NULL)
                    OR (D.CONTACT_CITY IS NOT NULL AND S.CONTACT_CITY IS NULL)
                    OR
                    (D.CONTACT_STATE IS NOT NULL AND S.CONTACT_STATE IS NOT NULL AND D.CONTACT_STATE <> S.CONTACT_STATE)
                    OR (D.CONTACT_STATE IS NULL AND S.CONTACT_STATE IS NOT NULL)
                    OR (D.CONTACT_STATE IS NOT NULL AND S.CONTACT_STATE IS NULL)
                    OR (D.CONTACT_COUNTRY IS NOT NULL AND S.CONTACT_COUNTRY IS NOT NULL AND
                        D.CONTACT_COUNTRY <> S.CONTACT_COUNTRY)
                    OR (D.CONTACT_COUNTRY IS NULL AND S.CONTACT_COUNTRY IS NOT NULL)
                    OR (D.CONTACT_COUNTRY IS NOT NULL AND S.CONTACT_COUNTRY IS NULL)
                    OR (D.CONTACT_ZIP IS NOT NULL AND S.CONTACT_ZIP IS NOT NULL AND D.CONTACT_ZIP <> S.CONTACT_ZIP)
                    OR (D.CONTACT_ZIP IS NULL AND S.CONTACT_ZIP IS NOT NULL)
                    OR (D.CONTACT_ZIP IS NOT NULL AND S.CONTACT_ZIP IS NULL)
                    OR (D.PCONTACT_FIRST_NAME IS NOT NULL AND S.PCONTACT_FIRST_NAME IS NOT NULL AND
                        D.PCONTACT_FIRST_NAME <> S.PCONTACT_FIRST_NAME)
                    OR (D.PCONTACT_FIRST_NAME IS NULL AND S.PCONTACT_FIRST_NAME IS NOT NULL)
                    OR (D.PCONTACT_FIRST_NAME IS NOT NULL AND S.PCONTACT_FIRST_NAME IS NULL)
                    OR (D.PCONTACT_MIDDLE_NAME IS NOT NULL AND S.PCONTACT_MIDDLE_NAME IS NOT NULL AND
                        D.PCONTACT_MIDDLE_NAME <> S.PCONTACT_MIDDLE_NAME)
                    OR (D.PCONTACT_MIDDLE_NAME IS NULL AND S.PCONTACT_MIDDLE_NAME IS NOT NULL)
                    OR (D.PCONTACT_MIDDLE_NAME IS NOT NULL AND S.PCONTACT_MIDDLE_NAME IS NULL)
                    OR (D.PCONTACT_LAST_NAME IS NOT NULL AND S.PCONTACT_LAST_NAME IS NOT NULL AND
                        D.PCONTACT_LAST_NAME <> S.PCONTACT_LAST_NAME)
                    OR (D.PCONTACT_LAST_NAME IS NULL AND S.PCONTACT_LAST_NAME IS NOT NULL)
                    OR (D.PCONTACT_LAST_NAME IS NOT NULL AND S.PCONTACT_LAST_NAME IS NULL)
                    OR (D.PCONTACT_ORG_NAME IS NOT NULL AND S.PCONTACT_ORG_NAME IS NOT NULL AND
                        D.PCONTACT_ORG_NAME <> S.PCONTACT_ORG_NAME)
                    OR (D.PCONTACT_ORG_NAME IS NULL AND S.PCONTACT_ORG_NAME IS NOT NULL)
                    OR (D.PCONTACT_ORG_NAME IS NOT NULL AND S.PCONTACT_ORG_NAME IS NULL)
                    OR
                    (D.PCONTACT_TITLE IS NOT NULL AND S.PCONTACT_TITLE IS NOT NULL AND
                     D.PCONTACT_TITLE <> S.PCONTACT_TITLE)
                    OR (D.PCONTACT_TITLE IS NULL AND S.PCONTACT_TITLE IS NOT NULL)
                    OR (D.PCONTACT_TITLE IS NOT NULL AND S.PCONTACT_TITLE IS NULL)
                    OR (D.PCONTACT_EMAIL_ADDRESS IS NOT NULL AND S.PCONTACT_EMAIL_ADDRESS IS NOT NULL AND
                        D.PCONTACT_EMAIL_ADDRESS <> S.PCONTACT_EMAIL_ADDRESS)
                    OR (D.PCONTACT_EMAIL_ADDRESS IS NULL AND S.PCONTACT_EMAIL_ADDRESS IS NOT NULL)
                    OR (D.PCONTACT_EMAIL_ADDRESS IS NOT NULL AND S.PCONTACT_EMAIL_ADDRESS IS NULL)
                    OR
                    (D.PCONTACT_PHONE IS NOT NULL AND S.PCONTACT_PHONE IS NOT NULL AND
                     D.PCONTACT_PHONE <> S.PCONTACT_PHONE)
                    OR (D.PCONTACT_PHONE IS NULL AND S.PCONTACT_PHONE IS NOT NULL)
                    OR (D.PCONTACT_PHONE IS NOT NULL AND S.PCONTACT_PHONE IS NULL)
                    OR (D.PCONTACT_PHONE_EXT IS NOT NULL AND S.PCONTACT_PHONE_EXT IS NOT NULL AND
                        D.PCONTACT_PHONE_EXT <> S.PCONTACT_PHONE_EXT)
                    OR (D.PCONTACT_PHONE_EXT IS NULL AND S.PCONTACT_PHONE_EXT IS NOT NULL)
                    OR (D.PCONTACT_PHONE_EXT IS NOT NULL AND S.PCONTACT_PHONE_EXT IS NULL)
                    OR (D.PCONTACT_FAX IS NOT NULL AND S.PCONTACT_FAX IS NOT NULL AND D.PCONTACT_FAX <> S.PCONTACT_FAX)
                    OR (D.PCONTACT_FAX IS NULL AND S.PCONTACT_FAX IS NOT NULL)
                    OR (D.PCONTACT_FAX IS NOT NULL AND S.PCONTACT_FAX IS NULL)
                    OR
                    (D.PCONTACT_STREET1 IS NOT NULL AND S.PCONTACT_STREET1 IS NOT NULL AND
                     D.PCONTACT_STREET1 <> S.PCONTACT_STREET1)
                    OR (D.PCONTACT_STREET1 IS NULL AND S.PCONTACT_STREET1 IS NOT NULL)
                    OR (D.PCONTACT_STREET1 IS NOT NULL AND S.PCONTACT_STREET1 IS NULL)
                    OR
                    (D.PCONTACT_STREET2 IS NOT NULL AND S.PCONTACT_STREET2 IS NOT NULL AND
                     D.PCONTACT_STREET2 <> S.PCONTACT_STREET2)
                    OR (D.PCONTACT_STREET2 IS NULL AND S.PCONTACT_STREET2 IS NOT NULL)
                    OR (D.PCONTACT_STREET2 IS NOT NULL AND S.PCONTACT_STREET2 IS NULL)
                    OR
                    (D.PCONTACT_CITY IS NOT NULL AND S.PCONTACT_CITY IS NOT NULL AND D.PCONTACT_CITY <> S.PCONTACT_CITY)
                    OR (D.PCONTACT_CITY IS NULL AND S.PCONTACT_CITY IS NOT NULL)
                    OR (D.PCONTACT_CITY IS NOT NULL AND S.PCONTACT_CITY IS NULL)
                    OR
                    (D.PCONTACT_STATE IS NOT NULL AND S.PCONTACT_STATE IS NOT NULL AND
                     D.PCONTACT_STATE <> S.PCONTACT_STATE)
                    OR (D.PCONTACT_STATE IS NULL AND S.PCONTACT_STATE IS NOT NULL)
                    OR (D.PCONTACT_STATE IS NOT NULL AND S.PCONTACT_STATE IS NULL)
                    OR
                    (D.PCONTACT_COUNTRY IS NOT NULL AND S.PCONTACT_COUNTRY IS NOT NULL AND
                     D.PCONTACT_COUNTRY <> S.PCONTACT_COUNTRY)
                    OR (D.PCONTACT_COUNTRY IS NULL AND S.PCONTACT_COUNTRY IS NOT NULL)
                    OR (D.PCONTACT_COUNTRY IS NOT NULL AND S.PCONTACT_COUNTRY IS NULL)
                    OR (D.PCONTACT_ZIP IS NOT NULL AND S.PCONTACT_ZIP IS NOT NULL AND D.PCONTACT_ZIP <> S.PCONTACT_ZIP)
                    OR (D.PCONTACT_ZIP IS NULL AND S.PCONTACT_ZIP IS NOT NULL)
                    OR (D.PCONTACT_ZIP IS NOT NULL AND S.PCONTACT_ZIP IS NULL)
                    OR (D.USED_OIL_BURNER IS NOT NULL AND S.USED_OIL_BURNER IS NOT NULL AND
                        D.USED_OIL_BURNER <> S.USED_OIL_BURNER)
                    OR (D.USED_OIL_BURNER IS NULL AND S.USED_OIL_BURNER IS NOT NULL)
                    OR (D.USED_OIL_BURNER IS NOT NULL AND S.USED_OIL_BURNER IS NULL)
                    OR (D.USED_OIL_PROCESSOR IS NOT NULL AND S.USED_OIL_PROCESSOR IS NOT NULL AND
                        D.USED_OIL_PROCESSOR <> S.USED_OIL_PROCESSOR)
                    OR (D.USED_OIL_PROCESSOR IS NULL AND S.USED_OIL_PROCESSOR IS NOT NULL)
                    OR (D.USED_OIL_PROCESSOR IS NOT NULL AND S.USED_OIL_PROCESSOR IS NULL)
                    OR
                    (D.USED_OIL_REFINER IS NOT NULL AND S.USED_OIL_REFINER IS NOT NULL AND
                     D.USED_OIL_REFINER <> S.USED_OIL_REFINER)
                    OR (D.USED_OIL_REFINER IS NULL AND S.USED_OIL_REFINER IS NOT NULL)
                    OR (D.USED_OIL_REFINER IS NOT NULL AND S.USED_OIL_REFINER IS NULL)
                    OR (D.USED_OIL_MARKET_BURNER IS NOT NULL AND S.USED_OIL_MARKET_BURNER IS NOT NULL AND
                        D.USED_OIL_MARKET_BURNER <> S.USED_OIL_MARKET_BURNER)
                    OR (D.USED_OIL_MARKET_BURNER IS NULL AND S.USED_OIL_MARKET_BURNER IS NOT NULL)
                    OR (D.USED_OIL_MARKET_BURNER IS NOT NULL AND S.USED_OIL_MARKET_BURNER IS NULL)
                    OR (D.USED_OIL_SPEC_MARKETER IS NOT NULL AND S.USED_OIL_SPEC_MARKETER IS NOT NULL AND
                        D.USED_OIL_SPEC_MARKETER <> S.USED_OIL_SPEC_MARKETER)
                    OR (D.USED_OIL_SPEC_MARKETER IS NULL AND S.USED_OIL_SPEC_MARKETER IS NOT NULL)
                    OR (D.USED_OIL_SPEC_MARKETER IS NOT NULL AND S.USED_OIL_SPEC_MARKETER IS NULL)
                    OR (D.USED_OIL_TRANSFER_FACILITY IS NOT NULL AND S.USED_OIL_TRANSFER_FACILITY IS NOT NULL AND
                        D.USED_OIL_TRANSFER_FACILITY <> S.USED_OIL_TRANSFER_FACILITY)
                    OR (D.USED_OIL_TRANSFER_FACILITY IS NULL AND S.USED_OIL_TRANSFER_FACILITY IS NOT NULL)
                    OR (D.USED_OIL_TRANSFER_FACILITY IS NOT NULL AND S.USED_OIL_TRANSFER_FACILITY IS NULL)
                    OR (D.USED_OIL_TRANSPORTER IS NOT NULL AND S.USED_OIL_TRANSPORTER IS NOT NULL AND
                        D.USED_OIL_TRANSPORTER <> S.USED_OIL_TRANSPORTER)
                    OR (D.USED_OIL_TRANSPORTER IS NULL AND S.USED_OIL_TRANSPORTER IS NOT NULL)
                    OR (D.USED_OIL_TRANSPORTER IS NOT NULL AND S.USED_OIL_TRANSPORTER IS NULL)
                    OR (D.LAND_TYPE IS NOT NULL AND S.LAND_TYPE IS NOT NULL AND D.LAND_TYPE <> S.LAND_TYPE)
                    OR (D.LAND_TYPE IS NULL AND S.LAND_TYPE IS NOT NULL)
                    OR (D.LAND_TYPE IS NOT NULL AND S.LAND_TYPE IS NULL)
                    OR (D.STATE_DISTRICT_OWNER IS NOT NULL AND S.STATE_DISTRICT_OWNER IS NOT NULL AND
                        D.STATE_DISTRICT_OWNER <> S.STATE_DISTRICT_OWNER)
                    OR (D.STATE_DISTRICT_OWNER IS NULL AND S.STATE_DISTRICT_OWNER IS NOT NULL)
                    OR (D.STATE_DISTRICT_OWNER IS NOT NULL AND S.STATE_DISTRICT_OWNER IS NULL)
                    OR
                    (D.STATE_DISTRICT IS NOT NULL AND S.STATE_DISTRICT IS NOT NULL AND
                     D.STATE_DISTRICT <> S.STATE_DISTRICT)
                    OR (D.STATE_DISTRICT IS NULL AND S.STATE_DISTRICT IS NOT NULL)
                    OR (D.STATE_DISTRICT IS NOT NULL AND S.STATE_DISTRICT IS NULL)
                    OR (D.IMPORTER_ACTIVITY IS NOT NULL AND S.IMPORTER_ACTIVITY IS NOT NULL AND
                        D.IMPORTER_ACTIVITY <> S.IMPORTER_ACTIVITY)
                    OR (D.IMPORTER_ACTIVITY IS NULL AND S.IMPORTER_ACTIVITY IS NOT NULL)
                    OR (D.IMPORTER_ACTIVITY IS NOT NULL AND S.IMPORTER_ACTIVITY IS NULL)
                    OR (D.MIXED_WASTE_GENERATOR IS NOT NULL AND S.MIXED_WASTE_GENERATOR IS NOT NULL AND
                        D.MIXED_WASTE_GENERATOR <> S.MIXED_WASTE_GENERATOR)
                    OR (D.MIXED_WASTE_GENERATOR IS NULL AND S.MIXED_WASTE_GENERATOR IS NOT NULL)
                    OR (D.MIXED_WASTE_GENERATOR IS NOT NULL AND S.MIXED_WASTE_GENERATOR IS NULL)
                    OR (D.RECYCLER_ACTIVITY IS NOT NULL AND S.RECYCLER_ACTIVITY IS NOT NULL AND
                        D.RECYCLER_ACTIVITY <> S.RECYCLER_ACTIVITY)
                    OR (D.RECYCLER_ACTIVITY IS NULL AND S.RECYCLER_ACTIVITY IS NOT NULL)
                    OR (D.RECYCLER_ACTIVITY IS NOT NULL AND S.RECYCLER_ACTIVITY IS NULL)
                    OR (D.TRANSPORTER_ACTIVITY IS NOT NULL AND S.TRANSPORTER_ACTIVITY IS NOT NULL AND
                        D.TRANSPORTER_ACTIVITY <> S.TRANSPORTER_ACTIVITY)
                    OR (D.TRANSPORTER_ACTIVITY IS NULL AND S.TRANSPORTER_ACTIVITY IS NOT NULL)
                    OR (D.TRANSPORTER_ACTIVITY IS NOT NULL AND S.TRANSPORTER_ACTIVITY IS NULL)
                    OR (D.TSD_ACTIVITY IS NOT NULL AND S.TSD_ACTIVITY IS NOT NULL AND D.TSD_ACTIVITY <> S.TSD_ACTIVITY)
                    OR (D.TSD_ACTIVITY IS NULL AND S.TSD_ACTIVITY IS NOT NULL)
                    OR (D.TSD_ACTIVITY IS NOT NULL AND S.TSD_ACTIVITY IS NULL)
                    OR
                    (D.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL AND S.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL AND
                     D.UNDERGROUND_INJECTION_ACTIVITY <> S.UNDERGROUND_INJECTION_ACTIVITY)
                    OR (D.UNDERGROUND_INJECTION_ACTIVITY IS NULL AND S.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL)
                    OR (D.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL AND S.UNDERGROUND_INJECTION_ACTIVITY IS NULL)
                    OR (D.ONSITE_BURNER_EXEMPTION IS NOT NULL AND S.ONSITE_BURNER_EXEMPTION IS NOT NULL AND
                        D.ONSITE_BURNER_EXEMPTION <> S.ONSITE_BURNER_EXEMPTION)
                    OR (D.ONSITE_BURNER_EXEMPTION IS NULL AND S.ONSITE_BURNER_EXEMPTION IS NOT NULL)
                    OR (D.ONSITE_BURNER_EXEMPTION IS NOT NULL AND S.ONSITE_BURNER_EXEMPTION IS NULL)
                    OR (D.FURNACE_EXEMPTION IS NOT NULL AND S.FURNACE_EXEMPTION IS NOT NULL AND
                        D.FURNACE_EXEMPTION <> S.FURNACE_EXEMPTION)
                    OR (D.FURNACE_EXEMPTION IS NULL AND S.FURNACE_EXEMPTION IS NOT NULL)
                    OR (D.FURNACE_EXEMPTION IS NOT NULL AND S.FURNACE_EXEMPTION IS NULL)
                    OR (D.SHORT_TERM_GEN_IND IS NOT NULL AND S.SHORT_TERM_GEN_IND IS NOT NULL AND
                        D.SHORT_TERM_GEN_IND <> S.SHORT_TERM_GEN_IND)
                    OR (D.SHORT_TERM_GEN_IND IS NULL AND S.SHORT_TERM_GEN_IND IS NOT NULL)
                    OR (D.SHORT_TERM_GEN_IND IS NOT NULL AND S.SHORT_TERM_GEN_IND IS NULL)
                    OR (D.TRANSFER_FACILITY_IND IS NOT NULL AND S.TRANSFER_FACILITY_IND IS NOT NULL AND
                        D.TRANSFER_FACILITY_IND <> S.TRANSFER_FACILITY_IND)
                    OR (D.TRANSFER_FACILITY_IND IS NULL AND S.TRANSFER_FACILITY_IND IS NOT NULL)
                    OR (D.TRANSFER_FACILITY_IND IS NOT NULL AND S.TRANSFER_FACILITY_IND IS NULL)
                    OR (D.COLLEGE_IND IS NOT NULL AND S.COLLEGE_IND IS NOT NULL AND D.COLLEGE_IND <> S.COLLEGE_IND)
                    OR (D.COLLEGE_IND IS NULL AND S.COLLEGE_IND IS NOT NULL)
                    OR (D.COLLEGE_IND IS NOT NULL AND S.COLLEGE_IND IS NULL)
                    OR (D.HOSPITAL_IND IS NOT NULL AND S.HOSPITAL_IND IS NOT NULL AND D.HOSPITAL_IND <> S.HOSPITAL_IND)
                    OR (D.HOSPITAL_IND IS NULL AND S.HOSPITAL_IND IS NOT NULL)
                    OR (D.HOSPITAL_IND IS NOT NULL AND S.HOSPITAL_IND IS NULL)
                    OR
                    (D.NON_PROFIT_IND IS NOT NULL AND S.NON_PROFIT_IND IS NOT NULL AND
                     D.NON_PROFIT_IND <> S.NON_PROFIT_IND)
                    OR (D.NON_PROFIT_IND IS NULL AND S.NON_PROFIT_IND IS NOT NULL)
                    OR (D.NON_PROFIT_IND IS NOT NULL AND S.NON_PROFIT_IND IS NULL)
                    OR
                    (D.WITHDRAWAL_IND IS NOT NULL AND S.WITHDRAWAL_IND IS NOT NULL AND
                     D.WITHDRAWAL_IND <> S.WITHDRAWAL_IND)
                    OR (D.WITHDRAWAL_IND IS NULL AND S.WITHDRAWAL_IND IS NOT NULL)
                    OR (D.WITHDRAWAL_IND IS NOT NULL AND S.WITHDRAWAL_IND IS NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.NOTIFICATION_RSN_CODE IS NOT NULL AND S.NOTIFICATION_RSN_CODE IS NOT NULL AND
                        D.NOTIFICATION_RSN_CODE <> S.NOTIFICATION_RSN_CODE)
                    OR (D.NOTIFICATION_RSN_CODE IS NULL AND S.NOTIFICATION_RSN_CODE IS NOT NULL)
                    OR (D.NOTIFICATION_RSN_CODE IS NOT NULL AND S.NOTIFICATION_RSN_CODE IS NULL)
                    OR (D.EFFC_DATE IS NOT NULL AND S.EFFC_DATE IS NOT NULL AND D.EFFC_DATE <> S.EFFC_DATE)
                    OR (D.EFFC_DATE IS NULL AND S.EFFC_DATE IS NOT NULL)
                    OR (D.EFFC_DATE IS NOT NULL AND S.EFFC_DATE IS NULL)
                    OR (D.FINANCIAL_ASSURANCE_IND IS NOT NULL AND S.FINANCIAL_ASSURANCE_IND IS NOT NULL AND
                        D.FINANCIAL_ASSURANCE_IND <> S.FINANCIAL_ASSURANCE_IND)
                    OR (D.FINANCIAL_ASSURANCE_IND IS NULL AND S.FINANCIAL_ASSURANCE_IND IS NOT NULL)
                    OR (D.FINANCIAL_ASSURANCE_IND IS NOT NULL AND S.FINANCIAL_ASSURANCE_IND IS NULL)
                    OR (D.MAIL_STREET_NUMBER IS NOT NULL AND S.MAIL_STREET_NUMBER IS NOT NULL AND
                        D.MAIL_STREET_NUMBER <> S.MAIL_STREET_NUMBER)
                    OR (D.MAIL_STREET_NUMBER IS NULL AND S.MAIL_STREET_NUMBER IS NOT NULL)
                    OR (D.MAIL_STREET_NUMBER IS NOT NULL AND S.MAIL_STREET_NUMBER IS NULL)
                    OR (D.LOCATION_STREET_NUMBER IS NOT NULL AND S.LOCATION_STREET_NUMBER IS NOT NULL AND
                        D.LOCATION_STREET_NUMBER <> S.LOCATION_STREET_NUMBER)
                    OR (D.LOCATION_STREET_NUMBER IS NULL AND S.LOCATION_STREET_NUMBER IS NOT NULL)
                    OR (D.LOCATION_STREET_NUMBER IS NOT NULL AND S.LOCATION_STREET_NUMBER IS NULL)
                    OR (D.NON_NOTIFIER_TEXT IS NOT NULL AND S.NON_NOTIFIER_TEXT IS NOT NULL AND
                        D.NON_NOTIFIER_TEXT <> S.NON_NOTIFIER_TEXT)
                    OR (D.NON_NOTIFIER_TEXT IS NULL AND S.NON_NOTIFIER_TEXT IS NOT NULL)
                    OR (D.NON_NOTIFIER_TEXT IS NOT NULL AND S.NON_NOTIFIER_TEXT IS NULL)
                    OR (D.ACCESSIBILITY_TEXT IS NOT NULL AND S.ACCESSIBILITY_TEXT IS NOT NULL AND
                        D.ACCESSIBILITY_TEXT <> S.ACCESSIBILITY_TEXT)
                    OR (D.ACCESSIBILITY_TEXT IS NULL AND S.ACCESSIBILITY_TEXT IS NOT NULL)
                    OR (D.ACCESSIBILITY_TEXT IS NOT NULL AND S.ACCESSIBILITY_TEXT IS NULL)
                    OR (D.STATE_DISTRICT_TEXT IS NOT NULL AND S.STATE_DISTRICT_TEXT IS NOT NULL AND
                        D.STATE_DISTRICT_TEXT <> S.STATE_DISTRICT_TEXT)
                    OR (D.STATE_DISTRICT_TEXT IS NULL AND S.STATE_DISTRICT_TEXT IS NOT NULL)
                    OR (D.STATE_DISTRICT_TEXT IS NOT NULL AND S.STATE_DISTRICT_TEXT IS NULL)
                    OR (D.INTRNL_NOTES IS NOT NULL AND S.INTRNL_NOTES IS NOT NULL AND D.INTRNL_NOTES <> S.INTRNL_NOTES)
                    OR (D.INTRNL_NOTES IS NULL AND S.INTRNL_NOTES IS NOT NULL)
                    OR (D.INTRNL_NOTES IS NOT NULL AND S.INTRNL_NOTES IS NULL)
                    OR (D.SHORT_TERM_INTRNL_NOTES IS NOT NULL AND S.SHORT_TERM_INTRNL_NOTES IS NOT NULL AND
                        D.SHORT_TERM_INTRNL_NOTES <> S.SHORT_TERM_INTRNL_NOTES)
                    OR (D.SHORT_TERM_INTRNL_NOTES IS NULL AND S.SHORT_TERM_INTRNL_NOTES IS NOT NULL)
                    OR (D.SHORT_TERM_INTRNL_NOTES IS NOT NULL AND S.SHORT_TERM_INTRNL_NOTES IS NULL)
                    OR (D.NATURE_OF_BUSINESS_TEXT IS NOT NULL AND S.NATURE_OF_BUSINESS_TEXT IS NOT NULL AND
                        D.NATURE_OF_BUSINESS_TEXT <> S.NATURE_OF_BUSINESS_TEXT)
                    OR (D.NATURE_OF_BUSINESS_TEXT IS NULL AND S.NATURE_OF_BUSINESS_TEXT IS NOT NULL)
                    OR (D.NATURE_OF_BUSINESS_TEXT IS NOT NULL AND S.NATURE_OF_BUSINESS_TEXT IS NULL)
                    OR
                    (D.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND
                     D.RECOGNIZED_TRADER_EXPORTER_IND <> S.RECOGNIZED_TRADER_EXPORTER_IND)
                    OR (D.RECOGNIZED_TRADER_EXPORTER_IND IS NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL)
                    OR (D.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NULL)
                    OR
                    (D.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND
                     D.RECOGNIZED_TRADER_IMPORTER_IND <> S.RECOGNIZED_TRADER_IMPORTER_IND)
                    OR (D.RECOGNIZED_TRADER_IMPORTER_IND IS NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL)
                    OR (D.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NULL)
                    OR (D.SLAB_EXPORTER_IND IS NOT NULL AND S.SLAB_EXPORTER_IND IS NOT NULL AND
                        D.SLAB_EXPORTER_IND <> S.SLAB_EXPORTER_IND)
                    OR (D.SLAB_EXPORTER_IND IS NULL AND S.SLAB_EXPORTER_IND IS NOT NULL)
                    OR (D.SLAB_EXPORTER_IND IS NOT NULL AND S.SLAB_EXPORTER_IND IS NULL)
                    OR (D.SLAB_IMPORTER_IND IS NOT NULL AND S.SLAB_IMPORTER_IND IS NOT NULL AND
                        D.SLAB_IMPORTER_IND <> S.SLAB_IMPORTER_IND)
                    OR (D.SLAB_IMPORTER_IND IS NULL AND S.SLAB_IMPORTER_IND IS NOT NULL)
                    OR (D.SLAB_IMPORTER_IND IS NOT NULL AND S.SLAB_IMPORTER_IND IS NULL)
                    OR (D.TSD_DATE IS NOT NULL AND S.TSD_DATE IS NOT NULL AND D.TSD_DATE <> S.TSD_DATE)
                    OR (D.TSD_DATE IS NULL AND S.TSD_DATE IS NOT NULL)
                    OR (D.TSD_DATE IS NOT NULL AND S.TSD_DATE IS NULL)
                    OR (D.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL AND S.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL AND
                        D.UNIVERSAL_WASTE_DEST_FACILITY <> S.UNIVERSAL_WASTE_DEST_FACILITY)
                    OR (D.UNIVERSAL_WASTE_DEST_FACILITY IS NULL AND S.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL)
                    OR (D.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL AND S.UNIVERSAL_WASTE_DEST_FACILITY IS NULL)
                    OR (D.STATE_WASTE_GENERATOR_OWNER IS NOT NULL AND S.STATE_WASTE_GENERATOR_OWNER IS NOT NULL AND
                        D.STATE_WASTE_GENERATOR_OWNER <> S.STATE_WASTE_GENERATOR_OWNER)
                    OR (D.STATE_WASTE_GENERATOR_OWNER IS NULL AND S.STATE_WASTE_GENERATOR_OWNER IS NOT NULL)
                    OR (D.STATE_WASTE_GENERATOR_OWNER IS NOT NULL AND S.STATE_WASTE_GENERATOR_OWNER IS NULL)
                    OR (D.STATE_WASTE_GENERATOR IS NOT NULL AND S.STATE_WASTE_GENERATOR IS NOT NULL AND
                        D.STATE_WASTE_GENERATOR <> S.STATE_WASTE_GENERATOR)
                    OR (D.STATE_WASTE_GENERATOR IS NULL AND S.STATE_WASTE_GENERATOR IS NOT NULL)
                    OR (D.STATE_WASTE_GENERATOR IS NOT NULL AND S.STATE_WASTE_GENERATOR IS NULL)
                    OR (D.FED_WASTE_GENERATOR_OWNER IS NOT NULL AND S.FED_WASTE_GENERATOR_OWNER IS NOT NULL AND
                        D.FED_WASTE_GENERATOR_OWNER <> S.FED_WASTE_GENERATOR_OWNER)
                    OR (D.FED_WASTE_GENERATOR_OWNER IS NULL AND S.FED_WASTE_GENERATOR_OWNER IS NOT NULL)
                    OR (D.FED_WASTE_GENERATOR_OWNER IS NOT NULL AND S.FED_WASTE_GENERATOR_OWNER IS NULL)
                    OR (D.FED_WASTE_GENERATOR IS NOT NULL AND S.FED_WASTE_GENERATOR IS NOT NULL AND
                        D.FED_WASTE_GENERATOR <> S.FED_WASTE_GENERATOR)
                    OR (D.FED_WASTE_GENERATOR IS NULL AND S.FED_WASTE_GENERATOR IS NOT NULL)
                    OR (D.FED_WASTE_GENERATOR IS NOT NULL AND S.FED_WASTE_GENERATOR IS NULL)
                    OR
                    (D.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND
                     D.RECOGNIZED_TRADER_IMPORTER_IND <> S.RECOGNIZED_TRADER_IMPORTER_IND)
                    OR (D.RECOGNIZED_TRADER_IMPORTER_IND IS NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL)
                    OR (D.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NULL)
                    OR
                    (D.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND
                     D.RECOGNIZED_TRADER_EXPORTER_IND <> S.RECOGNIZED_TRADER_EXPORTER_IND)
                    OR (D.RECOGNIZED_TRADER_EXPORTER_IND IS NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL)
                    OR (D.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NULL)
                    OR (D.SLAB_IMPORTER_IND IS NOT NULL AND S.SLAB_IMPORTER_IND IS NOT NULL AND
                        D.SLAB_IMPORTER_IND <> S.SLAB_IMPORTER_IND)
                    OR (D.SLAB_IMPORTER_IND IS NULL AND S.SLAB_IMPORTER_IND IS NOT NULL)
                    OR (D.SLAB_IMPORTER_IND IS NOT NULL AND S.SLAB_IMPORTER_IND IS NULL)
                    OR (D.SLAB_EXPORTER_IND IS NOT NULL AND S.SLAB_EXPORTER_IND IS NOT NULL AND
                        D.SLAB_EXPORTER_IND <> S.SLAB_EXPORTER_IND)
                    OR (D.SLAB_EXPORTER_IND IS NULL AND S.SLAB_EXPORTER_IND IS NOT NULL)
                    OR (D.SLAB_EXPORTER_IND IS NOT NULL AND S.SLAB_EXPORTER_IND IS NULL)
                    OR (D.RECYCLER_ACT_NONSTORAGE IS NOT NULL AND S.RECYCLER_ACT_NONSTORAGE IS NOT NULL AND
                        D.RECYCLER_ACT_NONSTORAGE <> S.RECYCLER_ACT_NONSTORAGE)
                    OR (D.RECYCLER_ACT_NONSTORAGE IS NULL AND S.RECYCLER_ACT_NONSTORAGE IS NOT NULL)
                    OR (D.RECYCLER_ACT_NONSTORAGE IS NOT NULL AND S.RECYCLER_ACT_NONSTORAGE IS NULL)
                    OR (D.MANIFEST_BROKER IS NOT NULL AND S.MANIFEST_BROKER IS NOT NULL AND
                        D.MANIFEST_BROKER <> S.MANIFEST_BROKER)
                    OR (D.MANIFEST_BROKER IS NULL AND S.MANIFEST_BROKER IS NOT NULL)
                    OR (D.MANIFEST_BROKER IS NOT NULL AND S.MANIFEST_BROKER IS NULL)
                    OR (D.ACKNOWLEDGE_FLAG_IND IS NOT NULL AND S.ACKNOWLEDGE_FLAG_IND IS NOT NULL AND
                        D.ACKNOWLEDGE_FLAG_IND <> S.ACKNOWLEDGE_FLAG_IND)
                    OR (D.ACKNOWLEDGE_FLAG_IND IS NULL AND S.ACKNOWLEDGE_FLAG_IND IS NOT NULL)
                    OR (D.ACKNOWLEDGE_FLAG_IND IS NOT NULL AND S.ACKNOWLEDGE_FLAG_IND IS NULL)
                    OR
                    (D.INCLUDE_IN_NATIONAL_REPORT_IND IS NOT NULL AND S.INCLUDE_IN_NATIONAL_REPORT_IND IS NOT NULL AND
                     D.INCLUDE_IN_NATIONAL_REPORT_IND <> S.INCLUDE_IN_NATIONAL_REPORT_IND)
                    OR (D.INCLUDE_IN_NATIONAL_REPORT_IND IS NULL AND S.INCLUDE_IN_NATIONAL_REPORT_IND IS NOT NULL)
                    OR (D.INCLUDE_IN_NATIONAL_REPORT_IND IS NOT NULL AND S.INCLUDE_IN_NATIONAL_REPORT_IND IS NULL)
                    OR (D.LQHUW_IND IS NOT NULL AND S.LQHUW_IND IS NOT NULL AND
                        D.LQHUW_IND <> S.LQHUW_IND)
                    OR (D.LQHUW_IND IS NULL AND S.LQHUW_IND IS NOT NULL)
                    OR (D.LQHUW_IND IS NOT NULL AND S.LQHUW_IND IS NULL)
                    OR (D.HD_REPORT_CYCLE_YEAR IS NOT NULL AND S.HD_REPORT_CYCLE_YEAR IS NOT NULL AND
                        D.HD_REPORT_CYCLE_YEAR <> S.HD_REPORT_CYCLE_YEAR)
                    OR (D.HD_REPORT_CYCLE_YEAR IS NULL AND S.HD_REPORT_CYCLE_YEAR IS NOT NULL)
                    OR (D.HD_REPORT_CYCLE_YEAR IS NOT NULL AND S.HD_REPORT_CYCLE_YEAR IS NULL)
                    OR (D.HEALTHCARE_FAC IS NOT NULL AND S.HEALTHCARE_FAC IS NOT NULL AND
                        D.HEALTHCARE_FAC <> S.HEALTHCARE_FAC)
                    OR (D.HEALTHCARE_FAC IS NULL AND S.HEALTHCARE_FAC IS NOT NULL)
                    OR (D.HEALTHCARE_FAC IS NOT NULL AND S.HEALTHCARE_FAC IS NULL)
                    OR (D.REVERSE_DISTRIBUTOR IS NOT NULL AND S.REVERSE_DISTRIBUTOR IS NOT NULL AND
                        D.REVERSE_DISTRIBUTOR <> S.REVERSE_DISTRIBUTOR)
                    OR (D.REVERSE_DISTRIBUTOR IS NULL AND S.REVERSE_DISTRIBUTOR IS NOT NULL)
                    OR (D.REVERSE_DISTRIBUTOR IS NOT NULL AND S.REVERSE_DISTRIBUTOR IS NULL)
                    OR (D.SUBPART_P_WITHDRAWAL IS NOT NULL AND S.SUBPART_P_WITHDRAWAL IS NOT NULL AND
                        D.SUBPART_P_WITHDRAWAL <> S.SUBPART_P_WITHDRAWAL)
                    OR (D.SUBPART_P_WITHDRAWAL IS NULL AND S.SUBPART_P_WITHDRAWAL IS NOT NULL)
                    OR (D.SUBPART_P_WITHDRAWAL IS NOT NULL AND S.SUBPART_P_WITHDRAWAL IS NULL)
                    OR (D.RECYCLER_IND IS NOT NULL AND S.RECYCLER_IND IS NOT NULL AND
                        D.RECYCLER_IND <> S.RECYCLER_IND)
                    OR (D.RECYCLER_IND IS NULL AND S.RECYCLER_IND IS NOT NULL)
                    OR (D.RECYCLER_IND IS NOT NULL AND S.RECYCLER_IND IS NULL)
                    OR (D.CURRENT_RECORD IS NOT NULL AND S.CURRENT_RECORD IS NOT NULL AND
                        D.CURRENT_RECORD <> S.CURRENT_RECORD)
                    OR (D.CURRENT_RECORD IS NULL AND S.CURRENT_RECORD IS NOT NULL)
                    OR (D.CURRENT_RECORD IS NOT NULL AND S.CURRENT_RECORD IS NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NOT NULL AND
                        D.CREATED_BY_USERID <> S.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR (D.H_CREATED_DATE IS NOT NULL AND S.H_CREATED_DATE IS NOT NULL AND
                        D.H_CREATED_DATE <> S.H_CREATED_DATE)
                    OR (D.H_CREATED_DATE IS NULL AND S.H_CREATED_DATE IS NOT NULL)
                    OR (D.H_CREATED_DATE IS NOT NULL AND S.H_CREATED_DATE IS NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NOT NULL AND
                        D.DATA_ORIG <> S.DATA_ORIG)
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL)
                    OR (D.LOCATION_LATITUDE IS NOT NULL AND S.LOCATION_LATITUDE IS NOT NULL AND
                        D.LOCATION_LATITUDE <> S.LOCATION_LATITUDE)
                    OR (D.LOCATION_LATITUDE IS NULL AND S.LOCATION_LATITUDE IS NOT NULL)
                    OR (D.LOCATION_LATITUDE IS NOT NULL AND S.LOCATION_LATITUDE IS NULL)
                    OR (D.LOCATION_LONGITUDE IS NOT NULL AND S.LOCATION_LONGITUDE IS NOT NULL AND
                        D.LOCATION_LONGITUDE <> S.LOCATION_LONGITUDE)
                    OR (D.LOCATION_LONGITUDE IS NULL AND S.LOCATION_LONGITUDE IS NOT NULL)
                    OR (D.LOCATION_LONGITUDE IS NOT NULL AND S.LOCATION_LONGITUDE IS NULL)
                    OR (D.LOCATION_GIS_PRIM IS NOT NULL AND S.LOCATION_GIS_PRIM IS NOT NULL AND
                        D.LOCATION_GIS_PRIM <> S.LOCATION_GIS_PRIM)
                    OR (D.LOCATION_GIS_PRIM IS NULL AND S.LOCATION_GIS_PRIM IS NOT NULL)
                    OR (D.LOCATION_GIS_PRIM IS NOT NULL AND S.LOCATION_GIS_PRIM IS NULL)
                    OR (D.LOCATION_GIS_ORIG IS NOT NULL AND S.LOCATION_GIS_ORIG IS NOT NULL AND
                        D.LOCATION_GIS_ORIG <> S.LOCATION_GIS_ORIG)
                    OR (D.LOCATION_GIS_ORIG IS NULL AND S.LOCATION_GIS_ORIG IS NOT NULL)
                    OR (D.LOCATION_GIS_ORIG IS NOT NULL AND S.LOCATION_GIS_ORIG IS NULL)
                    OR
                    (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NOT NULL AND D.LAST_UPDT_BY <> S.LAST_UPDT_BY)
                    OR (D.LAST_UPDT_BY IS NULL AND S.LAST_UPDT_BY IS NOT NULL)
                    OR (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NULL)
                    OR
                    (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NOT NULL AND D.LAST_UPDT_DATE <> S.LAST_UPDT_DATE)
                    OR (D.LAST_UPDT_DATE IS NULL AND S.LAST_UPDT_DATE IS NOT NULL)
                    OR (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NULL)
                    OR
                    (D.BR_EXEMPT_IND IS NOT NULL AND S.BR_EXEMPT_IND IS NOT NULL AND D.BR_EXEMPT_IND <> S.BR_EXEMPT_IND)
                    OR (D.BR_EXEMPT_IND IS NULL AND S.BR_EXEMPT_IND IS NOT NULL)
                    OR (D.BR_EXEMPT_IND IS NOT NULL AND S.BR_EXEMPT_IND IS NULL)
                )
            THEN
UPDATE
    SET D.TRANSACTION_CODE               = S.TRANSACTION_CODE,
    D.ACTIVITY_LOCATION              = S.ACTIVITY_LOCATION,
    D.SOURCE_TYPE                    = S.SOURCE_TYPE,
    D.RECEIVE_DATE                   = S.RECEIVE_DATE,
    D.HANDLER_NAME                   = S.HANDLER_NAME,
    D.ACKNOWLEDGE_DATE               = S.ACKNOWLEDGE_DATE,
    D.NON_NOTIFIER                   = S.NON_NOTIFIER,
    D.OFF_SITE_RECEIPT               = S.OFF_SITE_RECEIPT,
    D.ACCESSIBILITY                  = S.ACCESSIBILITY,
    D.COUNTY_CODE_OWNER              = S.COUNTY_CODE_OWNER,
    D.COUNTY_CODE                    = S.COUNTY_CODE,
    D.NOTES                          = S.NOTES,
    D.ACKNOWLEDGE_FLAG               = S.ACKNOWLEDGE_FLAG,
    D.LOCATION_STREET1               = S.LOCATION_STREET1,
    D.LOCATION_STREET2               = S.LOCATION_STREET2,
    D.LOCATION_CITY                  = S.LOCATION_CITY,
    D.LOCATION_STATE                 = S.LOCATION_STATE,
    D.LOCATION_COUNTRY               = S.LOCATION_COUNTRY,
    D.LOCATION_ZIP                   = S.LOCATION_ZIP,
    D.MAIL_STREET1                   = S.MAIL_STREET1,
    D.MAIL_STREET2                   = S.MAIL_STREET2,
    D.MAIL_CITY                      = S.MAIL_CITY,
    D.MAIL_STATE                     = S.MAIL_STATE,
    D.MAIL_COUNTRY                   = S.MAIL_COUNTRY,
    D.MAIL_ZIP                       = S.MAIL_ZIP,
    D.CONTACT_FIRST_NAME             = S.CONTACT_FIRST_NAME,
    D.CONTACT_MIDDLE_INITIAL         = S.CONTACT_MIDDLE_INITIAL,
    D.CONTACT_LAST_NAME              = S.CONTACT_LAST_NAME,
    D.CONTACT_ORG_NAME               = S.CONTACT_ORG_NAME,
    D.CONTACT_TITLE                  = D.CONTACT_TITLE,
    D.CONTACT_EMAIL_ADDRESS          = S.CONTACT_EMAIL_ADDRESS,
    D.CONTACT_PHONE                  = S.CONTACT_PHONE,
    D.CONTACT_PHONE_EXT              = S.CONTACT_PHONE_EXT,
    D.CONTACT_FAX                    = S.CONTACT_FAX,
    D.CONTACT_STREET1                = S.CONTACT_STREET1,
    D.CONTACT_STREET2                = S.CONTACT_STREET2,
    D.CONTACT_CITY                   = S.CONTACT_CITY,
    D.CONTACT_STATE                  = S.CONTACT_STATE,
    D.CONTACT_COUNTRY                = S.CONTACT_COUNTRY,
    D.CONTACT_ZIP                    = S.CONTACT_ZIP,
    D.PCONTACT_FIRST_NAME            = S.PCONTACT_FIRST_NAME,
    D.PCONTACT_MIDDLE_NAME           = S.PCONTACT_MIDDLE_NAME,
    D.PCONTACT_LAST_NAME             = S.PCONTACT_LAST_NAME,
    D.PCONTACT_ORG_NAME              = S.PCONTACT_ORG_NAME,
    D.PCONTACT_TITLE                 = S.PCONTACT_TITLE,
    D.PCONTACT_EMAIL_ADDRESS         = S.PCONTACT_EMAIL_ADDRESS,
    D.PCONTACT_PHONE                 = S.PCONTACT_PHONE,
    D.PCONTACT_PHONE_EXT             = S.PCONTACT_PHONE_EXT,
    D.PCONTACT_FAX                   = S.PCONTACT_FAX,
    D.PCONTACT_STREET1               = S.PCONTACT_STREET1,
    D.PCONTACT_STREET2               = S.PCONTACT_STREET2,
    D.PCONTACT_CITY                  = S.PCONTACT_CITY,
    D.PCONTACT_STATE                 = S.PCONTACT_STATE,
    D.PCONTACT_COUNTRY               = S.PCONTACT_COUNTRY,
    D.PCONTACT_ZIP                   = S.PCONTACT_ZIP,
    D.USED_OIL_BURNER                = S.USED_OIL_BURNER,
    D.USED_OIL_PROCESSOR             = S.USED_OIL_PROCESSOR,
    D.USED_OIL_REFINER               = S.USED_OIL_REFINER,
    D.USED_OIL_MARKET_BURNER         = S.USED_OIL_MARKET_BURNER,
    D.USED_OIL_SPEC_MARKETER         = S.USED_OIL_SPEC_MARKETER,
    D.USED_OIL_TRANSFER_FACILITY     = S.USED_OIL_TRANSFER_FACILITY,
    D.USED_OIL_TRANSPORTER           = S.USED_OIL_TRANSPORTER,
    D.LAND_TYPE                      = S.LAND_TYPE,
    D.STATE_DISTRICT_OWNER           = S.STATE_DISTRICT_OWNER,
    D.STATE_DISTRICT                 = S.STATE_DISTRICT,
    D.IMPORTER_ACTIVITY              = S.IMPORTER_ACTIVITY,
    D.MIXED_WASTE_GENERATOR          = S.MIXED_WASTE_GENERATOR,
    D.RECYCLER_ACTIVITY              = S.RECYCLER_ACTIVITY,
    D.TRANSPORTER_ACTIVITY           = S.TRANSPORTER_ACTIVITY,
    D.TSD_ACTIVITY                   = S.TSD_ACTIVITY,
    D.UNDERGROUND_INJECTION_ACTIVITY = S.UNDERGROUND_INJECTION_ACTIVITY,
    D.ONSITE_BURNER_EXEMPTION        = S.ONSITE_BURNER_EXEMPTION,
    D.FURNACE_EXEMPTION              = S.FURNACE_EXEMPTION,
    D.SHORT_TERM_GEN_IND             = S.SHORT_TERM_GEN_IND,
    D.TRANSFER_FACILITY_IND          = S.TRANSFER_FACILITY_IND,
    D.COLLEGE_IND                    = S.COLLEGE_IND,
    D.HOSPITAL_IND                   = S.HOSPITAL_IND,
    D.NON_PROFIT_IND                 = S.NON_PROFIT_IND,
    D.WITHDRAWAL_IND                 = S.WITHDRAWAL_IND,
    D.TRANS_CODE                     = S.TRANS_CODE,
    D.NOTIFICATION_RSN_CODE          = S.NOTIFICATION_RSN_CODE,
    D.EFFC_DATE                      = S.EFFC_DATE,
    D.FINANCIAL_ASSURANCE_IND        = S.FINANCIAL_ASSURANCE_IND,
    D.MAIL_STREET_NUMBER             = S.MAIL_STREET_NUMBER,
    D.LOCATION_STREET_NUMBER         = S.LOCATION_STREET_NUMBER,
    D.NON_NOTIFIER_TEXT              = S.NON_NOTIFIER_TEXT,
    D.ACCESSIBILITY_TEXT             = S.ACCESSIBILITY_TEXT,
    D.STATE_DISTRICT_TEXT            = S.STATE_DISTRICT_TEXT,
    D.INTRNL_NOTES                   = S.INTRNL_NOTES,
    D.SHORT_TERM_INTRNL_NOTES        = S.SHORT_TERM_INTRNL_NOTES,
    D.NATURE_OF_BUSINESS_TEXT        = S.NATURE_OF_BUSINESS_TEXT,
    D.TSD_DATE                       = S.TSD_DATE,
    D.UNIVERSAL_WASTE_DEST_FACILITY  = S.UNIVERSAL_WASTE_DEST_FACILITY,
    D.STATE_WASTE_GENERATOR_OWNER    = S.STATE_WASTE_GENERATOR_OWNER,
    D.STATE_WASTE_GENERATOR          = S.STATE_WASTE_GENERATOR,
    D.FED_WASTE_GENERATOR_OWNER      = S.FED_WASTE_GENERATOR_OWNER,
    D.FED_WASTE_GENERATOR            = S.FED_WASTE_GENERATOR,
    D.RECOGNIZED_TRADER_IMPORTER_IND = S.RECOGNIZED_TRADER_IMPORTER_IND,
    D.RECOGNIZED_TRADER_EXPORTER_IND = S.RECOGNIZED_TRADER_EXPORTER_IND,
    D.SLAB_IMPORTER_IND              = S.SLAB_IMPORTER_IND,
    D.SLAB_EXPORTER_IND              = S.SLAB_EXPORTER_IND,
    D.RECYCLER_ACT_NONSTORAGE        = S.RECYCLER_ACT_NONSTORAGE,
    D.MANIFEST_BROKER                = S.MANIFEST_BROKER,
    D.ACKNOWLEDGE_FLAG_IND           = S.ACKNOWLEDGE_FLAG_IND,
    D.INCLUDE_IN_NATIONAL_REPORT_IND = S.INCLUDE_IN_NATIONAL_REPORT_IND,
    D.LQHUW_IND                      = S.LQHUW_IND,
    D.HD_REPORT_CYCLE_YEAR           = S.HD_REPORT_CYCLE_YEAR,
    D.HEALTHCARE_FAC                 = S.HEALTHCARE_FAC,
    D.REVERSE_DISTRIBUTOR            = S.REVERSE_DISTRIBUTOR,
    D.SUBPART_P_WITHDRAWAL           = S.SUBPART_P_WITHDRAWAL,
    D.RECYCLER_IND                   = S.RECYCLER_IND,
    D.CURRENT_RECORD                 = S.CURRENT_RECORD,
    D.CREATED_BY_USERID              = S.CREATED_BY_USERID,
    D.H_CREATED_DATE                 = S.H_CREATED_DATE,
    D.DATA_ORIG                      = S.DATA_ORIG,
    D.LOCATION_LATITUDE              = S.LOCATION_LATITUDE,
    D.LOCATION_LONGITUDE             = S.LOCATION_LONGITUDE,
    D.LOCATION_GIS_PRIM              = S.LOCATION_GIS_PRIM,
    D.LOCATION_GIS_ORIG              = S.LOCATION_GIS_ORIG,
    D.LAST_UPDT_BY                   = s.LAST_UPDT_BY,
    D.LAST_UPDT_DATE                 = s.LAST_UPDT_DATE,
    D.BR_EXEMPT_IND                  = S.BR_EXEMPT_IND
    WHEN NOT MATCHED THEN
INSERT
(HD_HBASIC_ID,
TRANSACTION_CODE,
ACTIVITY_LOCATION,
SEQ_NUMBER,
SOURCE_TYPE,
RECEIVE_DATE,
HANDLER_NAME,
ACKNOWLEDGE_DATE,
NON_NOTIFIER,
OFF_SITE_RECEIPT,
ACCESSIBILITY,
COUNTY_CODE_OWNER,
COUNTY_CODE,
NOTES,
ACKNOWLEDGE_FLAG,
LOCATION_STREET1,
LOCATION_STREET2,
LOCATION_CITY,
LOCATION_STATE,
LOCATION_COUNTRY,
LOCATION_ZIP,
MAIL_STREET1,
MAIL_STREET2,
MAIL_CITY,
MAIL_STATE,
MAIL_COUNTRY,
MAIL_ZIP,
CONTACT_FIRST_NAME,
CONTACT_MIDDLE_INITIAL,
CONTACT_LAST_NAME,
CONTACT_ORG_NAME,
CONTACT_TITLE,
CONTACT_EMAIL_ADDRESS,
CONTACT_PHONE,
CONTACT_PHONE_EXT,
CONTACT_FAX,
CONTACT_STREET1,
CONTACT_STREET2,
CONTACT_CITY,
CONTACT_STATE,
CONTACT_COUNTRY,
CONTACT_ZIP,
PCONTACT_FIRST_NAME,
PCONTACT_MIDDLE_NAME,
PCONTACT_LAST_NAME,
PCONTACT_ORG_NAME,
PCONTACT_TITLE,
PCONTACT_EMAIL_ADDRESS,
PCONTACT_PHONE,
PCONTACT_PHONE_EXT,
PCONTACT_FAX,
PCONTACT_STREET1,
PCONTACT_STREET2,
PCONTACT_CITY,
PCONTACT_STATE,
PCONTACT_COUNTRY,
PCONTACT_ZIP,
USED_OIL_BURNER,
USED_OIL_PROCESSOR,
USED_OIL_REFINER,
USED_OIL_MARKET_BURNER,
USED_OIL_SPEC_MARKETER,
USED_OIL_TRANSFER_FACILITY,
USED_OIL_TRANSPORTER,
LAND_TYPE,
STATE_DISTRICT_OWNER,
STATE_DISTRICT,
IMPORTER_ACTIVITY,
MIXED_WASTE_GENERATOR,
RECYCLER_ACTIVITY,
TRANSPORTER_ACTIVITY,
TSD_ACTIVITY,
UNDERGROUND_INJECTION_ACTIVITY,
ONSITE_BURNER_EXEMPTION,
FURNACE_EXEMPTION,
SHORT_TERM_GEN_IND,
TRANSFER_FACILITY_IND,
COLLEGE_IND,
HOSPITAL_IND,
NON_PROFIT_IND,
WITHDRAWAL_IND,
TRANS_CODE,
NOTIFICATION_RSN_CODE,
EFFC_DATE,
FINANCIAL_ASSURANCE_IND,
MAIL_STREET_NUMBER,
LOCATION_STREET_NUMBER,
NON_NOTIFIER_TEXT,
ACCESSIBILITY_TEXT,
STATE_DISTRICT_TEXT,
INTRNL_NOTES,
SHORT_TERM_INTRNL_NOTES,
NATURE_OF_BUSINESS_TEXT,
TSD_DATE,
UNIVERSAL_WASTE_DEST_FACILITY,
STATE_WASTE_GENERATOR_OWNER,
STATE_WASTE_GENERATOR,
FED_WASTE_GENERATOR_OWNER,
FED_WASTE_GENERATOR,
RECOGNIZED_TRADER_IMPORTER_IND,
RECOGNIZED_TRADER_EXPORTER_IND,
SLAB_IMPORTER_IND,
SLAB_EXPORTER_IND,
RECYCLER_ACT_NONSTORAGE,
MANIFEST_BROKER,
ACKNOWLEDGE_FLAG_IND,
INCLUDE_IN_NATIONAL_REPORT_IND,
LQHUW_IND,
HD_REPORT_CYCLE_YEAR,
HEALTHCARE_FAC,
REVERSE_DISTRIBUTOR,
SUBPART_P_WITHDRAWAL,
RECYCLER_IND,
CURRENT_RECORD,
CREATED_BY_USERID,
H_CREATED_DATE,
DATA_ORIG,
LOCATION_LATITUDE,
LOCATION_LONGITUDE,
LOCATION_GIS_PRIM,
LOCATION_GIS_ORIG,
LAST_UPDT_BY,
LAST_UPDT_DATE,
BR_EXEMPT_IND)
VALUES (S.WH_HD_HBASIC_ID,
    S.TRANSACTION_CODE,
    S.ACTIVITY_LOCATION,
    S.SEQ_NUMBER,
    S.SOURCE_TYPE,
    S.RECEIVE_DATE,
    S.HANDLER_NAME,
    S.ACKNOWLEDGE_DATE,
    S.NON_NOTIFIER,
    S.OFF_SITE_RECEIPT,
    S.ACCESSIBILITY,
    S.COUNTY_CODE_OWNER,
    S.COUNTY_CODE,
    S.NOTES,
    S.ACKNOWLEDGE_FLAG,
    S.LOCATION_STREET1,
    S.LOCATION_STREET2,
    S.LOCATION_CITY,
    S.LOCATION_STATE,
    S.LOCATION_COUNTRY,
    S.LOCATION_ZIP,
    S.MAIL_STREET1,
    S.MAIL_STREET2,
    S.MAIL_CITY,
    S.MAIL_STATE,
    S.MAIL_COUNTRY,
    S.MAIL_ZIP,
    S.CONTACT_FIRST_NAME,
    S.CONTACT_MIDDLE_INITIAL,
    S.CONTACT_LAST_NAME,
    S.CONTACT_ORG_NAME,
    S.CONTACT_TITLE,
    S.CONTACT_EMAIL_ADDRESS,
    S.CONTACT_PHONE,
    S.CONTACT_PHONE_EXT,
    S.CONTACT_FAX,
    S.CONTACT_STREET1,
    S.CONTACT_STREET2,
    S.CONTACT_CITY,
    S.CONTACT_STATE,
    S.CONTACT_COUNTRY,
    S.CONTACT_ZIP,
    S.PCONTACT_FIRST_NAME,
    S.PCONTACT_MIDDLE_NAME,
    S.PCONTACT_LAST_NAME,
    S.PCONTACT_ORG_NAME,
    S.PCONTACT_TITLE,
    S.PCONTACT_EMAIL_ADDRESS,
    S.PCONTACT_PHONE,
    S.PCONTACT_PHONE_EXT,
    S.PCONTACT_FAX,
    S.PCONTACT_STREET1,
    S.PCONTACT_STREET2,
    S.PCONTACT_CITY,
    S.PCONTACT_STATE,
    S.PCONTACT_COUNTRY,
    S.PCONTACT_ZIP,
    S.USED_OIL_BURNER,
    S.USED_OIL_PROCESSOR,
    S.USED_OIL_REFINER,
    S.USED_OIL_MARKET_BURNER,
    S.USED_OIL_SPEC_MARKETER,
    S.USED_OIL_TRANSFER_FACILITY,
    S.USED_OIL_TRANSPORTER,
    S.LAND_TYPE,
    S.STATE_DISTRICT_OWNER,
    S.STATE_DISTRICT,
    S.IMPORTER_ACTIVITY,
    S.MIXED_WASTE_GENERATOR,
    S.RECYCLER_ACTIVITY,
    S.TRANSPORTER_ACTIVITY,
    S.TSD_ACTIVITY,
    S.UNDERGROUND_INJECTION_ACTIVITY,
    S.ONSITE_BURNER_EXEMPTION,
    S.FURNACE_EXEMPTION,
    S.SHORT_TERM_GEN_IND,
    S.TRANSFER_FACILITY_IND,
    S.COLLEGE_IND,
    S.HOSPITAL_IND,
    S.NON_PROFIT_IND,
    S.WITHDRAWAL_IND,
    S.TRANS_CODE,
    S.NOTIFICATION_RSN_CODE,
    S.EFFC_DATE,
    S.FINANCIAL_ASSURANCE_IND,
    S.MAIL_STREET_NUMBER,
    S.LOCATION_STREET_NUMBER,
    S.NON_NOTIFIER_TEXT,
    S.ACCESSIBILITY_TEXT,
    S.STATE_DISTRICT_TEXT,
    S.INTRNL_NOTES,
    S.SHORT_TERM_INTRNL_NOTES,
    S.NATURE_OF_BUSINESS_TEXT,
    S.TSD_DATE,
    S.UNIVERSAL_WASTE_DEST_FACILITY,
    S.STATE_WASTE_GENERATOR_OWNER,
    S.STATE_WASTE_GENERATOR,
    S.FED_WASTE_GENERATOR_OWNER,
    S.FED_WASTE_GENERATOR,
    S.RECOGNIZED_TRADER_IMPORTER_IND,
    S.RECOGNIZED_TRADER_EXPORTER_IND,
    S.SLAB_IMPORTER_IND,
    S.SLAB_EXPORTER_IND,
    S.RECYCLER_ACT_NONSTORAGE,
    S.MANIFEST_BROKER,
    S.ACKNOWLEDGE_FLAG_IND,
    S.INCLUDE_IN_NATIONAL_REPORT_IND,
    S.LQHUW_IND,
    S.HD_REPORT_CYCLE_YEAR,
    S.HEALTHCARE_FAC,
    S.REVERSE_DISTRIBUTOR,
    S.SUBPART_P_WITHDRAWAL,
    S.RECYCLER_IND,
    S.CURRENT_RECORD,
    S.CREATED_BY_USERID,
    S.H_CREATED_DATE,
    S.DATA_ORIG,
    S.LOCATION_LATITUDE,
    S.LOCATION_LONGITUDE,
    S.LOCATION_GIS_PRIM,
    S.LOCATION_GIS_ORIG,
    S.LAST_UPDT_BY,
    S.LAST_UPDT_DATE,
    S.BR_EXEMPT_IND);
IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

SELECT @ErrorMessage = ERROR_MESSAGE(),
       @ErrorSeverity = ERROR_SEVERITY(),
       @ErrorState = ERROR_STATE()

           IF @localTran = 1 AND XACT_STATE() <> 0
    ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
END
GO

/*************************************************************************************************
** ObjectName: PRM_MERGE_EVENT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_PRM_EVENT table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  04/24/2020   Windsor     Upgraded to 5.8 -- added CREATED_BY_USERID and P_CREATED_DATE.
**  02/21/2022   Windsor     Updated for new 5.11 columns.
**
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[PRM_MERGE_EVENT] @PRM_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
BEGIN
            SET @localTran = 1
BEGIN TRANSACTION LocalTran
END

BEGIN TRY
MERGE INTO RCRA_PRM_EVENT D
        USING (SELECT *
               FROM ETL_PRM_EVENT_VW
               WHERE PRM_SUBM_ID = @PRM_SUBM_ID) S
        ON (D.PRM_EVENT_ID = S.WH_PRM_EVENT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NOT NULL AND D.ACT_LOC_CODE <> S.ACT_LOC_CODE)
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NULL)
                    OR (D.PERMIT_EVENT_DATA_OWNER_CODE IS NOT NULL AND S.PERMIT_EVENT_DATA_OWNER_CODE IS NOT NULL AND
                        D.PERMIT_EVENT_DATA_OWNER_CODE <> S.PERMIT_EVENT_DATA_OWNER_CODE)
                    OR (D.PERMIT_EVENT_DATA_OWNER_CODE IS NULL AND S.PERMIT_EVENT_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.PERMIT_EVENT_DATA_OWNER_CODE IS NOT NULL AND S.PERMIT_EVENT_DATA_OWNER_CODE IS NULL)
                    OR (D.PERMIT_EVENT_CODE IS NOT NULL AND S.PERMIT_EVENT_CODE IS NOT NULL AND
                        D.PERMIT_EVENT_CODE <> S.PERMIT_EVENT_CODE)
                    OR (D.PERMIT_EVENT_CODE IS NULL AND S.PERMIT_EVENT_CODE IS NOT NULL)
                    OR (D.PERMIT_EVENT_CODE IS NOT NULL AND S.PERMIT_EVENT_CODE IS NULL)
                    OR
                    (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NOT NULL AND
                     D.EVENT_AGN_CODE <> S.EVENT_AGN_CODE)
                    OR (D.EVENT_AGN_CODE IS NULL AND S.EVENT_AGN_CODE IS NOT NULL)
                    OR (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NULL)
                    OR
                    (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NOT NULL AND D.EVENT_SEQ_NUM <> S.EVENT_SEQ_NUM)
                    OR (D.EVENT_SEQ_NUM IS NULL AND S.EVENT_SEQ_NUM IS NOT NULL)
                    OR (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NULL)
                    OR (D.ACTL_DATE IS NOT NULL AND S.ACTL_DATE IS NOT NULL AND D.ACTL_DATE <> S.ACTL_DATE)
                    OR (D.ACTL_DATE IS NULL AND S.ACTL_DATE IS NOT NULL)
                    OR (D.ACTL_DATE IS NOT NULL AND S.ACTL_DATE IS NULL)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND S.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND
                        D.ORIGINAL_SCHEDULE_DATE <> S.ORIGINAL_SCHEDULE_DATE)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NULL AND S.ORIGINAL_SCHEDULE_DATE IS NOT NULL)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND S.ORIGINAL_SCHEDULE_DATE IS NULL)
                    OR (D.NEW_SCHEDULE_DATE IS NOT NULL AND S.NEW_SCHEDULE_DATE IS NOT NULL AND
                        D.NEW_SCHEDULE_DATE <> S.NEW_SCHEDULE_DATE)
                    OR (D.NEW_SCHEDULE_DATE IS NULL AND S.NEW_SCHEDULE_DATE IS NOT NULL)
                    OR (D.NEW_SCHEDULE_DATE IS NOT NULL AND S.NEW_SCHEDULE_DATE IS NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND
                        D.RESP_PERSON_DATA_OWNER_CODE <> S.RESP_PERSON_DATA_OWNER_CODE)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NULL)
                    OR
                    (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NOT NULL AND
                     D.RESP_PERSON_ID <> S.RESP_PERSON_ID)
                    OR (D.RESP_PERSON_ID IS NULL AND S.RESP_PERSON_ID IS NOT NULL)
                    OR (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NULL)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND
                        D.EVENT_SUBORG_DATA_OWNER_CODE <> S.EVENT_SUBORG_DATA_OWNER_CODE)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NULL)
                    OR (D.EVENT_SUBORG_CODE IS NOT NULL AND S.EVENT_SUBORG_CODE IS NOT NULL AND
                        D.EVENT_SUBORG_CODE <> S.EVENT_SUBORG_CODE)
                    OR (D.EVENT_SUBORG_CODE IS NULL AND S.EVENT_SUBORG_CODE IS NOT NULL)
                    OR (D.EVENT_SUBORG_CODE IS NOT NULL AND S.EVENT_SUBORG_CODE IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR
                    (D.CREATED_BY_USERID IS NOT NULL AND s.CREATED_BY_USERID IS NOT NULL AND D.CREATED_BY_USERID <> s.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND s.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND s.CREATED_BY_USERID IS NULL)
                    OR
                    (D.P_CREATED_DATE IS NOT NULL AND S.P_CREATED_DATE IS NOT NULL AND D.P_CREATED_DATE <> S.P_CREATED_DATE)
                    OR (D.P_CREATED_DATE IS NULL AND S.P_CREATED_DATE IS NOT NULL)
                    OR (D.P_CREATED_DATE IS NOT NULL AND S.P_CREATED_DATE IS NULL)
                    OR
                    (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NOT NULL AND D.LAST_UPDT_BY <> S.LAST_UPDT_BY)
                    OR (D.LAST_UPDT_BY IS NULL AND S.LAST_UPDT_BY IS NOT NULL)
                    OR (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NULL)
                    OR
                    (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NOT NULL AND D.LAST_UPDT_DATE <> S.LAST_UPDT_DATE)
                    OR (D.LAST_UPDT_DATE IS NULL AND S.LAST_UPDT_DATE IS NOT NULL)
                    OR (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NULL)
                ) THEN
UPDATE
    SET D.TRANS_CODE                   = S.TRANS_CODE,
    D.ACT_LOC_CODE                 = S.ACT_LOC_CODE,
    D.PERMIT_EVENT_DATA_OWNER_CODE = S.PERMIT_EVENT_DATA_OWNER_CODE,
    D.PERMIT_EVENT_CODE            = S.PERMIT_EVENT_CODE,
    D.EVENT_AGN_CODE               = S.EVENT_AGN_CODE,
    D.EVENT_SEQ_NUM                = S.EVENT_SEQ_NUM,
    D.ACTL_DATE                    = S.ACTL_DATE,
    D.ORIGINAL_SCHEDULE_DATE       = S.ORIGINAL_SCHEDULE_DATE,
    D.NEW_SCHEDULE_DATE            = S.NEW_SCHEDULE_DATE,
    D.RESP_PERSON_DATA_OWNER_CODE  = S.RESP_PERSON_DATA_OWNER_CODE,
    D.RESP_PERSON_ID               = S.RESP_PERSON_ID,
    D.EVENT_SUBORG_DATA_OWNER_CODE = S.EVENT_SUBORG_DATA_OWNER_CODE,
    D.EVENT_SUBORG_CODE            = S.EVENT_SUBORG_CODE,
    D.SUPP_INFO_TXT                = S.SUPP_INFO_TXT,
    D.CREATED_BY_USERID           = s.CREATED_BY_USERID,
    D.P_CREATED_DATE               = S.P_CREATED_DATE,
    D.LAST_UPDT_BY                 = s.LAST_UPDT_BY,
    D.LAST_UPDT_DATE               = s.LAST_UPDT_DATE
    WHEN NOT MATCHED THEN
INSERT (PRM_SERIES_ID,
TRANS_CODE,
ACT_LOC_CODE,
PERMIT_EVENT_DATA_OWNER_CODE,
PERMIT_EVENT_CODE,
EVENT_AGN_CODE,
EVENT_SEQ_NUM,
ACTL_DATE,
ORIGINAL_SCHEDULE_DATE,
NEW_SCHEDULE_DATE,
RESP_PERSON_DATA_OWNER_CODE,
RESP_PERSON_ID,
EVENT_SUBORG_DATA_OWNER_CODE,
EVENT_SUBORG_CODE,
SUPP_INFO_TXT,
CREATED_BY_USERID,
P_CREATED_DATE,
LAST_UPDT_BY,
LAST_UPDT_DATE)
VALUES (S.WH_PRM_SERIES_ID,
    S.TRANS_CODE,
    S.ACT_LOC_CODE,
    S.PERMIT_EVENT_DATA_OWNER_CODE,
    S.PERMIT_EVENT_CODE,
    S.EVENT_AGN_CODE,
    S.EVENT_SEQ_NUM,
    S.ACTL_DATE,
    S.ORIGINAL_SCHEDULE_DATE,
    S.NEW_SCHEDULE_DATE,
    S.RESP_PERSON_DATA_OWNER_CODE,
    S.RESP_PERSON_ID,
    S.EVENT_SUBORG_DATA_OWNER_CODE,
    S.EVENT_SUBORG_CODE,
    S.SUPP_INFO_TXT,
    s.CREATED_BY_USERID,
    S.P_CREATED_DATE,
    S.LAST_UPDT_BY,
    S.LAST_UPDT_DATE);
IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

SELECT  @ErrorMessage = ERROR_MESSAGE(),
        @ErrorSeverity = ERROR_SEVERITY(),
        @ErrorState = ERROR_STATE()

            IF @localTran = 1 AND XACT_STATE() <> 0
    ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
END
GO

/*************************************************************************************************
** ObjectName: PRM_MERGE_SERIES.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_PRM_SERIES table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  04/24/2020   Windsor     Upgraded to 5.8 -- added ACTIVE_SERIES_IND, CREATED_BY_USERID and
**                           P_CREATED_DATE.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USERID to CREATED_BY_USERID.
**  02/21/2022   Windsor     Updated for new 5.11 columns.
**
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[PRM_MERGE_SERIES] @PRM_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
BEGIN
            SET @localTran = 1
BEGIN TRANSACTION LocalTran
END

BEGIN TRY
MERGE INTO RCRA_PRM_SERIES D
        USING (SELECT *
               FROM ETL_PRM_SERIES_VW
               WHERE PRM_SUBM_ID = @PRM_SUBM_ID) S
        ON (D.PRM_SERIES_ID = S.WH_PRM_SERIES_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.PERMIT_SERIES_SEQ_NUM IS NOT NULL AND S.PERMIT_SERIES_SEQ_NUM IS NOT NULL AND
                        D.PERMIT_SERIES_SEQ_NUM <> S.PERMIT_SERIES_SEQ_NUM)
                    OR (D.PERMIT_SERIES_SEQ_NUM IS NULL AND S.PERMIT_SERIES_SEQ_NUM IS NOT NULL)
                    OR (D.PERMIT_SERIES_SEQ_NUM IS NOT NULL AND S.PERMIT_SERIES_SEQ_NUM IS NULL)
                    OR (D.PERMIT_SERIES_NAME IS NOT NULL AND S.PERMIT_SERIES_NAME IS NOT NULL AND
                        D.PERMIT_SERIES_NAME <> S.PERMIT_SERIES_NAME)
                    OR (D.PERMIT_SERIES_NAME IS NULL AND S.PERMIT_SERIES_NAME IS NOT NULL)
                    OR (D.PERMIT_SERIES_NAME IS NOT NULL AND S.PERMIT_SERIES_NAME IS NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND
                        D.RESP_PERSON_DATA_OWNER_CODE <> S.RESP_PERSON_DATA_OWNER_CODE)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NULL)
                    OR
                    (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NOT NULL AND
                     D.RESP_PERSON_ID <> S.RESP_PERSON_ID)
                    OR (D.RESP_PERSON_ID IS NULL AND S.RESP_PERSON_ID IS NOT NULL)
                    OR (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR
                    (D.ACTIVE_SERIES_IND IS NOT NULL AND S.ACTIVE_SERIES_IND IS NOT NULL AND
                     D.ACTIVE_SERIES_IND <> S.ACTIVE_SERIES_IND)
                    OR (D.ACTIVE_SERIES_IND IS NULL AND S.ACTIVE_SERIES_IND IS NOT NULL)
                    OR (D.ACTIVE_SERIES_IND IS NOT NULL AND S.ACTIVE_SERIES_IND IS NULL)
                    OR
                    (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NOT NULL AND
                     D.CREATED_BY_USERID <> S.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR
                    (D.P_CREATED_DATE IS NOT NULL AND S.P_CREATED_DATE IS NOT NULL AND
                     D.P_CREATED_DATE <> S.P_CREATED_DATE)
                    OR (D.P_CREATED_DATE IS NULL AND S.P_CREATED_DATE IS NOT NULL)
                    OR (D.P_CREATED_DATE IS NOT NULL AND S.P_CREATED_DATE IS NULL)
                    OR
                    (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NOT NULL AND D.LAST_UPDT_BY <> S.LAST_UPDT_BY)
                    OR (D.LAST_UPDT_BY IS NULL AND S.LAST_UPDT_BY IS NOT NULL)
                    OR (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NULL)
                    OR
                    (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NOT NULL AND D.LAST_UPDT_DATE <> S.LAST_UPDT_DATE)
                    OR (D.LAST_UPDT_DATE IS NULL AND S.LAST_UPDT_DATE IS NOT NULL)
                    OR (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NULL)
                ) THEN
UPDATE
    SET D.TRANS_CODE                  = S.TRANS_CODE,
    D.PERMIT_SERIES_SEQ_NUM       = S.PERMIT_SERIES_SEQ_NUM,
    D.PERMIT_SERIES_NAME          = S.PERMIT_SERIES_NAME,
    D.RESP_PERSON_DATA_OWNER_CODE = S.RESP_PERSON_DATA_OWNER_CODE,
    D.RESP_PERSON_ID              = S.RESP_PERSON_ID,
    D.SUPP_INFO_TXT               = S.SUPP_INFO_TXT,
    D.ACTIVE_SERIES_IND           = S.ACTIVE_SERIES_IND,
    D.CREATED_BY_USERID           = S.CREATED_BY_USERID,
    D.P_CREATED_DATE              = S.P_CREATED_DATE,
    D.LAST_UPDT_BY                = s.LAST_UPDT_BY,
    D.LAST_UPDT_DATE              = s.LAST_UPDT_DATE
    WHEN NOT MATCHED THEN
INSERT (PRM_FAC_SUBM_ID,
TRANS_CODE,
PERMIT_SERIES_SEQ_NUM,
PERMIT_SERIES_NAME,
RESP_PERSON_DATA_OWNER_CODE,
RESP_PERSON_ID,
SUPP_INFO_TXT,
ACTIVE_SERIES_IND,
CREATED_BY_USERID,
P_CREATED_DATE,
LAST_UPDT_BY,
LAST_UPDT_DATE)
VALUES (S.WH_PRM_FAC_SUBM_ID,
    S.TRANS_CODE,
    S.PERMIT_SERIES_SEQ_NUM,
    S.PERMIT_SERIES_NAME,
    S.RESP_PERSON_DATA_OWNER_CODE,
    S.RESP_PERSON_ID,
    S.SUPP_INFO_TXT,
    S.ACTIVE_SERIES_IND,
    S.CREATED_BY_USERID,
    S.P_CREATED_DATE,
    S.LAST_UPDT_BY,
    S.LAST_UPDT_DATE);
IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

SELECT @ErrorMessage = ERROR_MESSAGE(),
       @ErrorSeverity = ERROR_SEVERITY(),
       @ErrorState = ERROR_STATE()

           IF @localTran = 1 AND XACT_STATE() <> 0
    ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
END
GO

/*************************************************************************************************
** ObjectName: PRM_MERGE_UNIT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_PRM_UNIT table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  04/24/2020   Windsor     Upgraded to 5.8 -- added ACTIVE_UNIT_IND, CREATED_BY_USERID and
**                           P_CREATED_DATE.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USERID to CREATED_BY_USERID.
**  02/21/2022   Windsor     Updated for new 5.11 columns.
**
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[PRM_MERGE_UNIT] @PRM_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
BEGIN
            SET @localTran = 1
BEGIN TRANSACTION LocalTran
END

BEGIN TRY
MERGE INTO RCRA_PRM_UNIT D
        USING (SELECT *
               FROM ETL_PRM_UNIT_VW
               WHERE PRM_SUBM_ID = @PRM_SUBM_ID) S
        ON (D.PRM_UNIT_ID = S.WH_PRM_UNIT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NOT NULL AND S.PERMIT_UNIT_SEQ_NUM IS NOT NULL AND
                        D.PERMIT_UNIT_SEQ_NUM <> S.PERMIT_UNIT_SEQ_NUM)
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NULL AND S.PERMIT_UNIT_SEQ_NUM IS NOT NULL)
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NOT NULL AND S.PERMIT_UNIT_SEQ_NUM IS NULL)
                    OR
                    (D.PERMIT_UNIT_NAME IS NOT NULL AND S.PERMIT_UNIT_NAME IS NOT NULL AND
                     D.PERMIT_UNIT_NAME <> S.PERMIT_UNIT_NAME)
                    OR (D.PERMIT_UNIT_NAME IS NULL AND S.PERMIT_UNIT_NAME IS NOT NULL)
                    OR (D.PERMIT_UNIT_NAME IS NOT NULL AND S.PERMIT_UNIT_NAME IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR
                    (D.ACTIVE_UNIT_IND IS NOT NULL AND S.ACTIVE_UNIT_IND IS NOT NULL AND
                     D.ACTIVE_UNIT_IND <> S.ACTIVE_UNIT_IND)
                    OR (D.ACTIVE_UNIT_IND IS NULL AND S.ACTIVE_UNIT_IND IS NOT NULL)
                    OR (D.ACTIVE_UNIT_IND IS NOT NULL AND S.ACTIVE_UNIT_IND IS NULL)
                    OR
                    (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NOT NULL AND
                     D.CREATED_BY_USERID <> S.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR
                    (D.P_CREATED_DATE IS NOT NULL AND S.P_CREATED_DATE IS NOT NULL AND
                     D.P_CREATED_DATE <> S.P_CREATED_DATE)
                    OR (D.P_CREATED_DATE IS NULL AND S.P_CREATED_DATE IS NOT NULL)
                    OR (D.P_CREATED_DATE IS NOT NULL AND S.P_CREATED_DATE IS NULL)
                    OR
                    (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NOT NULL AND D.LAST_UPDT_BY <> S.LAST_UPDT_BY)
                    OR (D.LAST_UPDT_BY IS NULL AND S.LAST_UPDT_BY IS NOT NULL)
                    OR (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NULL)
                    OR
                    (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NOT NULL AND D.LAST_UPDT_DATE <> S.LAST_UPDT_DATE)
                    OR (D.LAST_UPDT_DATE IS NULL AND S.LAST_UPDT_DATE IS NOT NULL)
                    OR (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NULL)
                ) THEN
UPDATE
    SET D.TRANS_CODE          = S.TRANS_CODE,
    D.PERMIT_UNIT_SEQ_NUM = S.PERMIT_UNIT_SEQ_NUM,
    D.PERMIT_UNIT_NAME    = S.PERMIT_UNIT_NAME,
    D.SUPP_INFO_TXT       = S.SUPP_INFO_TXT,
    D.ACTIVE_UNIT_IND     = S.ACTIVE_UNIT_IND,
    D.CREATED_BY_USERID   = S.CREATED_BY_USERID,
    D.P_CREATED_DATE      = S.P_CREATED_DATE,
    D.LAST_UPDT_BY        = s.LAST_UPDT_BY,
    D.LAST_UPDT_DATE      = s.LAST_UPDT_DATE
    WHEN NOT MATCHED THEN
INSERT (PRM_FAC_SUBM_ID,
TRANS_CODE,
PERMIT_UNIT_SEQ_NUM,
PERMIT_UNIT_NAME,
SUPP_INFO_TXT,
ACTIVE_UNIT_IND,
CREATED_BY_USERID,
P_CREATED_DATE,
LAST_UPDT_BY,
LAST_UPDT_DATE)
VALUES (S.WH_PRM_FAC_SUBM_ID,
    S.TRANS_CODE,
    S.PERMIT_UNIT_SEQ_NUM,
    S.PERMIT_UNIT_NAME,
    S.SUPP_INFO_TXT,
    S.ACTIVE_UNIT_IND,
    S.CREATED_BY_USERID,
    S.P_CREATED_DATE,
    S.LAST_UPDT_BY,
    S.LAST_UPDT_DATE);
IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

SELECT @ErrorMessage = ERROR_MESSAGE(),
       @ErrorSeverity = ERROR_SEVERITY(),
       @ErrorState = ERROR_STATE()

           IF @localTran = 1 AND XACT_STATE() <> 0
    ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
END
GO

/*************************************************************************************************
** ObjectName: PRM_MERGE_UNIT_DETAIL.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_PRM_UNIT_DETAIL table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  05/31/2019   Windsor     Upgraded to 5.8 -- added CURRENT_UNIT_DETAIL_IND, CREATED_BY_USERID
**                           and P_CREATED_DATE
**  02/14/2021   Windsor     Renamed column CREATED_BY_USERID to CREATED_BY_USERID.
**  02/21/2022   Windsor     Updated for new 5.11 columns.
**
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[PRM_MERGE_UNIT_DETAIL] @PRM_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
BEGIN
            SET @localTran = 1
BEGIN TRANSACTION LocalTran
END

BEGIN TRY
MERGE INTO RCRA_PRM_UNIT_DETAIL D
        USING (SELECT *
               FROM ETL_PRM_UNIT_DETAIL_VW
               WHERE PRM_SUBM_ID = @PRM_SUBM_ID) S
        ON (D.PRM_UNIT_DETAIL_ID = S.WH_PRM_UNIT_DETAIL_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.PERMIT_UNIT_DETAIL_SEQ_NUM IS NOT NULL AND S.PERMIT_UNIT_DETAIL_SEQ_NUM IS NOT NULL AND
                        D.PERMIT_UNIT_DETAIL_SEQ_NUM <> S.PERMIT_UNIT_DETAIL_SEQ_NUM)
                    OR (D.PERMIT_UNIT_DETAIL_SEQ_NUM IS NULL AND S.PERMIT_UNIT_DETAIL_SEQ_NUM IS NOT NULL)
                    OR (D.PERMIT_UNIT_DETAIL_SEQ_NUM IS NOT NULL AND S.PERMIT_UNIT_DETAIL_SEQ_NUM IS NULL)
                    OR (D.PROC_UNIT_DATA_OWNER_CODE IS NOT NULL AND S.PROC_UNIT_DATA_OWNER_CODE IS NOT NULL AND
                        D.PROC_UNIT_DATA_OWNER_CODE <> S.PROC_UNIT_DATA_OWNER_CODE)
                    OR (D.PROC_UNIT_DATA_OWNER_CODE IS NULL AND S.PROC_UNIT_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.PROC_UNIT_DATA_OWNER_CODE IS NOT NULL AND S.PROC_UNIT_DATA_OWNER_CODE IS NULL)
                    OR
                    (D.PROC_UNIT_CODE IS NOT NULL AND S.PROC_UNIT_CODE IS NOT NULL AND
                     D.PROC_UNIT_CODE <> S.PROC_UNIT_CODE)
                    OR (D.PROC_UNIT_CODE IS NULL AND S.PROC_UNIT_CODE IS NOT NULL)
                    OR (D.PROC_UNIT_CODE IS NOT NULL AND S.PROC_UNIT_CODE IS NULL)
                    OR (D.PERMIT_STAT_EFFC_DATE IS NOT NULL AND S.PERMIT_STAT_EFFC_DATE IS NOT NULL AND
                        D.PERMIT_STAT_EFFC_DATE <> S.PERMIT_STAT_EFFC_DATE)
                    OR (D.PERMIT_STAT_EFFC_DATE IS NULL AND S.PERMIT_STAT_EFFC_DATE IS NOT NULL)
                    OR (D.PERMIT_STAT_EFFC_DATE IS NOT NULL AND S.PERMIT_STAT_EFFC_DATE IS NULL)
                    OR (D.PERMIT_UNIT_CAP_QNTY IS NOT NULL AND S.PERMIT_UNIT_CAP_QNTY IS NOT NULL AND
                        D.PERMIT_UNIT_CAP_QNTY <> S.PERMIT_UNIT_CAP_QNTY)
                    OR (D.PERMIT_UNIT_CAP_QNTY IS NULL AND S.PERMIT_UNIT_CAP_QNTY IS NOT NULL)
                    OR (D.PERMIT_UNIT_CAP_QNTY IS NOT NULL AND S.PERMIT_UNIT_CAP_QNTY IS NULL)
                    OR
                    (D.CAP_TYPE_CODE IS NOT NULL AND S.CAP_TYPE_CODE IS NOT NULL AND D.CAP_TYPE_CODE <> S.CAP_TYPE_CODE)
                    OR (D.CAP_TYPE_CODE IS NULL AND S.CAP_TYPE_CODE IS NOT NULL)
                    OR (D.CAP_TYPE_CODE IS NOT NULL AND S.CAP_TYPE_CODE IS NULL)
                    OR
                    (D.COMMER_STAT_CODE IS NOT NULL AND S.COMMER_STAT_CODE IS NOT NULL AND
                     D.COMMER_STAT_CODE <> S.COMMER_STAT_CODE)
                    OR (D.COMMER_STAT_CODE IS NULL AND S.COMMER_STAT_CODE IS NOT NULL)
                    OR (D.COMMER_STAT_CODE IS NOT NULL AND S.COMMER_STAT_CODE IS NULL)
                    OR
                    (D.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NOT NULL AND S.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NOT NULL AND
                     D.LEGAL_OPER_STAT_DATA_OWNER_CDE <> S.LEGAL_OPER_STAT_DATA_OWNER_CDE)
                    OR (D.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NULL AND S.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NOT NULL)
                    OR (D.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NOT NULL AND S.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NULL)
                    OR (D.LEGAL_OPER_STAT_CODE IS NOT NULL AND S.LEGAL_OPER_STAT_CODE IS NOT NULL AND
                        D.LEGAL_OPER_STAT_CODE <> S.LEGAL_OPER_STAT_CODE)
                    OR (D.LEGAL_OPER_STAT_CODE IS NULL AND S.LEGAL_OPER_STAT_CODE IS NOT NULL)
                    OR (D.LEGAL_OPER_STAT_CODE IS NOT NULL AND S.LEGAL_OPER_STAT_CODE IS NULL)
                    OR
                    (D.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NOT NULL AND S.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NOT NULL AND
                     D.MEASUREMENT_UNIT_DATA_OWNR_CDE <> S.MEASUREMENT_UNIT_DATA_OWNR_CDE)
                    OR (D.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NULL AND S.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NOT NULL)
                    OR (D.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NOT NULL AND S.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NULL)
                    OR (D.MEASUREMENT_UNIT_CODE IS NOT NULL AND S.MEASUREMENT_UNIT_CODE IS NOT NULL AND
                        D.MEASUREMENT_UNIT_CODE <> S.MEASUREMENT_UNIT_CODE)
                    OR (D.MEASUREMENT_UNIT_CODE IS NULL AND S.MEASUREMENT_UNIT_CODE IS NOT NULL)
                    OR (D.MEASUREMENT_UNIT_CODE IS NOT NULL AND S.MEASUREMENT_UNIT_CODE IS NULL)
                    OR (D.NUM_OF_UNITS_COUNT IS NOT NULL AND S.NUM_OF_UNITS_COUNT IS NOT NULL AND
                        D.NUM_OF_UNITS_COUNT <> S.NUM_OF_UNITS_COUNT)
                    OR (D.NUM_OF_UNITS_COUNT IS NULL AND S.NUM_OF_UNITS_COUNT IS NOT NULL)
                    OR (D.NUM_OF_UNITS_COUNT IS NOT NULL AND S.NUM_OF_UNITS_COUNT IS NULL)
                    OR (D.STANDARD_PERMIT_IND IS NOT NULL AND S.STANDARD_PERMIT_IND IS NOT NULL AND
                        D.STANDARD_PERMIT_IND <> S.STANDARD_PERMIT_IND)
                    OR (D.STANDARD_PERMIT_IND IS NULL AND S.STANDARD_PERMIT_IND IS NOT NULL)
                    OR (D.STANDARD_PERMIT_IND IS NOT NULL AND S.STANDARD_PERMIT_IND IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR
                    (D.CURRENT_UNIT_DETAIL_IND IS NOT NULL AND S.CURRENT_UNIT_DETAIL_IND IS NOT NULL AND
                     D.CURRENT_UNIT_DETAIL_IND <> S.CURRENT_UNIT_DETAIL_IND)
                    OR (D.CURRENT_UNIT_DETAIL_IND IS NULL AND S.CURRENT_UNIT_DETAIL_IND IS NOT NULL)
                    OR (D.CURRENT_UNIT_DETAIL_IND IS NOT NULL AND S.CURRENT_UNIT_DETAIL_IND IS NULL)
                    OR
                    (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NOT NULL AND
                     D.CREATED_BY_USERID <> S.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR
                    (D.P_CREATED_DATE IS NOT NULL AND S.P_CREATED_DATE IS NOT NULL AND
                     D.P_CREATED_DATE <> S.P_CREATED_DATE)
                    OR (D.P_CREATED_DATE IS NULL AND S.P_CREATED_DATE IS NOT NULL)
                    OR (D.P_CREATED_DATE IS NOT NULL AND S.P_CREATED_DATE IS NULL)
                    OR
                    (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NOT NULL AND D.LAST_UPDT_BY <> S.LAST_UPDT_BY)
                    OR (D.LAST_UPDT_BY IS NULL AND S.LAST_UPDT_BY IS NOT NULL)
                    OR (D.LAST_UPDT_BY IS NOT NULL AND S.LAST_UPDT_BY IS NULL)
                    OR
                    (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NOT NULL AND D.LAST_UPDT_DATE <> S.LAST_UPDT_DATE)
                    OR (D.LAST_UPDT_DATE IS NULL AND S.LAST_UPDT_DATE IS NOT NULL)
                    OR (D.LAST_UPDT_DATE IS NOT NULL AND S.LAST_UPDT_DATE IS NULL)
                ) THEN
UPDATE
    SET D.TRANS_CODE                     = S.TRANS_CODE,
    D.PROC_UNIT_DATA_OWNER_CODE      = S.PROC_UNIT_DATA_OWNER_CODE,
    D.PROC_UNIT_CODE                 = S.PROC_UNIT_CODE,
    D.PERMIT_STAT_EFFC_DATE          = S.PERMIT_STAT_EFFC_DATE,
    D.PERMIT_UNIT_CAP_QNTY           = S.PERMIT_UNIT_CAP_QNTY,
    D.CAP_TYPE_CODE                  = S.CAP_TYPE_CODE,
    D.COMMER_STAT_CODE               = S.COMMER_STAT_CODE,
    D.LEGAL_OPER_STAT_DATA_OWNER_CDE = S.LEGAL_OPER_STAT_DATA_OWNER_CDE,
    D.LEGAL_OPER_STAT_CODE           = S.LEGAL_OPER_STAT_CODE,
    D.MEASUREMENT_UNIT_DATA_OWNR_CDE = S.MEASUREMENT_UNIT_DATA_OWNR_CDE,
    D.MEASUREMENT_UNIT_CODE          = S.MEASUREMENT_UNIT_CODE,
    D.NUM_OF_UNITS_COUNT             = S.NUM_OF_UNITS_COUNT,
    D.STANDARD_PERMIT_IND            = S.STANDARD_PERMIT_IND,
    D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT,
    D.CURRENT_UNIT_DETAIL_IND        = S.CURRENT_UNIT_DETAIL_IND,
    D.CREATED_BY_USERID              = S.CREATED_BY_USERID,
    D.P_CREATED_DATE                 = S.P_CREATED_DATE,
    D.LAST_UPDT_BY                   = s.LAST_UPDT_BY,
    D.LAST_UPDT_DATE                 = s.LAST_UPDT_DATE
    WHEN NOT MATCHED THEN
INSERT (PRM_UNIT_ID,
TRANS_CODE,
PERMIT_UNIT_DETAIL_SEQ_NUM,
PROC_UNIT_DATA_OWNER_CODE,
PROC_UNIT_CODE,
PERMIT_STAT_EFFC_DATE,
PERMIT_UNIT_CAP_QNTY,
CAP_TYPE_CODE,
COMMER_STAT_CODE,
LEGAL_OPER_STAT_DATA_OWNER_CDE,
LEGAL_OPER_STAT_CODE,
MEASUREMENT_UNIT_DATA_OWNR_CDE,
MEASUREMENT_UNIT_CODE,
NUM_OF_UNITS_COUNT,
STANDARD_PERMIT_IND,
SUPP_INFO_TXT,
CURRENT_UNIT_DETAIL_IND,
CREATED_BY_USERID,
P_CREATED_DATE,
LAST_UPDT_BY,
LAST_UPDT_DATE)
VALUES (S.WH_PRM_UNIT_ID,
    S.TRANS_CODE,
    S.PERMIT_UNIT_DETAIL_SEQ_NUM,
    S.PROC_UNIT_DATA_OWNER_CODE,
    S.PROC_UNIT_CODE,
    S.PERMIT_STAT_EFFC_DATE,
    S.PERMIT_UNIT_CAP_QNTY,
    S.CAP_TYPE_CODE,
    S.COMMER_STAT_CODE,
    S.LEGAL_OPER_STAT_DATA_OWNER_CDE,
    S.LEGAL_OPER_STAT_CODE,
    S.MEASUREMENT_UNIT_DATA_OWNR_CDE,
    S.MEASUREMENT_UNIT_CODE,
    S.NUM_OF_UNITS_COUNT,
    S.STANDARD_PERMIT_IND,
    S.SUPP_INFO_TXT,
    S.CURRENT_UNIT_DETAIL_IND,
    S.CREATED_BY_USERID,
    S.P_CREATED_DATE,
    S.LAST_UPDT_BY,
    S.LAST_UPDT_DATE);
IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

SELECT @ErrorMessage = ERROR_MESSAGE(),
       @ErrorSeverity = ERROR_SEVERITY(),
       @ErrorState = ERROR_STATE()

           IF @localTran = 1 AND XACT_STATE() <> 0
    ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
END
GO

create procedure dbo.RCRA_PROCESSOR @type varchar(10) as
begin
exec dbo.RCRA_MERGE_DATA @DeleteStaging=0;
end;
go
