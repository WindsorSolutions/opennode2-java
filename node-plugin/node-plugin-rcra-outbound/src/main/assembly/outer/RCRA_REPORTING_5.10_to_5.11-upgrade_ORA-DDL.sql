/*
Copyright (c) 2016, The Environmental Council of the States (ECOS)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

 * Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
 * Neither the name of the ECOS nor the names of its contributors may
   be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE ;ODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
*/

/*****************************************************************************************************************************
 *
 *  Script Name:  RCRA_5.10_to_5.11-upgrade_ORA-DDL.sql
 *
 *  Company:  Windsor Solutions, Inc.
 *
 *  Purpose:  This DDL script will update the Oracle RCRA v5.10 database objects to support the RCRA v5.11 data flow.
 *
 *  Maintenance:
 *
 *    Analyst         Date            Comment
 *    ----------      ----------      ------------------------------------------------------------------------------
 *    Windsor         12/02/2021      Created
 *
 ****************************************************************************************************************************
 */

ALTER TABLE RCRA_CA_AREA
    ADD LAST_UPDT_BY VARCHAR2(255) NULL;

ALTER TABLE RCRA_CA_AREA
    ADD LAST_UPDT_DATE DATE NULL;

ALTER TABLE RCRA_CA_AUTHORITY
    ADD LAST_UPDT_BY VARCHAR2(255) NULL;

ALTER TABLE RCRA_CA_AUTHORITY
    ADD LAST_UPDT_DATE DATE NULL;

ALTER TABLE RCRA_CA_EVENT
    ADD LAST_UPDT_BY VARCHAR2(255) NULL;

ALTER TABLE RCRA_CA_EVENT
    ADD LAST_UPDT_DATE DATE NULL;

ALTER TABLE RCRA_CME_ENFRC_ACT
    ADD LAST_UPDT_BY VARCHAR2(255) NULL;

ALTER TABLE RCRA_CME_ENFRC_ACT
    ADD LAST_UPDT_DATE DATE NULL;

ALTER TABLE RCRA_CME_EVAL
    ADD LAST_UPDT_BY VARCHAR2(255) NULL;

ALTER TABLE RCRA_CME_EVAL
    ADD LAST_UPDT_DATE DATE NULL;

ALTER TABLE RCRA_CME_VIOL
    ADD LAST_UPDT_BY VARCHAR2(255) NULL;

ALTER TABLE RCRA_CME_VIOL
    ADD LAST_UPDT_DATE DATE NULL;

ALTER TABLE RCRA_EM_EMANIFEST
    MODIFY CREATED_DATE DATE NULL;

ALTER TABLE RCRA_EM_EMANIFEST
    MODIFY MAN_TRACKING_NUM VARCHAR2(12) NULL;

ALTER TABLE RCRA_EM_EMANIFEST
    MODIFY "STATUS" VARCHAR2(17) NULL;

ALTER TABLE RCRA_EM_EMANIFEST
    MODIFY ORIGIN_TYPE VARCHAR2(7) NULL;

ALTER TABLE RCRA_EM_EMANIFEST
    MODIFY REJ_IND CHAR(1) NULL;

ALTER TABLE RCRA_EM_EMANIFEST
    MODIFY DISCREPANCY_IND CHAR(1) NULL;

ALTER TABLE RCRA_EM_EMANIFEST
    MODIFY IMP_IND CHAR(1) NULL;

ALTER TABLE RCRA_EM_EMANIFEST
    MODIFY RESIDUE_IND CHAR(1) NULL;

ALTER TABLE RCRA_EM_HANDLER
    MODIFY SITE_TYPE VARCHAR2(11) NULL;

ALTER TABLE RCRA_EM_HANDLER
    MODIFY MANIFEST_NAME VARCHAR2(80) NULL;

ALTER TABLE RCRA_EM_HANDLER
    MODIFY MANIFEST_HANDLER_TYPE VARCHAR2(40) NULL;

ALTER TABLE RCRA_EM_WASTE
    MODIFY DOT_HAZ_IND CHAR(1) NULL;

ALTER TABLE RCRA_EM_WASTE
    MODIFY PCB_IND CHAR(1) NULL;

ALTER TABLE RCRA_EM_WASTE
    MODIFY LINE_NUM INT NULL;

ALTER TABLE RCRA_FA_COST_EST
    ADD UPDATE_DUE_DATE DATE NULL;

ALTER TABLE RCRA_FA_COST_EST
    ADD CURRENT_COST_ESTIMATE_IND CHAR(1) NULL;

ALTER TABLE RCRA_FA_COST_EST
    ADD LAST_UPDT_BY VARCHAR2(255) NULL;

ALTER TABLE RCRA_FA_COST_EST
    ADD LAST_UPDT_DATE DATE NULL;

ALTER TABLE RCRA_FA_MECHANISM
    ADD PROVIDER_CONTACT_EMAIL VARCHAR2(80) NULL;

ALTER TABLE RCRA_FA_MECHANISM
    ADD ACTIVE_MECHANISM_IND CHAR(1) NULL;

ALTER TABLE RCRA_FA_MECHANISM
    ADD LAST_UPDT_BY VARCHAR2(255) NULL;

ALTER TABLE RCRA_FA_MECHANISM
    ADD LAST_UPDT_DATE DATE NULL;

ALTER TABLE RCRA_FA_MECHANISM_DETAIL
    ADD FAC_FACE_VAL_AMOUNT DECIMAL(14,6) NULL;

ALTER TABLE RCRA_FA_MECHANISM_DETAIL
    ADD ALT_IND CHAR(1) NULL;

ALTER TABLE RCRA_FA_MECHANISM_DETAIL
    ADD LAST_UPDT_BY VARCHAR2(255) NULL;

ALTER TABLE RCRA_FA_MECHANISM_DETAIL
    ADD LAST_UPDT_DATE DATE NULL;

ALTER TABLE RCRA_GIS_GEO_INFORMATION
    ADD LAST_UPDT_BY VARCHAR2(255) NULL;

ALTER TABLE RCRA_GIS_GEO_INFORMATION
    ADD LAST_UPDT_DATE DATE NULL;

ALTER TABLE RCRA_HD_HANDLER
    ADD LAST_UPDT_BY VARCHAR2(255) NULL;

ALTER TABLE RCRA_HD_HANDLER
    ADD LAST_UPDT_DATE DATE NULL;

ALTER TABLE RCRA_HD_HANDLER
    ADD BR_EXEMPT_IND CHAR(1) NULL;

ALTER TABLE RCRA_PRM_EVENT
    ADD LAST_UPDT_BY VARCHAR2(255) NULL;

ALTER TABLE RCRA_PRM_EVENT
    ADD LAST_UPDT_DATE DATE NULL;

ALTER TABLE RCRA_PRM_SERIES
    ADD LAST_UPDT_BY VARCHAR2(255) NULL;

ALTER TABLE RCRA_PRM_SERIES
    ADD LAST_UPDT_DATE DATE NULL;

ALTER TABLE RCRA_PRM_UNIT
    ADD LAST_UPDT_BY VARCHAR2(255) NULL;

ALTER TABLE RCRA_PRM_UNIT
    ADD LAST_UPDT_DATE DATE NULL;

ALTER TABLE RCRA_PRM_UNIT_DETAIL
    ADD LAST_UPDT_BY VARCHAR2(255) NULL;

ALTER TABLE RCRA_PRM_UNIT_DETAIL
    ADD LAST_UPDT_DATE DATE NULL;

create or replace view ETL_CA_AREA_VW as
(
SELECT WH.CA_AREA_ID WH_CA_AREA_ID,
       ETL.WH_CA_FAC_SUBM_ID,
       ETL.CA_SUBM_ID,
       NODE."CA_AREA_ID",
       NODE."CA_FAC_SUBM_ID",
       NODE."TRANS_CODE",
       NODE."AREA_SEQ_NUM",
       NODE."FAC_WIDE_IND",
       NODE."AREA_NAME",
       NODE."AIR_REL_IND",
       NODE."GROUNDWATER_REL_IND",
       NODE."SOIL_REL_IND",
       NODE."SURFACE_WATER_REL_IND",
       NODE."REGULATED_UNIT_IND",
       NODE."EPA_RESP_PERSON_DATA_OWNER_CDE",
       NODE."EPA_RESP_PERSON_ID",
       NODE."STA_RESP_PERSON_DATA_OWNER_CDE",
       NODE."STA_RESP_PERSON_ID",
       NODE."SUPP_INFO_TXT",
       NODE."CREATED_BY_USERID",
       NODE."A_CREATED_DATE",
       NODE."DATA_ORIG",
       NODE."LAST_UPDT_BY",
       NODE."LAST_UPDT_DATE"
FROM NODE_RCRA_CA_AREA NODE
         INNER JOIN ETL_CA_FAC_SUBM_VW ETL ON ETL.CA_FAC_SUBM_ID = NODE.CA_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_CA_AREA WH ON WH.CA_FAC_SUBM_ID = ETL.WH_CA_FAC_SUBM_ID
    AND WH.AREA_SEQ_NUM = NODE.AREA_SEQ_NUM
    )
/

create or replace view ETL_CA_AUTHORITY_VW as
(
SELECT WH.CA_AUTHORITY_ID WH_CA_AUTHORITY_ID,
       ETL.WH_CA_FAC_SUBM_ID,
       ETL.CA_SUBM_ID,
       NODE."CA_AUTHORITY_ID",
       NODE."CA_FAC_SUBM_ID",
       NODE."TRANS_CODE",
       NODE."ACT_LOC_CODE",
       NODE."AUTHORITY_DATA_OWNER_CODE",
       NODE."AUTHORITY_TYPE_CODE",
       NODE."AUTHORITY_AGN_CODE",
       NODE."AUTHORITY_EFFC_DATE",
       NODE."ISSUE_DATE",
       NODE."END_DATE",
       NODE."ESTABLISHED_REPOSITORY_CODE",
       NODE."RESP_LEAD_PROG_IDEN",
       NODE."AUTHORITY_SUBORG_DATA_OWNR_CDE",
       NODE."AUTHORITY_SUBORG_CODE",
       NODE."RESP_PERSON_DATA_OWNER_CODE",
       NODE."RESP_PERSON_ID",
       NODE."SUPP_INFO_TXT",
       NODE."CREATED_BY_USERID",
       NODE."A_CREATED_DATE",
       NODE."DATA_ORIG",
       NODE."LAST_UPDT_BY",
       NODE."LAST_UPDT_DATE"
FROM NODE_RCRA_CA_AUTHORITY NODE
         INNER JOIN ETL_CA_FAC_SUBM_VW ETL ON ETL.CA_FAC_SUBM_ID = NODE.CA_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_CA_AUTHORITY WH ON WH.CA_FAC_SUBM_ID = ETL.WH_CA_FAC_SUBM_ID
    AND WH.ACT_LOC_CODE = NODE.ACT_LOC_CODE
    AND WH.AUTHORITY_AGN_CODE = NODE.AUTHORITY_AGN_CODE
    AND WH.AUTHORITY_EFFC_DATE = NODE.AUTHORITY_EFFC_DATE
    AND WH.AUTHORITY_DATA_OWNER_CODE = NODE.AUTHORITY_DATA_OWNER_CODE
    AND WH.AUTHORITY_TYPE_CODE = NODE.AUTHORITY_TYPE_CODE
    )
/

create or replace view ETL_CA_EVENT_VW as
(
SELECT WH.CA_EVENT_ID WH_CA_EVENT_ID,
       ETL.WH_CA_FAC_SUBM_ID,
       ETL.CA_SUBM_ID,
       NODE."CA_EVENT_ID",
       NODE."CA_FAC_SUBM_ID",
       NODE."TRANS_CODE",
       NODE."ACT_LOC_CODE",
       NODE."CORCT_ACT_EVENT_DATA_OWNER_CDE",
       NODE."CORCT_ACT_EVENT_CODE",
       NODE."EVENT_AGN_CODE",
       NODE."EVENT_SEQ_NUM",
       NODE."ACTL_DATE",
       NODE."ORIGINAL_SCHEDULE_DATE",
       NODE."NEW_SCHEDULE_DATE",
       NODE."EVENT_SUBORG_DATA_OWNER_CODE",
       NODE."EVENT_SUBORG_CODE",
       NODE."RESP_PERSON_DATA_OWNER_CODE",
       NODE."RESP_PERSON_ID",
       NODE."SUPP_INFO_TXT",
       NODE."PUBLIC_SUPP_INFO_TXT",
       NODE."CREATED_BY_USERID",
       NODE."A_CREATED_DATE",
       NODE."DATA_ORIG",
       NODE."LAST_UPDT_BY",
       NODE."LAST_UPDT_DATE"
FROM NODE_RCRA_CA_EVENT NODE
         INNER JOIN ETL_CA_FAC_SUBM_VW ETL ON ETL.CA_FAC_SUBM_ID = NODE.CA_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_CA_EVENT WH ON WH.CA_FAC_SUBM_ID = ETL.WH_CA_FAC_SUBM_ID
    AND WH.EVENT_SEQ_NUM = NODE.EVENT_SEQ_NUM
    AND WH.EVENT_AGN_CODE = NODE.EVENT_AGN_CODE
    AND WH.CORCT_ACT_EVENT_CODE = NODE.CORCT_ACT_EVENT_CODE
    )
/

create or replace view ETL_CME_ENFRC_ACT_VW as
(
SELECT WH.CME_ENFRC_ACT_ID WH_CME_ENFR_ACT_ID,
       ETL.WH_CME_FAC_SUBM_ID,
       ETL.CME_SUBM_ID,
       NODE."CME_ENFRC_ACT_ID",
       NODE."CME_FAC_SUBM_ID",
       NODE."TRANS_CODE",
       NODE."ENFRC_AGN_LOC_NAME",
       NODE."ENFRC_ACT_IDEN",
       NODE."ENFRC_ACT_DATE",
       NODE."ENFRC_AGN_NAME",
       NODE."ENFRC_DOCKET_NUM",
       NODE."ENFRC_ATTRY",
       NODE."CORCT_ACT_COMPT",
       NODE."CNST_AGMT_FINAL_ORDER_SEQ_NUM",
       NODE."APPEAL_INIT_DATE",
       NODE."APPEAL_RSLN_DATE",
       NODE."DISP_STAT_DATE",
       NODE."DISP_STAT_OWNER",
       NODE."DISP_STAT",
       NODE."ENFRC_OWNER",
       NODE."ENFRC_TYPE",
       NODE."ENFRC_RESP_PERSON_OWNER",
       NODE."ENFRC_RESP_PERSON_IDEN",
       NODE."ENFRC_RESP_SUBORG_OWNER",
       NODE."ENFRC_RESP_SUBORG",
       NODE."NOTES",
       NODE."FA_REQUIRED",
       NODE."CREATED_BY_USERID",
       NODE."C_CREATED_DATE",
       NODE."DATA_ORIG",
       NODE."LAST_UPDT_BY",
       NODE."LAST_UPDT_DATE"
FROM NODE_RCRA_CME_ENFRC_ACT NODE
         INNER JOIN ETL_CME_FAC_SUBM_VW ETL ON ETL.CME_FAC_SUBM_ID = NODE.CME_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_CME_ENFRC_ACT WH ON WH.CME_FAC_SUBM_ID = ETL.WH_CME_FAC_SUBM_ID
    AND WH.ENFRC_ACT_IDEN = NODE.ENFRC_ACT_IDEN
    AND WH.ENFRC_ACT_DATE = NODE.ENFRC_ACT_DATE
    AND WH.ENFRC_AGN_NAME = NODE.ENFRC_AGN_NAME
    )
/

create or replace view ETL_CME_EVAL_VW as
(
SELECT WH.CME_EVAL_ID WH_CME_EVAL_ID,
       ETL.WH_CME_FAC_SUBM_ID,
       ETL.CME_SUBM_ID,
       NODE."CME_EVAL_ID",
       NODE."CME_FAC_SUBM_ID",
       NODE."TRANS_CODE",
       NODE."EVAL_ACT_LOC",
       NODE."EVAL_IDEN",
       NODE."EVAL_START_DATE",
       NODE."EVAL_RESP_AGN",
       NODE."DAY_ZERO",
       NODE."FOUND_VIOL",
       NODE."CTZN_CPLT_IND",
       NODE."MULTIMEDIA_IND",
       NODE."SAMPL_IND",
       NODE."NOT_SUBTL_C_IND",
       NODE."EVAL_TYPE_OWNER",
       NODE."EVAL_TYPE",
       NODE."FOCUS_AREA_OWNER",
       NODE."FOCUS_AREA",
       NODE."EVAL_RESP_PERSON_IDEN_OWNER",
       NODE."EVAL_RESP_PERSON_IDEN",
       NODE."EVAL_RESP_SUBORG_OWNER",
       NODE."EVAL_RESP_SUBORG",
       NODE."NOTES",
       NODE."NOC_DATE",
       NODE."CREATED_BY_USERID",
       NODE."C_CREATED_DATE",
       NODE."DATA_ORIG",
       NODE."LAST_UPDT_BY",
       NODE."LAST_UPDT_DATE"
FROM NODE_RCRA_CME_EVAL NODE
         JOIN ETL_CME_FAC_SUBM_VW ETL ON ETL.CME_FAC_SUBM_ID = NODE.CME_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_CME_EVAL WH ON WH.CME_FAC_SUBM_ID = ETL.WH_CME_FAC_SUBM_ID
    AND WH.EVAL_ACT_LOC = NODE.EVAL_ACT_LOC
    AND WH.EVAL_IDEN = NODE.EVAL_IDEN
    AND WH.EVAL_RESP_AGN = NODE.EVAL_RESP_AGN
    AND WH.EVAL_START_DATE = NODE.EVAL_START_DATE
    )
/

create or replace view ETL_CME_VIOL_VW as
(
SELECT WH.CME_VIOL_ID WH_CME_VIOL_ID,
       ETL.WH_CME_FAC_SUBM_ID,
       ETL.CME_SUBM_ID,
       NODE."CME_VIOL_ID",
       NODE."CME_FAC_SUBM_ID",
       NODE."TRANS_CODE",
       NODE."VIOL_ACT_LOC",
       NODE."VIOL_SEQ_NUM",
       NODE."AGN_WHICH_DTRM_VIOL",
       NODE."VIOL_TYPE_OWNER",
       NODE."VIOL_TYPE",
       NODE."FORMER_CITATION_NAME",
       NODE."VIOL_DTRM_DATE",
       NODE."RTN_COMPL_ACTL_DATE",
       NODE."RTN_TO_COMPL_QUAL",
       NODE."VIOL_RESP_AGN",
       NODE."NOTES",
       NODE."CREATED_BY_USERID",
       NODE."C_CREATED_DATE",
       NODE."LAST_UPDT_BY",
       NODE."LAST_UPDT_DATE"
FROM NODE_RCRA_CME_VIOL NODE
         JOIN ETL_CME_FAC_SUBM_VW ETL ON ETL.CME_FAC_SUBM_ID = NODE.CME_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_CME_VIOL WH ON WH.CME_FAC_SUBM_ID = ETL.WH_CME_FAC_SUBM_ID
    AND WH.VIOL_SEQ_NUM = NODE.VIOL_SEQ_NUM
    AND WH.VIOL_ACT_LOC = NODE.VIOL_ACT_LOC
    AND WH.AGN_WHICH_DTRM_VIOL = NODE.AGN_WHICH_DTRM_VIOL
    )
/

create or replace view ETL_EM_EMANIFEST_VW as
(
SELECT WH.EM_EMANIFEST_ID WH_EM_EMANIFEST_ID,
       NODE."EM_EMANIFEST_ID",
       NODE."EM_SUBM_ID",
       NODE."CREATED_DATE",
       NODE."UPDATED_DATE",
       NODE."MAN_TRACKING_NUM",
       NODE."STATUS",
       NODE."PUBLIC_IND",
       NODE."SUBM_TYPE",
       NODE."SIGN_STATUS_IND",
       NODE."ORIGIN_TYPE",
       NODE."SHIPPED_DATE",
       NODE."RECEIVED_DATE",
       NODE."CERT_DATE",
       NODE."REJ_IND",
       NODE."DISCREPANCY_IND",
       NODE."RESIDUE_IND",
       NODE."IMP_IND",
       NODE."CONT_PREV_REJ_RES_IND",
       NODE."CERT_BY_FIRST_NAME",
       NODE."CERT_BY_LAST_NAME",
       NODE."CERT_BY_USER_ID",
       NODE."REJ_TRANS_ON_SITE_IND",
       NODE."REJ_TYPE",
       NODE."REJ_ALT_DES_FAC_TYPE",
       NODE."REJ_COMMENTS",
       NODE."REJ_GEN_PS_NAME",
       NODE."REJ_GEN_PS_DATE",
       NODE."REJ_GEN_ES_SIGN_DATE",
       NODE."REJ_GEN_ES_CROMERR_ACT_ID",
       NODE."REJ_GEN_ES_CROMERR_DOC_ID",
       NODE."REJ_GEN_ES_SIGNER_FIRST_NAME",
       NODE."REJ_GEN_ES_SIGNER_LAST_NAME",
       NODE."REJ_GEN_ES_SIGNER_USER_ID",
       NODE."REJ_GEN_ES_DOC_NAME",
       NODE."REJ_GEN_ES_DOC_SIZE",
       NODE."REJ_GEN_ES_DOC_MIME_TYPE",
       NODE."IMP_GEN_NAME",
       NODE."IMP_GEN_ADDRESS",
       NODE."IMP_GEN_CITY",
       NODE."IMP_GEN_POSTAL_CODE",
       NODE."IMP_GEN_PROVINCE",
       NODE."IMP_GEN_CNTRY_CODE",
       NODE."IMP_GEN_CNTRY_NAME",
       NODE."IMP_PORT_CITY",
       NODE."IMP_PORT_STATE_CODE",
       NODE."IMP_PORT_STATE_NAME",
       NODE."PRINTED_DOC_NAME",
       NODE."PRINTED_DOC_SIZE",
       NODE."PRINTED_DOC_MIME_TYPE",
       NODE."FORM_DOC_NAME",
       NODE."FORM_DOC_SIZE",
       NODE."FORM_DOC_MIME_TYPE",
       NODE."ADD_INFO_NEW_MAN_DEST",
       NODE."ADD_INFO_CONSENT_NUM",
       NODE."ADD_INFO_HAND_INSTR",
       NODE."CORR_VERSION_NUM",
       NODE."CORR_ACTIVE_IND",
       NODE."CORR_EPA_SITE_ID",
       NODE."CORR_ES_SIGN_DATE",
       NODE."CORR_ES_CROMERR_ACT_ID",
       NODE."CORR_ES_CROMERR_DOC_ID",
       NODE."CORR_ES_SIGNER_FIRST_NAME",
       NODE."CORR_ES_SIGNER_LAST_NAME",
       NODE."CORR_ES_SIGNER_USER_ID",
       NODE."CORR_ES_DOC_NAME",
       NODE."CORR_ES_DOC_SIZE",
       NODE."CORR_ES_DOC_MIME_TYPE"
FROM NODE_RCRA_EM_EMANIFEST NODE
         LEFT OUTER JOIN RCRA_EM_EMANIFEST WH ON WH.MAN_TRACKING_NUM = NODE.MAN_TRACKING_NUM
    AND ((WH.CORR_VERSION_NUM = NODE.CORR_VERSION_NUM) OR
         (WH.CORR_VERSION_NUM IS NULL AND NODE.CORR_VERSION_NUM IS NULL))
    )
/

create or replace view ETL_EM_HANDLER_VW as
(
SELECT ETL.WH_EM_EMANIFEST_ID,
       ETL.EM_SUBM_ID,
       NODE."EM_HANDLER_ID",
       NODE."EM_EMANIFEST_ID",
       NODE."SITE_TYPE",
       NODE."EPA_SITE_ID",
       NODE."MANIFEST_NAME",
       NODE."ORDER_NUM",
       NODE."REG_IND",
       NODE."MOD_IND",
       NODE."MANIFEST_HANDLER_TYPE",
       NODE."MAIL_STREET_NUM",
       NODE."MAIL_STREET1",
       NODE."MAIL_STREET2",
       NODE."MAIL_CITY",
       NODE."MAIL_ZIP",
       NODE."MAIL_CNTRY_CODE",
       NODE."MAIL_CNTRY_NAME",
       NODE."MAIL_STATE_CODE",
       NODE."MAIL_STATE_NAME",
       NODE."SITE_STREET_NUM",
       NODE."SITE_STREET1",
       NODE."SITE_STREET2",
       NODE."SITE_CITY",
       NODE."SITE_ZIP",
       NODE."SITE_CNTRY_CODE",
       NODE."SITE_CNTRY_NAME",
       NODE."SITE_STATE_CODE",
       NODE."SITE_STATE_NAME",
       NODE."CONTACT_FIRST_NAME",
       NODE."CONTACT_MIDDLE_INITIAL",
       NODE."CONTACT_LAST_NAME",
       NODE."CONTACT_EMAIL",
       NODE."CONTACT_COMPANY_NAME",
       NODE."CONTACT_PHONE_NUM",
       NODE."CONTACT_PHONE_EXT",
       NODE."EMERG_PHONE_NUM",
       NODE."EMERG_PHONE_EXT",
       NODE."PS_NAME",
       NODE."PS_DATE",
       NODE."ES_SIGN_DATE",
       NODE."ES_CROMERR_ACT_ID",
       NODE."ES_CROMERR_DOC_ID",
       NODE."ES_SIGNER_FIRST_NAME",
       NODE."ES_SIGNER_LAST_NAME",
       NODE."ES_SIGNER_USER_ID",
       NODE."ES_DOC_NAME",
       NODE."ES_DOC_SIZE",
       NODE."ES_DOC_MIME_TYPE"
FROM NODE_RCRA_EM_HANDLER NODE
         INNER JOIN ETL_EM_EMANIFEST_VW ETL ON ETL.EM_EMANIFEST_ID = NODE.EM_EMANIFEST_ID
    )
/

create or replace view ETL_EM_WASTE_VW as
(
SELECT WH.EM_WASTE_ID WH_EM_WASTE_ID,
       ETL.WH_EM_EMANIFEST_ID,
       ETL.EM_SUBM_ID,
       NODE."EM_WASTE_ID",
       NODE."EM_EMANIFEST_ID",
       NODE."DOT_HAZ_IND",
       NODE."WASTES_DESC",
       NODE."BR_IND",
       NODE."PCB_IND",
       NODE."LINE_NUM",
       NODE."EPA_WASTE_IND",
       NODE."DOT_ID_NUM",
       NODE."DOT_PRINTED_INFO",
       NODE."QNT_CONT_NUM",
       NODE."QNT_VAL",
       NODE."QNT_CONT_TYPE_CODE",
       NODE."QNT_CONT_TYPE_DESC",
       NODE."QNT_UOM_CODE",
       NODE."QNT_UOM_DESC",
       NODE."BR_DENSITY",
       NODE."BR_DENSITY_UOM_CODE",
       NODE."BR_DENSITY_UOM_DESC",
       NODE."BR_FORM_CODE",
       NODE."BR_FORM_DESC",
       NODE."BR_SRC_CODE",
       NODE."BR_SRC_DESC",
       NODE."BR_WM_CODE",
       NODE."BR_WM_DESC",
       NODE."DISC_WASTE_QTY_IND",
       NODE."DISC_WASTE_TYPE_IND",
       NODE."DISC_COMMENTS",
       NODE."DISC_RESIDUE_IND",
       NODE."DISC_RESIDUE_COMMENTS",
       NODE."MGMT_METHOD_CODE",
       NODE."MGMT_METHOD_DESC",
       NODE."ADD_INFO_NEW_MAN_DEST",
       NODE."ADD_INFO_CONSENT_NUM",
       NODE."ADD_INFO_HAND_INSTR"
FROM NODE_RCRA_EM_WASTE NODE
         INNER JOIN ETL_EM_EMANIFEST_VW ETL ON ETL.EM_EMANIFEST_ID = NODE.EM_EMANIFEST_ID
         LEFT OUTER JOIN RCRA_EM_WASTE WH ON WH.EM_EMANIFEST_ID = ETL.WH_EM_EMANIFEST_ID
    AND WH.LINE_NUM = NODE.LINE_NUM
    )
/

create or replace view ETL_FA_COST_EST_VW as
(
SELECT WH.FA_COST_EST_ID WH_FA_COST_EST_ID,
       ETL.WH_FA_FAC_SUBM_ID,
       ETL.FA_SUBM_ID,
       NODE."FA_COST_EST_ID",
       NODE."FA_FAC_SUBM_ID",
       NODE."TRANS_CODE",
       NODE."ACT_LOC_CODE",
       NODE."COST_ESTIMATE_TYPE_CODE",
       NODE."COST_ESTIMATE_AGN_CODE",
       NODE."COST_ESTIMATE_SEQ_NUM",
       NODE."RESP_PERSON_DATA_OWNER_CODE",
       NODE."RESP_PERSON_ID",
       NODE."COST_ESTIMATE_AMOUNT",
       NODE."COST_ESTIMATE_DATE",
       NODE."COST_ESTIMATE_RSN_CODE",
       NODE."AREA_UNIT_NOTES_TXT",
       NODE."SUPP_INFO_TXT",
       NODE."CREATED_BY_USERID",
       NODE."F_CREATED_DATE",
       NODE."DATA_ORIG",
       NODE."UPDATE_DUE_DATE",
       NODE."CURRENT_COST_ESTIMATE_IND",
       NODE."LAST_UPDT_BY",
       NODE."LAST_UPDT_DATE"
FROM NODE_RCRA_FA_COST_EST NODE
         INNER JOIN ETL_FA_FAC_SUBM_VW ETL ON ETL.FA_FAC_SUBM_ID = NODE.FA_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_FA_COST_EST WH
                         ON WH.FA_FAC_SUBM_ID = ETL.WH_FA_FAC_SUBM_ID
                             AND WH.ACT_LOC_CODE = NODE.ACT_LOC_CODE
                             AND WH.COST_ESTIMATE_TYPE_CODE = NODE.COST_ESTIMATE_TYPE_CODE
                             AND WH.COST_ESTIMATE_AGN_CODE = NODE.COST_ESTIMATE_AGN_CODE
                             AND WH.COST_ESTIMATE_SEQ_NUM = NODE.COST_ESTIMATE_SEQ_NUM
    )
/

create or replace view ETL_FA_MECHANISM_VW as
(
SELECT WH.FA_MECHANISM_ID WH_FA_MECHANISM_ID,
       ETL.WH_FA_FAC_SUBM_ID,
       ETL.FA_SUBM_ID,
       NODE."FA_MECHANISM_ID",
       NODE."FA_FAC_SUBM_ID",
       NODE."TRANS_CODE",
       NODE."ACT_LOC_CODE",
       NODE."MECHANISM_AGN_CODE",
       NODE."MECHANISM_SEQ_NUM",
       NODE."MECHANISM_TYPE_DATA_OWNER_CODE",
       NODE."MECHANISM_TYPE_CODE",
       NODE."PROVIDER_TXT",
       NODE."PROVIDER_FULL_CONTACT_NAME",
       NODE."TELE_NUM_TXT",
       NODE."SUPP_INFO_TXT",
       NODE."CREATED_BY_USERID",
       NODE."F_CREATED_DATE",
       NODE."DATA_ORIG",
       NODE."PROVIDER_CONTACT_EMAIL",
       NODE."ACTIVE_MECHANISM_IND",
       NODE."LAST_UPDT_BY",
       NODE."LAST_UPDT_DATE"
FROM NODE_RCRA_FA_MECHANISM NODE
         INNER JOIN ETL_FA_FAC_SUBM_VW ETL ON ETL.FA_FAC_SUBM_ID = NODE.FA_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_FA_MECHANISM WH ON WH.FA_FAC_SUBM_ID = ETL.WH_FA_FAC_SUBM_ID
    AND WH.MECHANISM_SEQ_NUM = NODE.MECHANISM_SEQ_NUM
    AND WH.MECHANISM_AGN_CODE = NODE.MECHANISM_AGN_CODE
    )
/

create or replace view ETL_FA_MECHANISM_DETAIL_VW as
(
SELECT WH.FA_MECHANISM_DETAIL_ID WH_FA_MECHANISM_DETAIL_ID,
       ETL.WH_FA_MECHANISM_ID,
       ETL.FA_SUBM_ID,
       NODE."FA_MECHANISM_DETAIL_ID",
       NODE."FA_MECHANISM_ID",
       NODE."TRANS_CODE",
       NODE."MECHANISM_DETAIL_SEQ_NUM",
       NODE."MECHANISM_IDEN_TXT",
       NODE."FACE_VAL_AMOUNT",
       NODE."EFFC_DATE",
       NODE."EXPIRATION_DATE",
       NODE."SUPP_INFO_TXT",
       NODE."CURRENT_MECHANISM_DETAIL_IND",
       NODE."CREATED_BY_USERID",
       NODE."F_CREATED_DATE",
       NODE."DATA_ORIG",
       NODE."FAC_FACE_VAL_AMOUNT",
       NODE."ALT_IND",
       NODE."LAST_UPDT_BY",
       NODE."LAST_UPDT_DATE"
FROM NODE_RCRA_FA_MECHANISM_DETAIL NODE
         INNER JOIN ETL_FA_MECHANISM_VW ETL ON ETL.FA_MECHANISM_ID = NODE.FA_MECHANISM_ID
         LEFT OUTER JOIN RCRA_FA_MECHANISM_DETAIL WH ON WH.FA_MECHANISM_ID = ETL.WH_FA_MECHANISM_ID
    AND WH.MECHANISM_DETAIL_SEQ_NUM = NODE.MECHANISM_DETAIL_SEQ_NUM
    )
/

create or replace view ETL_GIS_GEO_INFORMATION_VW as
(
SELECT WH.GIS_GEO_INFORMATION_ID WH_GIS_GEO_INFORMATION_ID,
       ETL.WH_GIS_FAC_SUBM_ID,
       ETL.GIS_SUBM_ID,
       NODE."GIS_GEO_INFORMATION_ID",
       NODE."GIS_FAC_SUBM_ID",
       NODE."TRANS_CODE",
       NODE."GEO_INFO_OWNER",
       NODE."GEO_INFO_SEQ_NUM",
       NODE."PERMIT_UNIT_SEQ_NUM",
       NODE."AREA_SEQ_NUM",
       NODE."LOC_COMM_TXT",
       NODE."AREA_ACREAGE_MEAS",
       NODE."AREA_MEAS_SRC_DATA_OWNER_CODE",
       NODE."AREA_MEAS_SRC_CODE",
       NODE."AREA_MEAS_DATE",
       NODE."DATA_COLL_DATE",
       NODE."HORZ_ACC_MEAS",
       NODE."SRC_MAP_SCALE_NUM",
       NODE."COORD_DATA_SRC_DATA_OWNER_CODE",
       NODE."COORD_DATA_SRC_CODE",
       NODE."GEO_REF_PT_DATA_OWNER_CODE",
       NODE."GEO_REF_PT_CODE",
       NODE."GEOM_TYPE_DATA_OWNER_CODE",
       NODE."GEOM_TYPE_CODE",
       NODE."HORZ_COLL_METH_DATA_OWNER_CODE",
       NODE."HORZ_COLL_METH_CODE",
       NODE."HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE",
       NODE."HORZ_COORD_REF_SYS_DATUM_CODE",
       NODE."VERF_METH_DATA_OWNER_CODE",
       NODE."VERF_METH_CODE",
       NODE."LATITUDE",
       NODE."LONGITUDE",
       NODE."ELEVATION",
       NODE."CREATED_BY_USERID",
       NODE."G_CREATED_DATE",
       NODE."DATA_ORIG",
       NODE."LAST_UPDT_BY",
       NODE."LAST_UPDT_DATE"
FROM NODE_RCRA_GIS_GEO_INFORMATION NODE
         JOIN ETL_GIS_FAC_SUBM_VW ETL ON ETL.GIS_FAC_SUBM_ID = NODE.GIS_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_GIS_GEO_INFORMATION WH ON WH.GIS_FAC_SUBM_ID = ETL.WH_GIS_FAC_SUBM_ID
    AND WH.GEO_INFO_SEQ_NUM = NODE.GEO_INFO_SEQ_NUM
    )
/

create or replace view ETL_HD_HANDLER_VW as
(
SELECT WH.HD_HANDLER_ID WH_HD_HANDLER_ID,
       ETL.WH_HD_HBASIC_ID,
       ETL.HD_SUBM_ID,
       NODE."HD_HANDLER_ID",
       NODE."HD_HBASIC_ID",
       NODE."TRANSACTION_CODE",
       NODE."ACTIVITY_LOCATION",
       NODE."SOURCE_TYPE",
       NODE."SEQ_NUMBER",
       NODE."RECEIVE_DATE",
       NODE."HANDLER_NAME",
       NODE."ACKNOWLEDGE_DATE",
       NODE."NON_NOTIFIER",
       NODE."TSD_DATE",
       NODE."OFF_SITE_RECEIPT",
       NODE."ACCESSIBILITY",
       NODE."COUNTY_CODE_OWNER",
       NODE."COUNTY_CODE",
       NODE."NOTES",
       NODE."ACKNOWLEDGE_FLAG",
       NODE."LOCATION_STREET1",
       NODE."LOCATION_STREET2",
       NODE."LOCATION_CITY",
       NODE."LOCATION_STATE",
       NODE."LOCATION_COUNTRY",
       NODE."LOCATION_ZIP",
       NODE."MAIL_STREET1",
       NODE."MAIL_STREET2",
       NODE."MAIL_CITY",
       NODE."MAIL_STATE",
       NODE."MAIL_COUNTRY",
       NODE."MAIL_ZIP",
       NODE."CONTACT_FIRST_NAME",
       NODE."CONTACT_MIDDLE_INITIAL",
       NODE."CONTACT_LAST_NAME",
       NODE."CONTACT_ORG_NAME",
       NODE."CONTACT_TITLE",
       NODE."CONTACT_EMAIL_ADDRESS",
       NODE."CONTACT_PHONE",
       NODE."CONTACT_PHONE_EXT",
       NODE."CONTACT_FAX",
       NODE."CONTACT_STREET_NUMBER",
       NODE."CONTACT_STREET1",
       NODE."CONTACT_STREET2",
       NODE."CONTACT_CITY",
       NODE."CONTACT_STATE",
       NODE."CONTACT_COUNTRY",
       NODE."CONTACT_ZIP",
       NODE."PCONTACT_FIRST_NAME",
       NODE."PCONTACT_MIDDLE_NAME",
       NODE."PCONTACT_LAST_NAME",
       NODE."PCONTACT_ORG_NAME",
       NODE."PCONTACT_TITLE",
       NODE."PCONTACT_EMAIL_ADDRESS",
       NODE."PCONTACT_PHONE",
       NODE."PCONTACT_PHONE_EXT",
       NODE."PCONTACT_FAX",
       NODE."PCONTACT_STREET_NUMBER",
       NODE."PCONTACT_STREET1",
       NODE."PCONTACT_STREET2",
       NODE."PCONTACT_CITY",
       NODE."PCONTACT_STATE",
       NODE."PCONTACT_COUNTRY",
       NODE."PCONTACT_ZIP",
       NODE."USED_OIL_BURNER",
       NODE."USED_OIL_PROCESSOR",
       NODE."USED_OIL_REFINER",
       NODE."USED_OIL_MARKET_BURNER",
       NODE."USED_OIL_SPEC_MARKETER",
       NODE."USED_OIL_TRANSFER_FACILITY",
       NODE."USED_OIL_TRANSPORTER",
       NODE."LAND_TYPE",
       NODE."STATE_DISTRICT_OWNER",
       NODE."STATE_DISTRICT",
       NODE."IMPORTER_ACTIVITY",
       NODE."MIXED_WASTE_GENERATOR",
       NODE."RECYCLER_ACTIVITY",
       NODE."TRANSPORTER_ACTIVITY",
       NODE."TSD_ACTIVITY",
       NODE."UNDERGROUND_INJECTION_ACTIVITY",
       NODE."UNIVERSAL_WASTE_DEST_FACILITY",
       NODE."ONSITE_BURNER_EXEMPTION",
       NODE."FURNACE_EXEMPTION",
       NODE."SHORT_TERM_GEN_IND",
       NODE."TRANSFER_FACILITY_IND",
       NODE."STATE_WASTE_GENERATOR_OWNER",
       NODE."STATE_WASTE_GENERATOR",
       NODE."FED_WASTE_GENERATOR_OWNER",
       NODE."FED_WASTE_GENERATOR",
       NODE."COLLEGE_IND",
       NODE."HOSPITAL_IND",
       NODE."NON_PROFIT_IND",
       NODE."WITHDRAWAL_IND",
       NODE."TRANS_CODE",
       NODE."NOTIFICATION_RSN_CODE",
       NODE."EFFC_DATE",
       NODE."FINANCIAL_ASSURANCE_IND",
       NODE."RECYCLING_IND",
       NODE."MAIL_STREET_NUMBER",
       NODE."LOCATION_STREET_NUMBER",
       NODE."NON_NOTIFIER_TEXT",
       NODE."ACCESSIBILITY_TEXT",
       NODE."STATE_DISTRICT_TEXT",
       NODE."INTRNL_NOTES",
       NODE."SHORT_TERM_INTRNL_NOTES",
       NODE."NATURE_OF_BUSINESS_TEXT",
       NODE."RECOGNIZED_TRADER_IMPORTER_IND",
       NODE."RECOGNIZED_TRADER_EXPORTER_IND",
       NODE."SLAB_IMPORTER_IND",
       NODE."SLAB_EXPORTER_IND",
       NODE."RECYCLER_ACT_NONSTORAGE",
       NODE."MANIFEST_BROKER",
       NODE."RECYCLER_NOTES",
       NODE."ACKNOWLEDGE_FLAG_IND",
       NODE."INCLUDE_IN_NATIONAL_REPORT_IND",
       NODE."LQHUW_IND",
       NODE."HD_REPORT_CYCLE_YEAR",
       NODE."HEALTHCARE_FAC",
       NODE."REVERSE_DISTRIBUTOR",
       NODE."SUBPART_P_WITHDRAWAL",
       NODE."RECYCLER_IND",
       NODE."CURRENT_RECORD",
       NODE."CREATED_BY_USERID",
       NODE."H_CREATED_DATE",
       NODE."DATA_ORIG",
       NODE."LOCATION_LATITUDE",
       NODE."LOCATION_LONGITUDE",
       NODE."LOCATION_GIS_PRIM",
       NODE."LOCATION_GIS_ORIG",
       NODE."LAST_UPDT_BY",
       NODE."LAST_UPDT_DATE",
       NODE."BR_EXEMPT_IND"
FROM NODE_RCRA_HD_HANDLER NODE
         INNER JOIN ETL_HD_BASIC_VW ETL ON ETL.HD_HBASIC_ID = NODE.HD_HBASIC_ID
         LEFT OUTER JOIN RCRA_HD_HANDLER WH ON WH.HD_HBASIC_ID = ETL.WH_HD_HBASIC_ID
    AND WH.ACTIVITY_LOCATION = NODE.ACTIVITY_LOCATION
    AND WH.SEQ_NUMBER = NODE.SEQ_NUMBER
    AND WH.SOURCE_TYPE = NODE.SOURCE_TYPE
    )
/

create or replace view ETL_PRM_EVENT_VW as
(
SELECT WH.PRM_EVENT_ID WH_PRM_EVENT_ID,
       ETL.WH_PRM_SERIES_ID,
       ETL.PRM_SUBM_ID,
       NODE."PRM_EVENT_ID",
       NODE."PRM_SERIES_ID",
       NODE."TRANS_CODE",
       NODE."ACT_LOC_CODE",
       NODE."PERMIT_EVENT_DATA_OWNER_CODE",
       NODE."PERMIT_EVENT_CODE",
       NODE."EVENT_AGN_CODE",
       NODE."EVENT_SEQ_NUM",
       NODE."ACTL_DATE",
       NODE."ORIGINAL_SCHEDULE_DATE",
       NODE."NEW_SCHEDULE_DATE",
       NODE."RESP_PERSON_DATA_OWNER_CODE",
       NODE."RESP_PERSON_ID",
       NODE."EVENT_SUBORG_DATA_OWNER_CODE",
       NODE."EVENT_SUBORG_CODE",
       NODE."SUPP_INFO_TXT",
       NODE."CREATED_BY_USERID",
       NODE."P_CREATED_DATE",
       NODE."LAST_UPDT_BY",
       NODE."LAST_UPDT_DATE"
FROM NODE_RCRA_PRM_EVENT NODE
         INNER JOIN ETL_PRM_SERIES_VW ETL ON ETL.PRM_SERIES_ID = NODE.PRM_SERIES_ID
         LEFT OUTER JOIN RCRA_PRM_EVENT WH ON WH.PRM_SERIES_ID = ETL.WH_PRM_SERIES_ID
    AND WH.EVENT_SEQ_NUM = NODE.EVENT_SEQ_NUM
    AND WH.PERMIT_EVENT_CODE = NODE.PERMIT_EVENT_CODE
    )
/

create or replace view ETL_PRM_SERIES_VW as
(
SELECT WH.PRM_SERIES_ID WH_PRM_SERIES_ID,
       ETL.WH_PRM_FAC_SUBM_ID,
       ETL.PRM_SUBM_ID,
       NODE."PRM_SERIES_ID",
       NODE."PRM_FAC_SUBM_ID",
       NODE."TRANS_CODE",
       NODE."PERMIT_SERIES_SEQ_NUM",
       NODE."PERMIT_SERIES_NAME",
       NODE."RESP_PERSON_DATA_OWNER_CODE",
       NODE."RESP_PERSON_ID",
       NODE."SUPP_INFO_TXT",
       NODE."ACTIVE_SERIES_IND",
       NODE."CREATED_BY_USERID",
       NODE."P_CREATED_DATE",
       NODE."LAST_UPDT_BY",
       NODE."LAST_UPDT_DATE"
FROM NODE_RCRA_PRM_SERIES NODE
         INNER JOIN ETL_PRM_FAC_SUBM_VW ETL ON ETL.PRM_FAC_SUBM_ID = NODE.PRM_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_PRM_SERIES WH ON WH.PRM_FAC_SUBM_ID = ETL.WH_PRM_FAC_SUBM_ID
    AND WH.PERMIT_SERIES_SEQ_NUM = NODE.PERMIT_SERIES_SEQ_NUM
    )
/

create or replace view ETL_PRM_UNIT_VW as
(
SELECT WH.PRM_UNIT_ID WH_PRM_UNIT_ID,
       ETL.WH_PRM_FAC_SUBM_ID,
       ETL.PRM_SUBM_ID,
       NODE."PRM_UNIT_ID",
       NODE."PRM_FAC_SUBM_ID",
       NODE."TRANS_CODE",
       NODE."PERMIT_UNIT_SEQ_NUM",
       NODE."PERMIT_UNIT_NAME",
       NODE."SUPP_INFO_TXT",
       NODE."ACTIVE_UNIT_IND",
       NODE."CREATED_BY_USERID",
       NODE."P_CREATED_DATE",
       NODE."LAST_UPDT_BY",
       NODE."LAST_UPDT_DATE"
FROM NODE_RCRA_PRM_UNIT NODE
         INNER JOIN ETL_PRM_FAC_SUBM_VW ETL ON ETL.PRM_FAC_SUBM_ID = NODE.PRM_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_PRM_UNIT WH ON WH.PRM_FAC_SUBM_ID = ETL.WH_PRM_FAC_SUBM_ID
    AND WH.PERMIT_UNIT_SEQ_NUM = NODE.PERMIT_UNIT_SEQ_NUM
    )
/

create or replace view ETL_PRM_UNIT_DETAIL_VW as
(
SELECT WH.PRM_UNIT_DETAIL_ID WH_PRM_UNIT_DETAIL_ID,
       ETL.WH_PRM_UNIT_ID,
       ETL.PRM_SUBM_ID,
       NODE."PRM_UNIT_DETAIL_ID",
       NODE."PRM_UNIT_ID",
       NODE."TRANS_CODE",
       NODE."PERMIT_UNIT_DETAIL_SEQ_NUM",
       NODE."PROC_UNIT_DATA_OWNER_CODE",
       NODE."PROC_UNIT_CODE",
       NODE."PERMIT_STAT_EFFC_DATE",
       NODE."PERMIT_UNIT_CAP_QNTY",
       NODE."CAP_TYPE_CODE",
       NODE."COMMER_STAT_CODE",
       NODE."LEGAL_OPER_STAT_DATA_OWNER_CDE",
       NODE."LEGAL_OPER_STAT_CODE",
       NODE."MEASUREMENT_UNIT_DATA_OWNR_CDE",
       NODE."MEASUREMENT_UNIT_CODE",
       NODE."NUM_OF_UNITS_COUNT",
       NODE."STANDARD_PERMIT_IND",
       NODE."SUPP_INFO_TXT",
       NODE."CURRENT_UNIT_DETAIL_IND",
       NODE."CREATED_BY_USERID",
       NODE."P_CREATED_DATE",
       NODE."LAST_UPDT_BY",
       NODE."LAST_UPDT_DATE"
FROM NODE_RCRA_PRM_UNIT_DETAIL NODE
         INNER JOIN ETL_PRM_UNIT_VW ETL ON ETL.PRM_UNIT_ID = NODE.PRM_UNIT_ID
         LEFT OUTER JOIN RCRA_PRM_UNIT_DETAIL WH ON WH.PRM_UNIT_ID = ETL.WH_PRM_UNIT_ID
    AND WH.PERMIT_UNIT_DETAIL_SEQ_NUM = NODE.PERMIT_UNIT_DETAIL_SEQ_NUM
    )
/

CREATE OR REPLACE PACKAGE BODY RCRAINFO_ETL AS

    -- EM
    PROCEDURE EM_LOG_HANDLER AS
        ETL_ID number;
BEGIN
        ETL_ID := SEQ_ETL_RUN.NEXTVAL;
INSERT INTO ETL_RUN (ETL_RUN_ID, RUN_DATE, ETL_TYPE)
VALUES (ETL_ID, CURRENT_TIMESTAMP, 'EM');
END;

    PROCEDURE EM_MERGE_EMANIFEST AS
BEGIN
MERGE INTO RCRA_EM_EMANIFEST D
    USING (SELECT *
           FROM ETL_EM_EMANIFEST_VW) S
    ON (D.EM_EMANIFEST_ID = S.WH_EM_EMANIFEST_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.CREATED_DATE                 = S.CREATED_DATE,
                D.UPDATED_DATE                 = S.UPDATED_DATE,
                D.MAN_TRACKING_NUM             = S.MAN_TRACKING_NUM,
                D.STATUS                       = S.STATUS,
                D.PUBLIC_IND                   = S.PUBLIC_IND,
                D.SUBM_TYPE                    = S.SUBM_TYPE,
                D.SIGN_STATUS_IND              = S.SIGN_STATUS_IND,
                D.ORIGIN_TYPE                  = S.ORIGIN_TYPE,
                D.SHIPPED_DATE                 = S.SHIPPED_DATE,
                D.RECEIVED_DATE                = S.RECEIVED_DATE,
                D.CERT_DATE                    = S.CERT_DATE,
                D.REJ_IND                      = S.REJ_IND,
                D.DISCREPANCY_IND              = S.DISCREPANCY_IND,
                D.RESIDUE_IND                  = S.RESIDUE_IND,
                D.IMP_IND                      = S.IMP_IND,
                D.CONT_PREV_REJ_RES_IND        = S.CONT_PREV_REJ_RES_IND,
                D.CERT_BY_FIRST_NAME           = S.CERT_BY_FIRST_NAME,
                D.CERT_BY_LAST_NAME            = S.CERT_BY_LAST_NAME,
                D.CERT_BY_USER_ID              = S.CERT_BY_USER_ID,
                D.REJ_TRANS_ON_SITE_IND        = S.REJ_TRANS_ON_SITE_IND,
                D.REJ_TYPE                     = S.REJ_TYPE,
                D.REJ_ALT_DES_FAC_TYPE         = S.REJ_ALT_DES_FAC_TYPE,
                D.REJ_COMMENTS                 = S.REJ_COMMENTS,
                D.REJ_GEN_PS_NAME              = S.REJ_GEN_PS_NAME,
                D.REJ_GEN_PS_DATE              = S.REJ_GEN_PS_DATE,
                D.REJ_GEN_ES_SIGN_DATE         = S.REJ_GEN_ES_SIGN_DATE,
                D.REJ_GEN_ES_CROMERR_ACT_ID    = S.REJ_GEN_ES_CROMERR_ACT_ID,
                D.REJ_GEN_ES_CROMERR_DOC_ID    = S.REJ_GEN_ES_CROMERR_DOC_ID,
                D.REJ_GEN_ES_SIGNER_FIRST_NAME = S.REJ_GEN_ES_SIGNER_FIRST_NAME,
                D.REJ_GEN_ES_SIGNER_LAST_NAME  = S.REJ_GEN_ES_SIGNER_LAST_NAME,
                D.REJ_GEN_ES_SIGNER_USER_ID    = S.REJ_GEN_ES_SIGNER_USER_ID,
                D.REJ_GEN_ES_DOC_NAME          = S.REJ_GEN_ES_DOC_NAME,
                D.REJ_GEN_ES_DOC_SIZE          = S.REJ_GEN_ES_DOC_SIZE,
                D.REJ_GEN_ES_DOC_MIME_TYPE     = S.REJ_GEN_ES_DOC_MIME_TYPE,
                D.IMP_GEN_NAME                 = S.IMP_GEN_NAME,
                D.IMP_GEN_ADDRESS              = S.IMP_GEN_ADDRESS,
                D.IMP_GEN_CITY                 = S.IMP_GEN_CITY,
                D.IMP_GEN_POSTAL_CODE          = S.IMP_GEN_POSTAL_CODE,
                D.IMP_GEN_PROVINCE             = S.IMP_GEN_PROVINCE,
                D.IMP_GEN_CNTRY_CODE           = S.IMP_GEN_CNTRY_CODE,
                D.IMP_GEN_CNTRY_NAME           = S.IMP_GEN_CNTRY_NAME,
                D.IMP_PORT_CITY                = S.IMP_PORT_CITY,
                D.IMP_PORT_STATE_CODE          = S.IMP_PORT_STATE_CODE,
                D.IMP_PORT_STATE_NAME          = S.IMP_PORT_STATE_NAME,
                D.PRINTED_DOC_NAME             = S.PRINTED_DOC_NAME,
                D.PRINTED_DOC_SIZE             = S.PRINTED_DOC_SIZE,
                D.PRINTED_DOC_MIME_TYPE        = S.PRINTED_DOC_MIME_TYPE,
                D.FORM_DOC_NAME                = S.FORM_DOC_NAME,
                D.FORM_DOC_SIZE                = S.FORM_DOC_SIZE,
                D.FORM_DOC_MIME_TYPE           = S.FORM_DOC_MIME_TYPE,
                D.ADD_INFO_NEW_MAN_DEST        = S.ADD_INFO_NEW_MAN_DEST,
                D.ADD_INFO_CONSENT_NUM         = S.ADD_INFO_CONSENT_NUM,
                D.ADD_INFO_HAND_INSTR          = S.ADD_INFO_HAND_INSTR,
                D.CORR_VERSION_NUM             = S.CORR_VERSION_NUM,
                D.CORR_ACTIVE_IND              = S.CORR_ACTIVE_IND,
                D.CORR_EPA_SITE_ID             = S.CORR_EPA_SITE_ID,
                D.CORR_ES_SIGN_DATE            = S.CORR_ES_SIGN_DATE,
                D.CORR_ES_CROMERR_ACT_ID       = S.CORR_ES_CROMERR_ACT_ID,
                D.CORR_ES_CROMERR_DOC_ID       = S.CORR_ES_CROMERR_DOC_ID,
                D.CORR_ES_SIGNER_FIRST_NAME    = S.CORR_ES_SIGNER_FIRST_NAME,
                D.CORR_ES_SIGNER_LAST_NAME     = S.CORR_ES_SIGNER_LAST_NAME,
                D.CORR_ES_SIGNER_USER_ID       = S.CORR_ES_SIGNER_USER_ID,
                D.CORR_ES_DOC_NAME             = S.CORR_ES_DOC_NAME,
                D.CORR_ES_DOC_SIZE             = S.CORR_ES_DOC_SIZE,
                D.CORR_ES_DOC_MIME_TYPE        = S.CORR_ES_DOC_MIME_TYPE
    WHERE DECODE(D.CREATED_DATE, S.CREATED_DATE, 0, 1) = 1
               OR DECODE(D.UPDATED_DATE, S.UPDATED_DATE, 0, 1) = 1
               OR DECODE(D.MAN_TRACKING_NUM, S.MAN_TRACKING_NUM, 0, 1) = 1
               OR DECODE(D.STATUS, S.STATUS, 0, 1) = 1
               OR DECODE(D.PUBLIC_IND, S.PUBLIC_IND, 0, 1) = 1
               OR DECODE(D.SUBM_TYPE, S.SUBM_TYPE, 0, 1) = 1
               OR DECODE(D.SIGN_STATUS_IND, S.SIGN_STATUS_IND, 0, 1) = 1
               OR DECODE(D.ORIGIN_TYPE, S.ORIGIN_TYPE, 0, 1) = 1
               OR DECODE(D.SHIPPED_DATE, S.SHIPPED_DATE, 0, 1) = 1
               OR DECODE(D.RECEIVED_DATE, S.RECEIVED_DATE, 0, 1) = 1
               OR DECODE(D.CERT_DATE, S.CERT_DATE, 0, 1) = 1
               OR DECODE(D.REJ_IND, S.REJ_IND, 0, 1) = 1
               OR DECODE(D.DISCREPANCY_IND, S.DISCREPANCY_IND, 0, 1) = 1
               OR DECODE(D.RESIDUE_IND, S.RESIDUE_IND, 0, 1) = 1
               OR DECODE(D.IMP_IND, S.IMP_IND, 0, 1) = 1
               OR DECODE(D.CONT_PREV_REJ_RES_IND, S.CONT_PREV_REJ_RES_IND, 0, 1) = 1
               OR DECODE(D.CERT_BY_FIRST_NAME, S.CERT_BY_FIRST_NAME, 0, 1) = 1
               OR DECODE(D.CERT_BY_LAST_NAME, S.CERT_BY_LAST_NAME, 0, 1) = 1
               OR DECODE(D.CERT_BY_USER_ID, S.CERT_BY_USER_ID, 0, 1) = 1
               OR DECODE(D.REJ_TRANS_ON_SITE_IND, S.REJ_TRANS_ON_SITE_IND, 0, 1) = 1
               OR DECODE(D.REJ_TYPE, S.REJ_TYPE, 0, 1) = 1
               OR DECODE(D.REJ_ALT_DES_FAC_TYPE, S.REJ_ALT_DES_FAC_TYPE, 0, 1) = 1
               OR DECODE(D.REJ_COMMENTS, S.REJ_COMMENTS, 0, 1) = 1
               OR DECODE(D.REJ_GEN_PS_NAME, S.REJ_GEN_PS_NAME, 0, 1) = 1
               OR DECODE(D.REJ_GEN_PS_DATE, S.REJ_GEN_PS_DATE, 0, 1) = 1
               OR DECODE(D.REJ_GEN_ES_SIGN_DATE, S.REJ_GEN_ES_SIGN_DATE, 0, 1) = 1
               OR DECODE(D.REJ_GEN_ES_CROMERR_ACT_ID, S.REJ_GEN_ES_CROMERR_ACT_ID, 0, 1) = 1
               OR DECODE(D.REJ_GEN_ES_CROMERR_DOC_ID, S.REJ_GEN_ES_CROMERR_DOC_ID, 0, 1) = 1
               OR DECODE(D.REJ_GEN_ES_SIGNER_FIRST_NAME, S.REJ_GEN_ES_SIGNER_FIRST_NAME, 0, 1) = 1
               OR DECODE(D.REJ_GEN_ES_SIGNER_LAST_NAME, S.REJ_GEN_ES_SIGNER_LAST_NAME, 0, 1) = 1
               OR DECODE(D.REJ_GEN_ES_SIGNER_USER_ID, S.REJ_GEN_ES_SIGNER_USER_ID, 0, 1) = 1
               OR DECODE(D.REJ_GEN_ES_DOC_NAME, S.REJ_GEN_ES_DOC_NAME, 0, 1) = 1
               OR DECODE(D.REJ_GEN_ES_DOC_SIZE, S.REJ_GEN_ES_DOC_SIZE, 0, 1) = 1
               OR DECODE(D.REJ_GEN_ES_DOC_MIME_TYPE, S.REJ_GEN_ES_DOC_MIME_TYPE, 0, 1) = 1
               OR DECODE(D.IMP_GEN_NAME, S.IMP_GEN_NAME, 0, 1) = 1
               OR DECODE(D.IMP_GEN_ADDRESS, S.IMP_GEN_ADDRESS, 0, 1) = 1
               OR DECODE(D.IMP_GEN_CITY, S.IMP_GEN_CITY, 0, 1) = 1
               OR DECODE(D.IMP_GEN_POSTAL_CODE, S.IMP_GEN_POSTAL_CODE, 0, 1) = 1
               OR DECODE(D.IMP_GEN_PROVINCE, S.IMP_GEN_PROVINCE, 0, 1) = 1
               OR DECODE(D.IMP_GEN_CNTRY_CODE, S.IMP_GEN_CNTRY_CODE, 0, 1) = 1
               OR DECODE(D.IMP_GEN_CNTRY_NAME, S.IMP_GEN_CNTRY_NAME, 0, 1) = 1
               OR DECODE(D.IMP_PORT_CITY, S.IMP_PORT_CITY, 0, 1) = 1
               OR DECODE(D.IMP_PORT_STATE_CODE, S.IMP_PORT_STATE_CODE, 0, 1) = 1
               OR DECODE(D.IMP_PORT_STATE_NAME, S.IMP_PORT_STATE_NAME, 0, 1) = 1
               OR DECODE(D.PRINTED_DOC_NAME, S.PRINTED_DOC_NAME, 0, 1) = 1
               OR DECODE(D.PRINTED_DOC_SIZE, S.PRINTED_DOC_SIZE, 0, 1) = 1
               OR DECODE(D.PRINTED_DOC_MIME_TYPE, S.PRINTED_DOC_MIME_TYPE, 0, 1) = 1
               OR DECODE(D.FORM_DOC_NAME, S.FORM_DOC_NAME, 0, 1) = 1
               OR DECODE(D.FORM_DOC_SIZE, S.FORM_DOC_SIZE, 0, 1) = 1
               OR DECODE(D.FORM_DOC_MIME_TYPE, S.FORM_DOC_MIME_TYPE, 0, 1) = 1
               OR DECODE(D.ADD_INFO_NEW_MAN_DEST, S.ADD_INFO_NEW_MAN_DEST, 0, 1) = 1
               OR DECODE(D.ADD_INFO_CONSENT_NUM, S.ADD_INFO_CONSENT_NUM, 0, 1) = 1
               OR DECODE(D.ADD_INFO_HAND_INSTR, S.ADD_INFO_HAND_INSTR, 0, 1) = 1
               OR DECODE(D.CORR_VERSION_NUM, S.CORR_VERSION_NUM, 0, 1) = 1
               OR DECODE(D.CORR_ACTIVE_IND, S.CORR_ACTIVE_IND, 0, 1) = 1
               OR DECODE(D.CORR_EPA_SITE_ID, S.CORR_EPA_SITE_ID, 0, 1) = 1
               OR DECODE(D.CORR_ES_SIGN_DATE, S.CORR_ES_SIGN_DATE, 0, 1) = 1
               OR DECODE(D.CORR_ES_CROMERR_ACT_ID, S.CORR_ES_CROMERR_ACT_ID, 0, 1) = 1
               OR DECODE(D.CORR_ES_CROMERR_DOC_ID, S.CORR_ES_CROMERR_DOC_ID, 0, 1) = 1
               OR DECODE(D.CORR_ES_SIGNER_FIRST_NAME, S.CORR_ES_SIGNER_FIRST_NAME, 0, 1) = 1
               OR DECODE(D.CORR_ES_SIGNER_LAST_NAME, S.CORR_ES_SIGNER_LAST_NAME, 0, 1) = 1
               OR DECODE(D.CORR_ES_SIGNER_USER_ID, S.CORR_ES_SIGNER_USER_ID, 0, 1) = 1
               OR DECODE(D.CORR_ES_DOC_NAME, S.CORR_ES_DOC_NAME, 0, 1) = 1
               OR DECODE(D.CORR_ES_DOC_SIZE, S.CORR_ES_DOC_SIZE, 0, 1) = 1
               OR DECODE(D.CORR_ES_DOC_MIME_TYPE, S.CORR_ES_DOC_MIME_TYPE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (EM_EMANIFEST_ID,
                    CREATED_DATE,
                    UPDATED_DATE,
                    MAN_TRACKING_NUM,
                    STATUS,
                    PUBLIC_IND,
                    SUBM_TYPE,
                    SIGN_STATUS_IND,
                    ORIGIN_TYPE,
                    SHIPPED_DATE,
                    RECEIVED_DATE,
                    CERT_DATE,
                    REJ_IND,
                    DISCREPANCY_IND,
                    RESIDUE_IND,
                    IMP_IND,
                    CONT_PREV_REJ_RES_IND,
                    CERT_BY_FIRST_NAME,
                    CERT_BY_LAST_NAME,
                    CERT_BY_USER_ID,
                    REJ_TRANS_ON_SITE_IND,
                    REJ_TYPE,
                    REJ_ALT_DES_FAC_TYPE,
                    REJ_COMMENTS,
                    REJ_GEN_PS_NAME,
                    REJ_GEN_PS_DATE,
                    REJ_GEN_ES_SIGN_DATE,
                    REJ_GEN_ES_CROMERR_ACT_ID,
                    REJ_GEN_ES_CROMERR_DOC_ID,
                    REJ_GEN_ES_SIGNER_FIRST_NAME,
                    REJ_GEN_ES_SIGNER_LAST_NAME,
                    REJ_GEN_ES_SIGNER_USER_ID,
                    REJ_GEN_ES_DOC_NAME,
                    REJ_GEN_ES_DOC_SIZE,
                    REJ_GEN_ES_DOC_MIME_TYPE,
                    IMP_GEN_NAME,
                    IMP_GEN_ADDRESS,
                    IMP_GEN_CITY,
                    IMP_GEN_POSTAL_CODE,
                    IMP_GEN_PROVINCE,
                    IMP_GEN_CNTRY_CODE,
                    IMP_GEN_CNTRY_NAME,
                    IMP_PORT_CITY,
                    IMP_PORT_STATE_CODE,
                    IMP_PORT_STATE_NAME,
                    PRINTED_DOC_NAME,
                    PRINTED_DOC_SIZE,
                    PRINTED_DOC_MIME_TYPE,
                    FORM_DOC_NAME,
                    FORM_DOC_SIZE,
                    FORM_DOC_MIME_TYPE,
                    ADD_INFO_NEW_MAN_DEST,
                    ADD_INFO_CONSENT_NUM,
                    ADD_INFO_HAND_INSTR,
                    CORR_VERSION_NUM,
                    CORR_ACTIVE_IND,
                    CORR_EPA_SITE_ID,
                    CORR_ES_SIGN_DATE,
                    CORR_ES_CROMERR_ACT_ID,
                    CORR_ES_CROMERR_DOC_ID,
                    CORR_ES_SIGNER_FIRST_NAME,
                    CORR_ES_SIGNER_LAST_NAME,
                    CORR_ES_SIGNER_USER_ID,
                    CORR_ES_DOC_NAME,
                    CORR_ES_DOC_SIZE,
                    CORR_ES_DOC_MIME_TYPE)
            VALUES (SEQ_RCRA_EM_EMANIFEST.NEXTVAL,
                    S.CREATED_DATE,
                    S.UPDATED_DATE,
                    S.MAN_TRACKING_NUM,
                    S.STATUS,
                    S.PUBLIC_IND,
                    S.SUBM_TYPE,
                    S.SIGN_STATUS_IND,
                    S.ORIGIN_TYPE,
                    S.SHIPPED_DATE,
                    S.RECEIVED_DATE,
                    S.CERT_DATE,
                    S.REJ_IND,
                    S.DISCREPANCY_IND,
                    S.RESIDUE_IND,
                    S.IMP_IND,
                    S.CONT_PREV_REJ_RES_IND,
                    S.CERT_BY_FIRST_NAME,
                    S.CERT_BY_LAST_NAME,
                    S.CERT_BY_USER_ID,
                    S.REJ_TRANS_ON_SITE_IND,
                    S.REJ_TYPE,
                    S.REJ_ALT_DES_FAC_TYPE,
                    S.REJ_COMMENTS,
                    S.REJ_GEN_PS_NAME,
                    S.REJ_GEN_PS_DATE,
                    S.REJ_GEN_ES_SIGN_DATE,
                    S.REJ_GEN_ES_CROMERR_ACT_ID,
                    S.REJ_GEN_ES_CROMERR_DOC_ID,
                    S.REJ_GEN_ES_SIGNER_FIRST_NAME,
                    S.REJ_GEN_ES_SIGNER_LAST_NAME,
                    S.REJ_GEN_ES_SIGNER_USER_ID,
                    S.REJ_GEN_ES_DOC_NAME,
                    S.REJ_GEN_ES_DOC_SIZE,
                    S.REJ_GEN_ES_DOC_MIME_TYPE,
                    S.IMP_GEN_NAME,
                    S.IMP_GEN_ADDRESS,
                    S.IMP_GEN_CITY,
                    S.IMP_GEN_POSTAL_CODE,
                    S.IMP_GEN_PROVINCE,
                    S.IMP_GEN_CNTRY_CODE,
                    S.IMP_GEN_CNTRY_NAME,
                    S.IMP_PORT_CITY,
                    S.IMP_PORT_STATE_CODE,
                    S.IMP_PORT_STATE_NAME,
                    S.PRINTED_DOC_NAME,
                    S.PRINTED_DOC_SIZE,
                    S.PRINTED_DOC_MIME_TYPE,
                    S.FORM_DOC_NAME,
                    S.FORM_DOC_SIZE,
                    S.FORM_DOC_MIME_TYPE,
                    S.ADD_INFO_NEW_MAN_DEST,
                    S.ADD_INFO_CONSENT_NUM,
                    S.ADD_INFO_HAND_INSTR,
                    S.CORR_VERSION_NUM,
                    S.CORR_ACTIVE_IND,
                    S.CORR_EPA_SITE_ID,
                    S.CORR_ES_SIGN_DATE,
                    S.CORR_ES_CROMERR_ACT_ID,
                    S.CORR_ES_CROMERR_DOC_ID,
                    S.CORR_ES_SIGNER_FIRST_NAME,
                    S.CORR_ES_SIGNER_LAST_NAME,
                    S.CORR_ES_SIGNER_USER_ID,
                    S.CORR_ES_DOC_NAME,
                    S.CORR_ES_DOC_SIZE,
                    S.CORR_ES_DOC_MIME_TYPE);
END;

    PROCEDURE EM_MERGE_EMANIFEST_COMMENT AS
BEGIN
DELETE
FROM RCRA_EM_EMANIFEST_COMMENT
WHERE EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID FROM ETL_EM_EMANIFEST_COMMENT_VW);
INSERT INTO RCRA_EM_EMANIFEST_COMMENT (EM_EMANIFEST_COMMENT_ID, EM_EMANIFEST_ID, COMMENT_DESC, HANDLER_ID,
                                       COMMENT_LABEL)
SELECT SEQ_RCRA_EM_EMANIFEST_COMMENT.NEXTVAL, WH_EM_EMANIFEST_ID, COMMENT_DESC, HANDLER_ID, COMMENT_LABEL
FROM ETL_EM_EMANIFEST_COMMENT_VW;
END;

    PROCEDURE EM_MERGE_HANDLER AS
BEGIN
DELETE
FROM RCRA_EM_HANDLER
WHERE EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID FROM ETL_EM_HANDLER_VW);
INSERT INTO RCRA_EM_HANDLER (EM_HANDLER_ID,
                             EM_EMANIFEST_ID,
                             SITE_TYPE,
                             EPA_SITE_ID,
                             MANIFEST_NAME,
                             ORDER_NUM,
                             REG_IND,
                             MOD_IND,
                             MANIFEST_HANDLER_TYPE,
                             MAIL_STREET_NUM,
                             MAIL_STREET1,
                             MAIL_STREET2,
                             MAIL_CITY,
                             MAIL_ZIP,
                             MAIL_CNTRY_CODE,
                             MAIL_CNTRY_NAME,
                             MAIL_STATE_CODE,
                             MAIL_STATE_NAME,
                             SITE_STREET_NUM,
                             SITE_STREET1,
                             SITE_STREET2,
                             SITE_CITY,
                             SITE_ZIP,
                             SITE_CNTRY_CODE,
                             SITE_CNTRY_NAME,
                             SITE_STATE_CODE,
                             SITE_STATE_NAME,
                             CONTACT_FIRST_NAME,
                             CONTACT_MIDDLE_INITIAL,
                             CONTACT_LAST_NAME,
                             CONTACT_EMAIL,
                             CONTACT_COMPANY_NAME,
                             CONTACT_PHONE_NUM,
                             CONTACT_PHONE_EXT,
                             EMERG_PHONE_NUM,
                             EMERG_PHONE_EXT,
                             PS_NAME,
                             PS_DATE,
                             ES_SIGN_DATE,
                             ES_CROMERR_ACT_ID,
                             ES_CROMERR_DOC_ID,
                             ES_SIGNER_FIRST_NAME,
                             ES_SIGNER_LAST_NAME,
                             ES_SIGNER_USER_ID,
                             ES_DOC_NAME,
                             ES_DOC_SIZE,
                             ES_DOC_MIME_TYPE)
SELECT SEQ_RCRA_EM_HANDLER.NEXTVAL,
       WH_EM_EMANIFEST_ID,
       SITE_TYPE,
       EPA_SITE_ID,
       MANIFEST_NAME,
       ORDER_NUM,
       REG_IND,
       MOD_IND,
       MANIFEST_HANDLER_TYPE,
       MAIL_STREET_NUM,
       MAIL_STREET1,
       MAIL_STREET2,
       MAIL_CITY,
       MAIL_ZIP,
       MAIL_CNTRY_CODE,
       MAIL_CNTRY_NAME,
       MAIL_STATE_CODE,
       MAIL_STATE_NAME,
       SITE_STREET_NUM,
       SITE_STREET1,
       SITE_STREET2,
       SITE_CITY,
       SITE_ZIP,
       SITE_CNTRY_CODE,
       SITE_CNTRY_NAME,
       SITE_STATE_CODE,
       SITE_STATE_NAME,
       CONTACT_FIRST_NAME,
       CONTACT_MIDDLE_INITIAL,
       CONTACT_LAST_NAME,
       CONTACT_EMAIL,
       CONTACT_COMPANY_NAME,
       CONTACT_PHONE_NUM,
       CONTACT_PHONE_EXT,
       EMERG_PHONE_NUM,
       EMERG_PHONE_EXT,
       PS_NAME,
       PS_DATE,
       ES_SIGN_DATE,
       ES_CROMERR_ACT_ID,
       ES_CROMERR_DOC_ID,
       ES_SIGNER_FIRST_NAME,
       ES_SIGNER_LAST_NAME,
       ES_SIGNER_USER_ID,
       ES_DOC_NAME,
       ES_DOC_SIZE,
       ES_DOC_MIME_TYPE
FROM ETL_EM_HANDLER_VW;
END;

    PROCEDURE EM_MERGE_WASTE AS
BEGIN
DELETE
FROM RCRA_EM_WASTE
WHERE EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                          FROM ETL_EM_HANDLER_VW);
INSERT INTO RCRA_EM_WASTE (EM_WASTE_ID, EM_EMANIFEST_ID, DOT_HAZ_IND, WASTES_DESC, BR_IND, PCB_IND, LINE_NUM,
                           EPA_WASTE_IND,
                           DOT_ID_NUM, DOT_PRINTED_INFO, QNT_CONT_NUM, QNT_VAL, QNT_CONT_TYPE_CODE,
                           QNT_CONT_TYPE_DESC, QNT_UOM_CODE, QNT_UOM_DESC, BR_DENSITY, BR_DENSITY_UOM_CODE,
                           BR_DENSITY_UOM_DESC, BR_FORM_CODE, BR_FORM_DESC, BR_SRC_CODE, BR_SRC_DESC,
                           BR_WM_CODE,
                           BR_WM_DESC, DISC_WASTE_QTY_IND, DISC_WASTE_TYPE_IND, DISC_COMMENTS, DISC_RESIDUE_IND,
                           DISC_RESIDUE_COMMENTS, MGMT_METHOD_CODE, MGMT_METHOD_DESC, ADD_INFO_NEW_MAN_DEST,
                           ADD_INFO_CONSENT_NUM, ADD_INFO_HAND_INSTR)
SELECT SEQ_RCRA_EM_EMANIFEST.NEXTVAL,
       WH_EM_EMANIFEST_ID,
       DOT_HAZ_IND,
       WASTES_DESC,
       BR_IND,
       PCB_IND,
       LINE_NUM,
       EPA_WASTE_IND,
       DOT_ID_NUM,
       DOT_PRINTED_INFO,
       QNT_CONT_NUM,
       QNT_VAL,
       QNT_CONT_TYPE_CODE,
       QNT_CONT_TYPE_DESC,
       QNT_UOM_CODE,
       QNT_UOM_DESC,
       BR_DENSITY,
       BR_DENSITY_UOM_CODE,
       BR_DENSITY_UOM_DESC,
       BR_FORM_CODE,
       BR_FORM_DESC,
       BR_SRC_CODE,
       BR_SRC_DESC,
       BR_WM_CODE,
       BR_WM_DESC,
       DISC_WASTE_QTY_IND,
       DISC_WASTE_TYPE_IND,
       DISC_COMMENTS,
       DISC_RESIDUE_IND,
       DISC_RESIDUE_COMMENTS,
       MGMT_METHOD_CODE,
       MGMT_METHOD_DESC,
       ADD_INFO_NEW_MAN_DEST,
       ADD_INFO_CONSENT_NUM,
       ADD_INFO_HAND_INSTR
FROM ETL_EM_WASTE_VW
WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                             FROM ETL_EM_HANDLER_VW);
END;

    PROCEDURE EM_MERGE_TR_NUM_ORIG AS
BEGIN
DELETE
FROM RCRA_EM_TR_NUM_ORIG
WHERE EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                          FROM ETL_EM_HANDLER_VW);
INSERT INTO RCRA_EM_TR_NUM_ORIG (EM_TR_NUM_ORIG_ID, EM_EMANIFEST_ID,
                                 MANIFEST_TRACKING_NUM)
SELECT SEQ_RCRA_EM_TR_NUM_ORIG.NEXTVAL, WH_EM_EMANIFEST_ID, MANIFEST_TRACKING_NUM
FROM ETL_EM_TR_NUM_ORIG_VW
WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                             FROM ETL_EM_HANDLER_VW);
END;

    PROCEDURE EM_MERGE_TR_NUM_REJ AS
BEGIN
DELETE
FROM RCRA_EM_TR_NUM_REJ
WHERE EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                          FROM ETL_EM_HANDLER_VW);
INSERT INTO RCRA_EM_TR_NUM_REJ (EM_TR_NUM_REJ_ID, EM_EMANIFEST_ID, MANIFEST_TRACKING_NUM)
SELECT SEQ_RCRA_EM_TR_NUM_REJ.NEXTVAL, WH_EM_EMANIFEST_ID, MANIFEST_TRACKING_NUM
FROM ETL_EM_TR_NUM_REJ_VW
WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                             FROM ETL_EM_HANDLER_VW);
END;

    PROCEDURE EM_MERGE_TR_NUM_RESIDUE_NEW AS
BEGIN
DELETE
FROM RCRA_EM_TR_NUM_RESIDUE_NEW
WHERE EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                          FROM ETL_EM_HANDLER_VW);
INSERT INTO RCRA_EM_TR_NUM_RESIDUE_NEW (EM_TR_NUM_RESIDUE_NEW_ID, EM_EMANIFEST_ID, MANIFEST_TRACKING_NUM)
SELECT SEQ_RCRA_EM_TR_NUM_RESIDUE_NEW.NEXTVAL, WH_EM_EMANIFEST_ID, MANIFEST_TRACKING_NUM
FROM ETL_EM_TR_NUM_RESIDUE_NEW_VW
WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                             FROM ETL_EM_HANDLER_VW);
END;

    PROCEDURE EM_MERGE_TR_NUM_WASTE AS
BEGIN
DELETE
FROM RCRA_EM_TR_NUM_WASTE
WHERE EM_WASTE_ID IN (SELECT WH_EM_WASTE_ID
                      FROM ETL_EM_WASTE_VW);
INSERT INTO RCRA_EM_TR_NUM_WASTE (EM_TR_NUM_WASTE_ID, EM_WASTE_ID, MANIFEST_TRACKING_NUM)
SELECT SEQ_RCRA_EM_TR_NUM_WASTE.NEXTVAL, WH_EM_WASTE_ID, MANIFEST_TRACKING_NUM
FROM ETL_EM_TR_NUM_WASTE_VW
WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                             FROM ETL_EM_HANDLER_VW);
END;

    PROCEDURE EM_MERGE_WASTE_CD_FED AS
BEGIN
DELETE
FROM RCRA_EM_WASTE_CD_FED
WHERE EM_WASTE_ID IN (SELECT WH_EM_WASTE_ID
                      FROM ETL_EM_WASTE_CD_FED_VW);
INSERT INTO RCRA_EM_WASTE_CD_FED (EM_WASTE_CD_FED_ID, EM_WASTE_ID, WASTE_CODE, WASTE_DESC)
SELECT SEQ_RCRA_EM_WASTE_CD_FED.NEXTVAL, WH_EM_WASTE_ID, WASTE_CODE, WASTE_DESC
FROM ETL_EM_WASTE_CD_FED_VW
WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                             FROM ETL_EM_HANDLER_VW);
END;

    PROCEDURE EM_MERGE_WASTE_CD_GEN AS
BEGIN
DELETE
FROM RCRA_EM_WASTE_CD_GEN
WHERE EM_WASTE_ID IN (SELECT WH_EM_WASTE_ID
                      FROM ETL_EM_WASTE_CD_GEN_VW);
INSERT INTO RCRA_EM_WASTE_CD_GEN (EM_WASTE_CD_GEN_ID, EM_WASTE_ID, WASTE_CODE, WASTE_DESC)
SELECT SEQ_RCRA_EM_WASTE_CD_GEN.NEXTVAL, WH_EM_WASTE_ID, WASTE_CODE, WASTE_DESC
FROM ETL_EM_WASTE_CD_GEN_VW
WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                             FROM ETL_EM_HANDLER_VW);
END;

    PROCEDURE EM_MERGE_WASTE_CD_TRANS AS
BEGIN
DELETE
FROM RCRA_EM_WASTE_CD_TRANS
WHERE EM_WASTE_ID IN (SELECT WH_EM_WASTE_ID
                      FROM ETL_EM_WASTE_CD_TRANS_VW);
INSERT INTO RCRA_EM_WASTE_CD_TRANS (EM_WASTE_CD_TRANS_ID, EM_WASTE_ID, WASTE_CODE)
SELECT SEQ_RCRA_EM_WASTE_CD_TRANS.NEXTVAL, WH_EM_WASTE_ID, WASTE_CODE
FROM ETL_EM_WASTE_CD_TRANS_VW
WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                             FROM ETL_EM_HANDLER_VW);
END;

    PROCEDURE EM_MERGE_WASTE_CD_TSDF AS
BEGIN
DELETE
FROM RCRA_EM_WASTE_CD_TSDF
WHERE EM_WASTE_ID IN (SELECT WH_EM_WASTE_ID
                      FROM ETL_EM_WASTE_CD_TSDF_VW);
INSERT INTO RCRA_EM_WASTE_CD_TSDF (EM_WASTE_CD_TSDF_ID, EM_WASTE_ID, WASTE_CODE, WASTE_DESC)
SELECT SEQ_RCRA_EM_WASTE_CD_TSDF.NEXTVAL, WH_EM_WASTE_ID, WASTE_CODE, WASTE_DESC
FROM ETL_EM_WASTE_CD_TSDF_VW
WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                             FROM ETL_EM_HANDLER_VW);
END;

    PROCEDURE EM_MERGE_WASTE_COMMENT AS
BEGIN
DELETE
FROM RCRA_EM_WASTE_COMMENT
WHERE EM_WASTE_ID IN (SELECT WH_EM_WASTE_ID
                      FROM ETL_EM_WASTE_COMMENT_VW);
INSERT INTO RCRA_EM_WASTE_COMMENT (EM_WASTE_COMMENT_ID, EM_WASTE_ID, COMMENT_DESC, HANDLER_ID, COMMENT_LABEL)
SELECT SEQ_RCRA_EM_WASTE_COMMENT.NEXTVAL, WH_EM_WASTE_ID, COMMENT_DESC, HANDLER_ID, COMMENT_LABEL
FROM ETL_EM_WASTE_COMMENT_VW
WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                             FROM ETL_EM_HANDLER_VW);
END;

    PROCEDURE EM_MERGE_WASTE_PCB AS
BEGIN
DELETE
FROM RCRA_EM_WASTE_PCB
WHERE EM_WASTE_ID IN (SELECT WH_EM_WASTE_ID
                      FROM ETL_EM_WASTE_PCB_VW);
INSERT INTO RCRA_EM_WASTE_PCB (EM_WASTE_PCB_ID, EM_WASTE_ID, PCB_LOAD_TYPE_CODE, PCB_ARTICLE_CONT_ID,
                               PCB_REMOVAL_DATE,
                               PCB_WEIGHT, PCB_WASTE_TYPE, PCB_BULK_IDENTITY)
SELECT SEQ_RCRA_EM_WASTE_PCB.NEXTVAL,
       WH_EM_WASTE_ID,
       PCB_LOAD_TYPE_CODE,
       PCB_ARTICLE_CONT_ID,
       PCB_REMOVAL_DATE,
       PCB_WEIGHT,
       PCB_WASTE_TYPE,
       PCB_BULK_IDENTITY
FROM ETL_EM_WASTE_PCB_VW
WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                             FROM ETL_EM_HANDLER_VW);
END;

-- CH

    PROCEDURE CH_LOG_HANDLER AS
        ETL_ID number;
BEGIN
        ETL_ID := SEQ_ETL_RUN.NEXTVAL;
INSERT INTO ETL_RUN
(ETL_RUN_ID,
 RUN_DATE,
 ETL_TYPE)
VALUES (ETL_ID,
        CURRENT_TIMESTAMP,
        'CH');
INSERT INTO ETL_RUN_HANDLER
(ETL_RUN_ID,
 HANDLER_ID,
 STATUS_TYPE)
SELECT ETL_ID,
       HANDLER_ID,
       CASE
           WHEN
               RU_REPORT_UNIV_ID IS NULL
               THEN
               'I'
           ELSE
               'U'
           END
FROM ETL_RU_REPORT_UNIV_VW;
END;

    PROCEDURE CH_MERGE_REPORT_UNIV AS
BEGIN
MERGE INTO RCRA_RU_REPORT_UNIV D
    USING (SELECT *
           FROM ETL_RU_REPORT_UNIV_VW) S
    ON (D.RU_REPORT_UNIV_ID = S.WH_RU_REPORT_UNIV_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.HANDLER_ID                     = S.HANDLER_ID,
                D.ACTIVITY_LOCATION              = S.ACTIVITY_LOCATION,
                D.SOURCE_TYPE                    = S.SOURCE_TYPE,
                D.SEQ_NUMBER                     = S.SEQ_NUMBER,
                D.RECEIVE_DATE                   = S.RECEIVE_DATE,
                D.HANDLER_NAME                   = S.HANDLER_NAME,
                D.NON_NOTIFIER_IND               = S.NON_NOTIFIER_IND,
                D.ACCESSIBILITY                  = S.ACCESSIBILITY,
                D.REPORT_CYCLE                   = S.REPORT_CYCLE,
                D.REGION                         = S.REGION,
                D.STATE                          = S.STATE,
                D.EXTRACT_FLAG                   = S.EXTRACT_FLAG,
                D.ACTIVE_SITE                    = S.ACTIVE_SITE,
                D.COUNTY_CODE                    = S.COUNTY_CODE,
                D.COUNTY_NAME                    = S.COUNTY_NAME,
                D.LOCATION_STREET_NUMBER         = S.LOCATION_STREET_NUMBER,
                D.LOCATION_STREET1               = S.LOCATION_STREET1,
                D.LOCATION_STREET2               = S.LOCATION_STREET2,
                D.LOCATION_CITY                  = S.LOCATION_CITY,
                D.LOCATION_STATE                 = S.LOCATION_STATE,
                D.LOCATION_COUNTRY               = S.LOCATION_COUNTRY,
                D.LOCATION_ZIP                   = S.LOCATION_ZIP,
                D.MAIL_STREET_NUMBER             = S.MAIL_STREET_NUMBER,
                D.MAIL_STREET1                   = S.MAIL_STREET1,
                D.MAIL_STREET2                   = S.MAIL_STREET2,
                D.MAIL_CITY                      = S.MAIL_CITY,
                D.MAIL_STATE                     = S.MAIL_STATE,
                D.MAIL_COUNTRY                   = S.MAIL_COUNTRY,
                D.MAIL_ZIP                       = S.MAIL_ZIP,
                D.CONTACT_STREET_NUMBER          = S.CONTACT_STREET_NUMBER,
                D.CONTACT_STREET1                = S.CONTACT_STREET1,
                D.CONTACT_STREET2                = S.CONTACT_STREET2,
                D.CONTACT_CITY                   = S.CONTACT_CITY,
                D.CONTACT_STATE                  = S.CONTACT_STATE,
                D.CONTACT_COUNTRY                = S.CONTACT_COUNTRY,
                D.CONTACT_ZIP                    = S.CONTACT_ZIP,
                D.CONTACT_NAME                   = S.CONTACT_NAME,
                D.CONTACT_PHONE                  = S.CONTACT_PHONE,
                D.CONTACT_FAX                    = S.CONTACT_FAX,
                D.CONTACT_EMAIL                  = S.CONTACT_EMAIL,
                D.CONTACT_TITLE                  = S.CONTACT_TITLE,
                D.OWNER_NAME                     = S.OWNER_NAME,
                D.OWNER_TYPE                     = S.OWNER_TYPE,
                D.OWNER_SEQ_NUM                  = S.OWNER_SEQ_NUM,
                D.OPER_NAME                      = S.OPER_NAME,
                D.OPER_TYPE                      = S.OPER_TYPE,
                D.OPER_SEQ_NUM                   = S.OPER_SEQ_NUM,
                D.NAIC1_CODE                     = S.NAIC1_CODE,
                D.NAIC2_CODE                     = S.NAIC2_CODE,
                D.NAIC3_CODE                     = S.NAIC3_CODE,
                D.NAIC4_CODE                     = S.NAIC4_CODE,
                D.IN_HANDLER_UNIVERSE            = S.IN_HANDLER_UNIVERSE,
                D.IN_A_UNIVERSE                  = S.IN_A_UNIVERSE,
                D.FED_WASTE_GENERATOR_OWNER      = S.FED_WASTE_GENERATOR_OWNER,
                D.FED_WASTE_GENERATOR            = S.FED_WASTE_GENERATOR,
                D.STATE_WASTE_GENERATOR_OWNER    = S.STATE_WASTE_GENERATOR_OWNER,
                D.STATE_WASTE_GENERATOR          = S.STATE_WASTE_GENERATOR,
                D.GEN_STATUS                     = S.GEN_STATUS,
                D.UNIV_WASTE                     = S.UNIV_WASTE,
                D.LAND_TYPE                      = S.LAND_TYPE,
                D.STATE_DISTRICT_OWNER           = S.STATE_DISTRICT_OWNER,
                D.STATE_DISTRICT                 = S.STATE_DISTRICT,
                D.SHORT_TERM_GEN_IND             = S.SHORT_TERM_GEN_IND,
                D.IMPORTER_ACTIVITY              = S.IMPORTER_ACTIVITY,
                D.MIXED_WASTE_GENERATOR          = S.MIXED_WASTE_GENERATOR,
                D.TRANSPORTER_ACTIVITY           = S.TRANSPORTER_ACTIVITY,
                D.TRANSFER_FACILITY_IND          = S.TRANSFER_FACILITY_IND,
                D.RECYCLER_ACTIVITY              = S.RECYCLER_ACTIVITY,
                D.ONSITE_BURNER_EXEMPTION        = S.ONSITE_BURNER_EXEMPTION,
                D.FURNACE_EXEMPTION              = S.FURNACE_EXEMPTION,
                D.UNDERGROUND_INJECTION_ACTIVITY = S.UNDERGROUND_INJECTION_ACTIVITY,
                D.UNIVERSAL_WASTE_DEST_FACILITY  = S.UNIVERSAL_WASTE_DEST_FACILITY,
                D.OFFSITE_WASTE_RECEIPT          = S.OFFSITE_WASTE_RECEIPT,
                D.USED_OIL                       = S.USED_OIL,
                D.FEDERAL_UNIVERSAL_WASTE        = S.FEDERAL_UNIVERSAL_WASTE,
                D.AS_FEDERAL_REGULATED_TSDF      = S.AS_FEDERAL_REGULATED_TSDF,
                D.AS_CONVERTED_TSDF              = S.AS_CONVERTED_TSDF,
                D.AS_STATE_REGULATED_TSDF        = S.AS_STATE_REGULATED_TSDF,
                D.FEDERAL_IND                    = S.FEDERAL_IND,
                D.HSM                            = S.HSM,
                D.SUBPART_K                      = S.SUBPART_K,
                D.COMMERCIAL_TSD                 = S.COMMERCIAL_TSD,
                D.TSD                            = S.TSD,
                D.GPRA_PERMIT                    = S.GPRA_PERMIT,
                D.GPRA_RENEWAL                   = S.GPRA_RENEWAL,
                D.PERMIT_RENEWAL_WRKLD           = S.PERMIT_RENEWAL_WRKLD,
                D.PERM_WRKLD                     = S.PERM_WRKLD,
                D.PERM_PROG                      = S.PERM_PROG,
                D.PC_WRKLD                       = S.PC_WRKLD,
                D.CLOS_WRKLD                     = S.CLOS_WRKLD,
                D.GPRACA                         = S.GPRACA,
                D.CA_WRKLD                       = S.CA_WRKLD,
                D.SUBJ_CA                        = S.SUBJ_CA,
                D.SUBJ_CA_NON_TSD                = S.SUBJ_CA_NON_TSD,
                D.SUBJ_CA_TSD_3004               = S.SUBJ_CA_TSD_3004,
                D.SUBJ_CA_DISCRETION             = S.SUBJ_CA_DISCRETION,
                D.NCAPS                          = S.NCAPS,
                D.EC_IND                         = S.EC_IND,
                D.IC_IND                         = S.IC_IND,
                D.CA_725_IND                     = S.CA_725_IND,
                D.CA_750_IND                     = S.CA_750_IND,
                D.OPERATING_TSDF                 = S.OPERATING_TSDF,
                D.FULL_ENFORCEMENT               = S.FULL_ENFORCEMENT,
                D.SNC                            = S.SNC,
                D.BOY_SNC                        = S.BOY_SNC,
                D.BOY_STATE_UNADDRESSED_SNC      = S.BOY_STATE_UNADDRESSED_SNC,
                D.STATE_UNADDRESSED              = S.STATE_UNADDRESSED,
                D.STATE_ADDRESSED                = S.STATE_ADDRESSED,
                D.BOY_STATE_ADDRESSED            = S.BOY_STATE_ADDRESSED,
                D.STATE_SNC_WITH_COMP_SCHED      = S.STATE_SNC_WITH_COMP_SCHED,
                D.BOY_STATE_SNC_WITH_COMP_SCHED  = S.BOY_STATE_SNC_WITH_COMP_SCHED,
                D.EPA_UNADDRESSED                = S.EPA_UNADDRESSED,
                D.BOY_EPA_UNADDRESSED            = S.BOY_EPA_UNADDRESSED,
                D.EPA_ADDRESSED                  = S.EPA_ADDRESSED,
                D.BOY_EPA_ADDRESSED              = S.BOY_EPA_ADDRESSED,
                D.EPA_SNC_WITH_COMP_SCHED        = S.EPA_SNC_WITH_COMP_SCHED,
                D.BOY_EPA_SNC_WITH_COMP_SCHED    = S.BOY_EPA_SNC_WITH_COMP_SCHED,
                D.FA_REQUIRED                    = S.FA_REQUIRED,
                D.HHANDLER_LAST_CHANGE_DATE      = S.HHANDLER_LAST_CHANGE_DATE,
                D.PUBLIC_NOTES                   = S.PUBLIC_NOTES,
                D.NOTES                          = S.NOTES,
                D.RECOGNIZED_TRADER_IMPORTER_IND = S.RECOGNIZED_TRADER_IMPORTER_IND,
                D.RECOGNIZED_TRADER_EXPORTER_IND = S.RECOGNIZED_TRADER_EXPORTER_IND,
                D.SLAB_IMPORTER_IND              = S.SLAB_IMPORTER_IND,
                D.SLAB_EXPORTER_IND              = S.SLAB_EXPORTER_IND,
                D.RECYCLER_NON_STORAGE_IND       = S.RECYCLER_NON_STORAGE_IND,
                D.MANIFEST_BROKER_IND            = S.MANIFEST_BROKER_IND,
                D.SUBPART_P_IND                  = S.SUBPART_P_IND,
                D.LOCATION_LATITUDE              = S.LOCATION_LATITUDE,
                D.LOCATION_LONGITUDE             = S.LOCATION_LONGITUDE,
                D.LOCATION_GIS_PRIM              = S.LOCATION_GIS_PRIM,
                D.LOCATION_GIS_ORIG              = S.LOCATION_GIS_ORIG
    WHERE DECODE(D.RU_REPORT_UNIV_ID, S.RU_REPORT_UNIV_ID, 0, 1) = 1
               OR DECODE(D.HANDLER_ID, S.HANDLER_ID, 0, 1) = 1
               OR DECODE(D.ACTIVITY_LOCATION, S.ACTIVITY_LOCATION, 0, 1) = 1
               OR DECODE(D.SOURCE_TYPE, S.SOURCE_TYPE, 0, 1) = 1
               OR DECODE(D.SEQ_NUMBER, S.SEQ_NUMBER, 0, 1) = 1
               OR DECODE(D.RECEIVE_DATE, S.RECEIVE_DATE, 0, 1) = 1
               OR DECODE(D.HANDLER_NAME, S.HANDLER_NAME, 0, 1) = 1
               OR DECODE(D.NON_NOTIFIER_IND, S.NON_NOTIFIER_IND, 0, 1) = 1
               OR DECODE(D.ACCESSIBILITY, S.ACCESSIBILITY, 0, 1) = 1
               OR DECODE(D.REPORT_CYCLE, S.REPORT_CYCLE, 0, 1) = 1
               OR DECODE(D.REGION, S.REGION, 0, 1) = 1
               OR DECODE(D.STATE, S.STATE, 0, 1) = 1
               OR DECODE(D.EXTRACT_FLAG, S.EXTRACT_FLAG, 0, 1) = 1
               OR DECODE(D.ACTIVE_SITE, S.ACTIVE_SITE, 0, 1) = 1
               OR DECODE(D.COUNTY_CODE, S.COUNTY_CODE, 0, 1) = 1
               OR DECODE(D.COUNTY_NAME, S.COUNTY_NAME, 0, 1) = 1
               OR DECODE(D.LOCATION_STREET_NUMBER, S.LOCATION_STREET_NUMBER, 0, 1) = 1
               OR DECODE(D.LOCATION_STREET1, S.LOCATION_STREET1, 0, 1) = 1
               OR DECODE(D.LOCATION_STREET2, S.LOCATION_STREET2, 0, 1) = 1
               OR DECODE(D.LOCATION_CITY, S.LOCATION_CITY, 0, 1) = 1
               OR DECODE(D.LOCATION_STATE, S.LOCATION_STATE, 0, 1) = 1
               OR DECODE(D.LOCATION_COUNTRY, S.LOCATION_COUNTRY, 0, 1) = 1
               OR DECODE(D.LOCATION_ZIP, S.LOCATION_ZIP, 0, 1) = 1
               OR DECODE(D.MAIL_STREET_NUMBER, S.MAIL_STREET_NUMBER, 0, 1) = 1
               OR DECODE(D.MAIL_STREET1, S.MAIL_STREET1, 0, 1) = 1
               OR DECODE(D.MAIL_STREET2, S.MAIL_STREET2, 0, 1) = 1
               OR DECODE(D.MAIL_CITY, S.MAIL_CITY, 0, 1) = 1
               OR DECODE(D.MAIL_STATE, S.MAIL_STATE, 0, 1) = 1
               OR DECODE(D.MAIL_COUNTRY, S.MAIL_COUNTRY, 0, 1) = 1
               OR DECODE(D.MAIL_ZIP, S.MAIL_ZIP, 0, 1) = 1
               OR DECODE(D.CONTACT_STREET_NUMBER, S.CONTACT_STREET_NUMBER, 0, 1) = 1
               OR DECODE(D.CONTACT_STREET1, S.CONTACT_STREET1, 0, 1) = 1
               OR DECODE(D.CONTACT_STREET2, S.CONTACT_STREET2, 0, 1) = 1
               OR DECODE(D.CONTACT_CITY, S.CONTACT_CITY, 0, 1) = 1
               OR DECODE(D.CONTACT_STATE, S.CONTACT_STATE, 0, 1) = 1
               OR DECODE(D.CONTACT_COUNTRY, S.CONTACT_COUNTRY, 0, 1) = 1
               OR DECODE(D.CONTACT_ZIP, S.CONTACT_ZIP, 0, 1) = 1
               OR DECODE(D.CONTACT_NAME, S.CONTACT_NAME, 0, 1) = 1
               OR DECODE(D.CONTACT_PHONE, S.CONTACT_PHONE, 0, 1) = 1
               OR DECODE(D.CONTACT_FAX, S.CONTACT_FAX, 0, 1) = 1
               OR DECODE(D.CONTACT_EMAIL, S.CONTACT_EMAIL, 0, 1) = 1
               OR DECODE(D.CONTACT_TITLE, S.CONTACT_TITLE, 0, 1) = 1
               OR DECODE(D.OWNER_NAME, S.OWNER_NAME, 0, 1) = 1
               OR DECODE(D.OWNER_TYPE, S.OWNER_TYPE, 0, 1) = 1
               OR DECODE(D.OWNER_SEQ_NUM, S.OWNER_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.OPER_NAME, S.OPER_NAME, 0, 1) = 1
               OR DECODE(D.OPER_TYPE, S.OPER_TYPE, 0, 1) = 1
               OR DECODE(D.OPER_SEQ_NUM, S.OPER_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.NAIC1_CODE, S.NAIC1_CODE, 0, 1) = 1
               OR DECODE(D.NAIC2_CODE, S.NAIC2_CODE, 0, 1) = 1
               OR DECODE(D.NAIC3_CODE, S.NAIC3_CODE, 0, 1) = 1
               OR DECODE(D.NAIC4_CODE, S.NAIC4_CODE, 0, 1) = 1
               OR DECODE(D.IN_HANDLER_UNIVERSE, S.IN_HANDLER_UNIVERSE, 0, 1) = 1
               OR DECODE(D.IN_A_UNIVERSE, S.IN_A_UNIVERSE, 0, 1) = 1
               OR DECODE(D.FED_WASTE_GENERATOR_OWNER, S.FED_WASTE_GENERATOR_OWNER, 0, 1) = 1
               OR DECODE(D.FED_WASTE_GENERATOR, S.FED_WASTE_GENERATOR, 0, 1) = 1
               OR DECODE(D.STATE_WASTE_GENERATOR_OWNER, S.STATE_WASTE_GENERATOR_OWNER, 0, 1) = 1
               OR DECODE(D.STATE_WASTE_GENERATOR, S.STATE_WASTE_GENERATOR, 0, 1) = 1
               OR DECODE(D.GEN_STATUS, S.GEN_STATUS, 0, 1) = 1
               OR DECODE(D.UNIV_WASTE, S.UNIV_WASTE, 0, 1) = 1
               OR DECODE(D.LAND_TYPE, S.LAND_TYPE, 0, 1) = 1
               OR DECODE(D.STATE_DISTRICT_OWNER, S.STATE_DISTRICT_OWNER, 0, 1) = 1
               OR DECODE(D.STATE_DISTRICT, S.STATE_DISTRICT, 0, 1) = 1
               OR DECODE(D.SHORT_TERM_GEN_IND, S.SHORT_TERM_GEN_IND, 0, 1) = 1
               OR DECODE(D.IMPORTER_ACTIVITY, S.IMPORTER_ACTIVITY, 0, 1) = 1
               OR DECODE(D.MIXED_WASTE_GENERATOR, S.MIXED_WASTE_GENERATOR, 0, 1) = 1
               OR DECODE(D.TRANSPORTER_ACTIVITY, S.TRANSPORTER_ACTIVITY, 0, 1) = 1
               OR DECODE(D.TRANSFER_FACILITY_IND, S.TRANSFER_FACILITY_IND, 0, 1) = 1
               OR DECODE(D.RECYCLER_ACTIVITY, S.RECYCLER_ACTIVITY, 0, 1) = 1
               OR DECODE(D.ONSITE_BURNER_EXEMPTION, S.ONSITE_BURNER_EXEMPTION, 0, 1) = 1
               OR DECODE(D.FURNACE_EXEMPTION, S.FURNACE_EXEMPTION, 0, 1) = 1
               OR DECODE(D.UNDERGROUND_INJECTION_ACTIVITY, S.UNDERGROUND_INJECTION_ACTIVITY, 0, 1) = 1
               OR DECODE(D.UNIVERSAL_WASTE_DEST_FACILITY, S.UNIVERSAL_WASTE_DEST_FACILITY, 0, 1) = 1
               OR DECODE(D.OFFSITE_WASTE_RECEIPT, S.OFFSITE_WASTE_RECEIPT, 0, 1) = 1
               OR DECODE(D.USED_OIL, S.USED_OIL, 0, 1) = 1
               OR DECODE(D.FEDERAL_UNIVERSAL_WASTE, S.FEDERAL_UNIVERSAL_WASTE, 0, 1) = 1
               OR DECODE(D.AS_FEDERAL_REGULATED_TSDF, S.AS_FEDERAL_REGULATED_TSDF, 0, 1) = 1
               OR DECODE(D.AS_CONVERTED_TSDF, S.AS_CONVERTED_TSDF, 0, 1) = 1
               OR DECODE(D.AS_STATE_REGULATED_TSDF, S.AS_STATE_REGULATED_TSDF, 0, 1) = 1
               OR DECODE(D.FEDERAL_IND, S.FEDERAL_IND, 0, 1) = 1
               OR DECODE(D.HSM, S.HSM, 0, 1) = 1
               OR DECODE(D.SUBPART_K, S.SUBPART_K, 0, 1) = 1
               OR DECODE(D.COMMERCIAL_TSD, S.COMMERCIAL_TSD, 0, 1) = 1
               OR DECODE(D.TSD, S.TSD, 0, 1) = 1
               OR DECODE(D.GPRA_PERMIT, S.GPRA_PERMIT, 0, 1) = 1
               OR DECODE(D.GPRA_RENEWAL, S.GPRA_RENEWAL, 0, 1) = 1
               OR DECODE(D.PERMIT_RENEWAL_WRKLD, S.PERMIT_RENEWAL_WRKLD, 0, 1) = 1
               OR DECODE(D.PERM_WRKLD, S.PERM_WRKLD, 0, 1) = 1
               OR DECODE(D.PERM_PROG, S.PERM_PROG, 0, 1) = 1
               OR DECODE(D.PC_WRKLD, S.PC_WRKLD, 0, 1) = 1
               OR DECODE(D.CLOS_WRKLD, S.CLOS_WRKLD, 0, 1) = 1
               OR DECODE(D.GPRACA, S.GPRACA, 0, 1) = 1
               OR DECODE(D.CA_WRKLD, S.CA_WRKLD, 0, 1) = 1
               OR DECODE(D.SUBJ_CA, S.SUBJ_CA, 0, 1) = 1
               OR DECODE(D.SUBJ_CA_NON_TSD, S.SUBJ_CA_NON_TSD, 0, 1) = 1
               OR DECODE(D.SUBJ_CA_TSD_3004, S.SUBJ_CA_TSD_3004, 0, 1) = 1
               OR DECODE(D.SUBJ_CA_DISCRETION, S.SUBJ_CA_DISCRETION, 0, 1) = 1
               OR DECODE(D.NCAPS, S.NCAPS, 0, 1) = 1
               OR DECODE(D.EC_IND, S.EC_IND, 0, 1) = 1
               OR DECODE(D.IC_IND, S.IC_IND, 0, 1) = 1
               OR DECODE(D.CA_725_IND, S.CA_725_IND, 0, 1) = 1
               OR DECODE(D.CA_750_IND, S.CA_750_IND, 0, 1) = 1
               OR DECODE(D.OPERATING_TSDF, S.OPERATING_TSDF, 0, 1) = 1
               OR DECODE(D.FULL_ENFORCEMENT, S.FULL_ENFORCEMENT, 0, 1) = 1
               OR DECODE(D.SNC, S.SNC, 0, 1) = 1
               OR DECODE(D.BOY_SNC, S.BOY_SNC, 0, 1) = 1
               OR DECODE(D.BOY_STATE_UNADDRESSED_SNC, S.BOY_STATE_UNADDRESSED_SNC, 0, 1) = 1
               OR DECODE(D.STATE_UNADDRESSED, S.STATE_UNADDRESSED, 0, 1) = 1
               OR DECODE(D.STATE_ADDRESSED, S.STATE_ADDRESSED, 0, 1) = 1
               OR DECODE(D.BOY_STATE_ADDRESSED, S.BOY_STATE_ADDRESSED, 0, 1) = 1
               OR DECODE(D.STATE_SNC_WITH_COMP_SCHED, S.STATE_SNC_WITH_COMP_SCHED, 0, 1) = 1
               OR DECODE(D.BOY_STATE_SNC_WITH_COMP_SCHED, S.BOY_STATE_SNC_WITH_COMP_SCHED, 0, 1) = 1
               OR DECODE(D.EPA_UNADDRESSED, S.EPA_UNADDRESSED, 0, 1) = 1
               OR DECODE(D.BOY_EPA_UNADDRESSED, S.BOY_EPA_UNADDRESSED, 0, 1) = 1
               OR DECODE(D.EPA_ADDRESSED, S.EPA_ADDRESSED, 0, 1) = 1
               OR DECODE(D.BOY_EPA_ADDRESSED, S.BOY_EPA_ADDRESSED, 0, 1) = 1
               OR DECODE(D.EPA_SNC_WITH_COMP_SCHED, S.EPA_SNC_WITH_COMP_SCHED, 0, 1) = 1
               OR DECODE(D.BOY_EPA_SNC_WITH_COMP_SCHED, S.BOY_EPA_SNC_WITH_COMP_SCHED, 0, 1) = 1
               OR DECODE(D.FA_REQUIRED, S.FA_REQUIRED, 0, 1) = 1
               OR DECODE(D.HHANDLER_LAST_CHANGE_DATE, S.HHANDLER_LAST_CHANGE_DATE, 0, 1) = 1
               OR DECODE(D.PUBLIC_NOTES, S.PUBLIC_NOTES, 0, 1) = 1
               OR DECODE(D.NOTES, S.NOTES, 0, 1) = 1
               OR DECODE(D.RECOGNIZED_TRADER_IMPORTER_IND, S.RECOGNIZED_TRADER_IMPORTER_IND, 0, 1) = 1
               OR DECODE(D.RECOGNIZED_TRADER_EXPORTER_IND, S.RECOGNIZED_TRADER_EXPORTER_IND, 0, 1) = 1
               OR DECODE(D.SLAB_IMPORTER_IND, S.SLAB_IMPORTER_IND, 0, 1) = 1
               OR DECODE(D.SLAB_EXPORTER_IND, S.SLAB_EXPORTER_IND, 0, 1) = 1
               OR DECODE(D.RECYCLER_NON_STORAGE_IND, S.RECYCLER_NON_STORAGE_IND, 0, 1) = 1
               OR DECODE(D.MANIFEST_BROKER_IND, S.MANIFEST_BROKER_IND, 0, 1) = 1
               OR DECODE(D.SUBPART_P_IND, S.SUBPART_P_IND, 0, 1) = 1
               OR DECODE(D.LOCATION_LATITUDE, S.LOCATION_LATITUDE, 0, 1) = 1
               OR DECODE(D.LOCATION_LONGITUDE, S.LOCATION_LONGITUDE, 0, 1) = 1
               OR DECODE(D.LOCATION_GIS_PRIM, S.LOCATION_GIS_PRIM, 0, 1) = 1
               OR DECODE(D.LOCATION_GIS_ORIG, S.LOCATION_GIS_ORIG, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (RU_REPORT_UNIV_ID,
                    HANDLER_ID,
                    ACTIVITY_LOCATION,
                    SOURCE_TYPE,
                    SEQ_NUMBER,
                    RECEIVE_DATE,
                    HANDLER_NAME,
                    NON_NOTIFIER_IND,
                    ACCESSIBILITY,
                    REPORT_CYCLE,
                    REGION,
                    STATE,
                    EXTRACT_FLAG,
                    ACTIVE_SITE,
                    COUNTY_CODE,
                    COUNTY_NAME,
                    LOCATION_STREET_NUMBER,
                    LOCATION_STREET1,
                    LOCATION_STREET2,
                    LOCATION_CITY,
                    LOCATION_STATE,
                    LOCATION_COUNTRY,
                    LOCATION_ZIP,
                    MAIL_STREET_NUMBER,
                    MAIL_STREET1,
                    MAIL_STREET2,
                    MAIL_CITY,
                    MAIL_STATE,
                    MAIL_COUNTRY,
                    MAIL_ZIP,
                    CONTACT_STREET_NUMBER,
                    CONTACT_STREET1,
                    CONTACT_STREET2,
                    CONTACT_CITY,
                    CONTACT_STATE,
                    CONTACT_COUNTRY,
                    CONTACT_ZIP,
                    CONTACT_NAME,
                    CONTACT_PHONE,
                    CONTACT_FAX,
                    CONTACT_EMAIL,
                    CONTACT_TITLE,
                    OWNER_NAME,
                    OWNER_TYPE,
                    OWNER_SEQ_NUM,
                    OPER_NAME,
                    OPER_TYPE,
                    OPER_SEQ_NUM,
                    NAIC1_CODE,
                    NAIC2_CODE,
                    NAIC3_CODE,
                    NAIC4_CODE,
                    IN_HANDLER_UNIVERSE,
                    IN_A_UNIVERSE,
                    FED_WASTE_GENERATOR_OWNER,
                    FED_WASTE_GENERATOR,
                    STATE_WASTE_GENERATOR_OWNER,
                    STATE_WASTE_GENERATOR,
                    GEN_STATUS,
                    UNIV_WASTE,
                    LAND_TYPE,
                    STATE_DISTRICT_OWNER,
                    STATE_DISTRICT,
                    SHORT_TERM_GEN_IND,
                    IMPORTER_ACTIVITY,
                    MIXED_WASTE_GENERATOR,
                    TRANSPORTER_ACTIVITY,
                    TRANSFER_FACILITY_IND,
                    RECYCLER_ACTIVITY,
                    ONSITE_BURNER_EXEMPTION,
                    FURNACE_EXEMPTION,
                    UNDERGROUND_INJECTION_ACTIVITY,
                    UNIVERSAL_WASTE_DEST_FACILITY,
                    OFFSITE_WASTE_RECEIPT,
                    USED_OIL,
                    FEDERAL_UNIVERSAL_WASTE,
                    AS_FEDERAL_REGULATED_TSDF,
                    AS_CONVERTED_TSDF,
                    AS_STATE_REGULATED_TSDF,
                    FEDERAL_IND,
                    HSM,
                    SUBPART_K,
                    COMMERCIAL_TSD,
                    TSD,
                    GPRA_PERMIT,
                    GPRA_RENEWAL,
                    PERMIT_RENEWAL_WRKLD,
                    PERM_WRKLD,
                    PERM_PROG,
                    PC_WRKLD,
                    CLOS_WRKLD,
                    GPRACA,
                    CA_WRKLD,
                    SUBJ_CA,
                    SUBJ_CA_NON_TSD,
                    SUBJ_CA_TSD_3004,
                    SUBJ_CA_DISCRETION,
                    NCAPS,
                    EC_IND,
                    IC_IND,
                    CA_725_IND,
                    CA_750_IND,
                    OPERATING_TSDF,
                    FULL_ENFORCEMENT,
                    SNC,
                    BOY_SNC,
                    BOY_STATE_UNADDRESSED_SNC,
                    STATE_UNADDRESSED,
                    STATE_ADDRESSED,
                    BOY_STATE_ADDRESSED,
                    STATE_SNC_WITH_COMP_SCHED,
                    BOY_STATE_SNC_WITH_COMP_SCHED,
                    EPA_UNADDRESSED,
                    BOY_EPA_UNADDRESSED,
                    EPA_ADDRESSED,
                    BOY_EPA_ADDRESSED,
                    EPA_SNC_WITH_COMP_SCHED,
                    BOY_EPA_SNC_WITH_COMP_SCHED,
                    FA_REQUIRED,
                    HHANDLER_LAST_CHANGE_DATE,
                    PUBLIC_NOTES,
                    NOTES,
                    RECOGNIZED_TRADER_IMPORTER_IND,
                    RECOGNIZED_TRADER_EXPORTER_IND,
                    SLAB_IMPORTER_IND,
                    SLAB_EXPORTER_IND,
                    RECYCLER_NON_STORAGE_IND,
                    MANIFEST_BROKER_IND,
                    SUBPART_P_IND,
                    LOCATION_LATITUDE,
                    LOCATION_LONGITUDE,
                    LOCATION_GIS_PRIM,
                    LOCATION_GIS_ORIG)
            VALUES (SEQ_RCRA_GIS_GEO_INFORMATION.NEXTVAL,
                    S.HANDLER_ID,
                    S.ACTIVITY_LOCATION,
                    S.SOURCE_TYPE,
                    S.SEQ_NUMBER,
                    S.RECEIVE_DATE,
                    S.HANDLER_NAME,
                    S.NON_NOTIFIER_IND,
                    S.ACCESSIBILITY,
                    S.REPORT_CYCLE,
                    S.REGION,
                    S.STATE,
                    S.EXTRACT_FLAG,
                    S.ACTIVE_SITE,
                    S.COUNTY_CODE,
                    S.COUNTY_NAME,
                    S.LOCATION_STREET_NUMBER,
                    S.LOCATION_STREET1,
                    S.LOCATION_STREET2,
                    S.LOCATION_CITY,
                    S.LOCATION_STATE,
                    S.LOCATION_COUNTRY,
                    S.LOCATION_ZIP,
                    S.MAIL_STREET_NUMBER,
                    S.MAIL_STREET1,
                    S.MAIL_STREET2,
                    S.MAIL_CITY,
                    S.MAIL_STATE,
                    S.MAIL_COUNTRY,
                    S.MAIL_ZIP,
                    S.CONTACT_STREET_NUMBER,
                    S.CONTACT_STREET1,
                    S.CONTACT_STREET2,
                    S.CONTACT_CITY,
                    S.CONTACT_STATE,
                    S.CONTACT_COUNTRY,
                    S.CONTACT_ZIP,
                    S.CONTACT_NAME,
                    S.CONTACT_PHONE,
                    S.CONTACT_FAX,
                    S.CONTACT_EMAIL,
                    S.CONTACT_TITLE,
                    S.OWNER_NAME,
                    S.OWNER_TYPE,
                    S.OWNER_SEQ_NUM,
                    S.OPER_NAME,
                    S.OPER_TYPE,
                    S.OPER_SEQ_NUM,
                    S.NAIC1_CODE,
                    S.NAIC2_CODE,
                    S.NAIC3_CODE,
                    S.NAIC4_CODE,
                    S.IN_HANDLER_UNIVERSE,
                    S.IN_A_UNIVERSE,
                    S.FED_WASTE_GENERATOR_OWNER,
                    S.FED_WASTE_GENERATOR,
                    S.STATE_WASTE_GENERATOR_OWNER,
                    S.STATE_WASTE_GENERATOR,
                    S.GEN_STATUS,
                    S.UNIV_WASTE,
                    S.LAND_TYPE,
                    S.STATE_DISTRICT_OWNER,
                    S.STATE_DISTRICT,
                    S.SHORT_TERM_GEN_IND,
                    S.IMPORTER_ACTIVITY,
                    S.MIXED_WASTE_GENERATOR,
                    S.TRANSPORTER_ACTIVITY,
                    S.TRANSFER_FACILITY_IND,
                    S.RECYCLER_ACTIVITY,
                    S.ONSITE_BURNER_EXEMPTION,
                    S.FURNACE_EXEMPTION,
                    S.UNDERGROUND_INJECTION_ACTIVITY,
                    S.UNIVERSAL_WASTE_DEST_FACILITY,
                    S.OFFSITE_WASTE_RECEIPT,
                    S.USED_OIL,
                    S.FEDERAL_UNIVERSAL_WASTE,
                    S.AS_FEDERAL_REGULATED_TSDF,
                    S.AS_CONVERTED_TSDF,
                    S.AS_STATE_REGULATED_TSDF,
                    S.FEDERAL_IND,
                    S.HSM,
                    S.SUBPART_K,
                    S.COMMERCIAL_TSD,
                    S.TSD,
                    S.GPRA_PERMIT,
                    S.GPRA_RENEWAL,
                    S.PERMIT_RENEWAL_WRKLD,
                    S.PERM_WRKLD,
                    S.PERM_PROG,
                    S.PC_WRKLD,
                    S.CLOS_WRKLD,
                    S.GPRACA,
                    S.CA_WRKLD,
                    S.SUBJ_CA,
                    S.SUBJ_CA_NON_TSD,
                    S.SUBJ_CA_TSD_3004,
                    S.SUBJ_CA_DISCRETION,
                    S.NCAPS,
                    S.EC_IND,
                    S.IC_IND,
                    S.CA_725_IND,
                    S.CA_750_IND,
                    S.OPERATING_TSDF,
                    S.FULL_ENFORCEMENT,
                    S.SNC,
                    S.BOY_SNC,
                    S.BOY_STATE_UNADDRESSED_SNC,
                    S.STATE_UNADDRESSED,
                    S.STATE_ADDRESSED,
                    S.BOY_STATE_ADDRESSED,
                    S.STATE_SNC_WITH_COMP_SCHED,
                    S.BOY_STATE_SNC_WITH_COMP_SCHED,
                    S.EPA_UNADDRESSED,
                    S.BOY_EPA_UNADDRESSED,
                    S.EPA_ADDRESSED,
                    S.BOY_EPA_ADDRESSED,
                    S.EPA_SNC_WITH_COMP_SCHED,
                    S.BOY_EPA_SNC_WITH_COMP_SCHED,
                    S.FA_REQUIRED,
                    S.HHANDLER_LAST_CHANGE_DATE,
                    S.PUBLIC_NOTES,
                    S.NOTES,
                    S.RECOGNIZED_TRADER_IMPORTER_IND,
                    S.RECOGNIZED_TRADER_EXPORTER_IND,
                    S.SLAB_IMPORTER_IND,
                    S.SLAB_EXPORTER_IND,
                    S.RECYCLER_NON_STORAGE_IND,
                    S.MANIFEST_BROKER_IND,
                    S.SUBPART_P_IND,
                    S.LOCATION_LATITUDE,
                    S.LOCATION_LONGITUDE,
                    S.LOCATION_GIS_PRIM,
                    S.LOCATION_GIS_ORIG);
END;

-- GIS

    PROCEDURE GIS_LOG_HANDLERS AS
        ETL_ID number;
BEGIN
        ETL_ID := SEQ_ETL_RUN.NEXTVAL;
INSERT INTO ETL_RUN
(ETL_RUN_ID,
 RUN_DATE,
 ETL_TYPE)
VALUES (ETL_ID,
        CURRENT_TIMESTAMP,
        'GS');
INSERT INTO ETL_RUN_HANDLER
(ETL_RUN_ID,
 HANDLER_ID,
 STATUS_TYPE)
SELECT ETL_ID,
       HANDLER_ID,
       CASE
           WHEN
               GIS_FAC_SUBM_ID IS NULL
               THEN
               'I'
           ELSE
               'U'
           END
FROM ETL_GIS_FAC_SUBM_VW;
END;

    PROCEDURE GIS_MERGE_FAC_SUBM AS
BEGIN
MERGE INTO RCRA_GIS_FAC_SUBM D
    USING (SELECT *
           FROM ETL_GIS_FAC_SUBM_VW) S
    ON (D.GIS_FAC_SUBM_ID = S.WH_GIS_FAC_SUBM_ID)
    WHEN NOT MATCHED THEN
        INSERT (GIS_FAC_SUBM_ID,
                HANDLER_ID)
            VALUES (SEQ_RCRA_GIS_FAC_SUBM.NEXTVAL,
                    S.HANDLER_ID);
END;

    PROCEDURE GIS_MERGE_RCRA_GIS_GEO_INFO AS
BEGIN
MERGE INTO RCRA_GIS_GEO_INFORMATION D
    USING (SELECT *
           FROM ETL_GIS_GEO_INFORMATION_VW) S
    ON (D.GIS_GEO_INFORMATION_ID = S.WH_GIS_GEO_INFORMATION_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.GEO_INFO_OWNER                 = S.GEO_INFO_OWNER,
                D.GEO_INFO_SEQ_NUM               = S.GEO_INFO_SEQ_NUM,
                D.PERMIT_UNIT_SEQ_NUM            = S.PERMIT_UNIT_SEQ_NUM,
                D.AREA_SEQ_NUM                   = S.AREA_SEQ_NUM,
                D.LOC_COMM_TXT                   = S.LOC_COMM_TXT,
                D.AREA_ACREAGE_MEAS              = S.AREA_ACREAGE_MEAS,
                D.AREA_MEAS_SRC_DATA_OWNER_CODE  = S.AREA_MEAS_SRC_DATA_OWNER_CODE,
                D.AREA_MEAS_SRC_CODE             = S.AREA_MEAS_SRC_CODE,
                D.AREA_MEAS_DATE                 = S.AREA_MEAS_DATE,
                D.DATA_COLL_DATE                 = S.DATA_COLL_DATE,
                D.HORZ_ACC_MEAS                  = S.HORZ_ACC_MEAS,
                D.SRC_MAP_SCALE_NUM              = S.SRC_MAP_SCALE_NUM,
                D.COORD_DATA_SRC_DATA_OWNER_CODE = S.COORD_DATA_SRC_DATA_OWNER_CODE,
                D.COORD_DATA_SRC_CODE            = S.COORD_DATA_SRC_CODE,
                D.GEO_REF_PT_DATA_OWNER_CODE     = S.GEO_REF_PT_DATA_OWNER_CODE,
                D.GEO_REF_PT_CODE                = S.GEO_REF_PT_CODE,
                D.GEOM_TYPE_DATA_OWNER_CODE      = S.GEOM_TYPE_DATA_OWNER_CODE,
                D.GEOM_TYPE_CODE                 = S.GEOM_TYPE_CODE,
                D.HORZ_COLL_METH_DATA_OWNER_CODE = S.HORZ_COLL_METH_DATA_OWNER_CODE,
                D.HORZ_COLL_METH_CODE            = S.HORZ_COLL_METH_CODE,
                D.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE = S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE,
                D.HORZ_COORD_REF_SYS_DATUM_CODE  = S.HORZ_COORD_REF_SYS_DATUM_CODE,
                D.VERF_METH_DATA_OWNER_CODE      = S.VERF_METH_DATA_OWNER_CODE,
                D.VERF_METH_CODE                 = S.VERF_METH_CODE,
                D.LATITUDE                       = S.LATITUDE,
                D.LONGITUDE                      = S.LONGITUDE,
                D.ELEVATION                      = S.ELEVATION,
                D.CREATED_BY_USERID              = S.CREATED_BY_USERID,
                D.G_CREATED_DATE                 = S.G_CREATED_DATE,
                D.DATA_ORIG                      = S.DATA_ORIG,
                D.LAST_UPDT_BY                   = S.LAST_UPDT_BY,
                D.LAST_UPDT_DATE                 = S.LAST_UPDT_DATE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.GEO_INFO_OWNER, S.GEO_INFO_OWNER, 0, 1) = 1
               OR DECODE(D.GEO_INFO_SEQ_NUM, S.GEO_INFO_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.PERMIT_UNIT_SEQ_NUM, S.PERMIT_UNIT_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.AREA_SEQ_NUM, S.AREA_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.LOC_COMM_TXT, S.LOC_COMM_TXT, 0, 1) = 1
               OR DECODE(D.AREA_ACREAGE_MEAS, S.AREA_ACREAGE_MEAS, 0, 1) = 1
               OR DECODE(D.AREA_MEAS_SRC_DATA_OWNER_CODE, S.AREA_MEAS_SRC_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.AREA_MEAS_SRC_CODE, S.AREA_MEAS_SRC_CODE, 0, 1) = 1
               OR DECODE(D.AREA_MEAS_DATE, S.AREA_MEAS_DATE, 0, 1) = 1
               OR DECODE(D.DATA_COLL_DATE, S.DATA_COLL_DATE, 0, 1) = 1
               OR DECODE(D.HORZ_ACC_MEAS, S.HORZ_ACC_MEAS, 0, 1) = 1
               OR DECODE(D.SRC_MAP_SCALE_NUM, S.SRC_MAP_SCALE_NUM, 0, 1) = 1
               OR DECODE(D.COORD_DATA_SRC_DATA_OWNER_CODE, S.COORD_DATA_SRC_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.COORD_DATA_SRC_CODE, S.COORD_DATA_SRC_CODE, 0, 1) = 1
               OR DECODE(D.GEO_REF_PT_DATA_OWNER_CODE, S.GEO_REF_PT_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.GEO_REF_PT_CODE, S.GEO_REF_PT_CODE, 0, 1) = 1
               OR DECODE(D.GEOM_TYPE_DATA_OWNER_CODE, S.GEOM_TYPE_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.GEOM_TYPE_CODE, S.GEOM_TYPE_CODE, 0, 1) = 1
               OR DECODE(D.HORZ_COLL_METH_DATA_OWNER_CODE, S.HORZ_COLL_METH_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.HORZ_COLL_METH_CODE, S.HORZ_COLL_METH_CODE, 0, 1) = 1
               OR DECODE(D.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE, S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE, 0, 1) = 1
               OR DECODE(D.HORZ_COORD_REF_SYS_DATUM_CODE, S.HORZ_COORD_REF_SYS_DATUM_CODE, 0, 1) = 1
               OR DECODE(D.VERF_METH_DATA_OWNER_CODE, S.VERF_METH_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.VERF_METH_CODE, S.VERF_METH_CODE, 0, 1) = 1
               OR DECODE(D.LATITUDE, S.LATITUDE, 0, 1) = 1
               OR DECODE(D.LONGITUDE, S.LONGITUDE, 0, 1) = 1
               OR DECODE(D.ELEVATION, S.ELEVATION, 0, 1) = 1
               OR DECODE(D.CREATED_BY_USERID, S.CREATED_BY_USERID, 0, 1) = 1
               OR DECODE(D.G_CREATED_DATE, S.G_CREATED_DATE, 0, 1) = 1
               OR DECODE(D.DATA_ORIG, S.DATA_ORIG, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_BY, S.LAST_UPDT_BY, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_DATE, S.LAST_UPDT_DATE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (GIS_GEO_INFORMATION_ID,
                    GIS_FAC_SUBM_ID,
                    TRANS_CODE,
                    GEO_INFO_OWNER,
                    GEO_INFO_SEQ_NUM,
                    PERMIT_UNIT_SEQ_NUM,
                    AREA_SEQ_NUM,
                    LOC_COMM_TXT,
                    AREA_ACREAGE_MEAS,
                    AREA_MEAS_SRC_DATA_OWNER_CODE,
                    AREA_MEAS_SRC_CODE,
                    AREA_MEAS_DATE,
                    DATA_COLL_DATE,
                    HORZ_ACC_MEAS,
                    SRC_MAP_SCALE_NUM,
                    COORD_DATA_SRC_DATA_OWNER_CODE,
                    COORD_DATA_SRC_CODE,
                    GEO_REF_PT_DATA_OWNER_CODE,
                    GEO_REF_PT_CODE,
                    GEOM_TYPE_DATA_OWNER_CODE,
                    GEOM_TYPE_CODE,
                    HORZ_COLL_METH_DATA_OWNER_CODE,
                    HORZ_COLL_METH_CODE,
                    HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE,
                    HORZ_COORD_REF_SYS_DATUM_CODE,
                    VERF_METH_DATA_OWNER_CODE,
                    VERF_METH_CODE,
                    LATITUDE,
                    LONGITUDE,
                    ELEVATION,
                    CREATED_BY_USERID,
                    G_CREATED_DATE,
                    DATA_ORIG,
                    LAST_UPDT_BY,
                    LAST_UPDT_DATE)
            VALUES (SEQ_RCRA_GIS_GEO_INFORMATION.NEXTVAL,
                    S.WH_GIS_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.GEO_INFO_OWNER,
                    S.GEO_INFO_SEQ_NUM,
                    S.PERMIT_UNIT_SEQ_NUM,
                    S.AREA_SEQ_NUM,
                    S.LOC_COMM_TXT,
                    S.AREA_ACREAGE_MEAS,
                    S.AREA_MEAS_SRC_DATA_OWNER_CODE,
                    S.AREA_MEAS_SRC_CODE,
                    S.AREA_MEAS_DATE,
                    S.DATA_COLL_DATE,
                    S.HORZ_ACC_MEAS,
                    S.SRC_MAP_SCALE_NUM,
                    S.COORD_DATA_SRC_DATA_OWNER_CODE,
                    S.COORD_DATA_SRC_CODE,
                    S.GEO_REF_PT_DATA_OWNER_CODE,
                    S.GEO_REF_PT_CODE,
                    S.GEOM_TYPE_DATA_OWNER_CODE,
                    S.GEOM_TYPE_CODE,
                    S.HORZ_COLL_METH_DATA_OWNER_CODE,
                    S.HORZ_COLL_METH_CODE,
                    S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE,
                    S.HORZ_COORD_REF_SYS_DATUM_CODE,
                    S.VERF_METH_DATA_OWNER_CODE,
                    S.VERF_METH_CODE,
                    S.LATITUDE,
                    S.LONGITUDE,
                    S.ELEVATION,
                    S.CREATED_BY_USERID,
                    S.G_CREATED_DATE,
                    S.DATA_ORIG,
                    S.LAST_UPDT_BY,
                    S.LAST_UPDT_DATE);
END;

-- CME Delete

    PROCEDURE CME_DELETE_VIOL AS
BEGIN
DELETE
FROM RCRA_CME_VIOL
WHERE CME_VIOL_ID IN (
    SELECT WH_CME_VIOL_ID FROM ETL_CME_VIOL_DEL_VW WHERE WH_CME_VIOL_ID IS NOT NULL
);
END;

    PROCEDURE CME_DELETE_EVAL AS
BEGIN
DELETE
FROM RCRA_CME_EVAL
WHERE CME_EVAL_ID IN (
    SELECT WH_CME_EVAL_ID FROM ETL_CME_EVAL_DEL_VW WHERE WH_CME_EVAL_ID IS NOT NULL
);
END;

    PROCEDURE CME_DELETE_ENFRC_ACT AS
BEGIN
DELETE
FROM RCRA_CME_ENFRC_ACT
WHERE CME_ENFRC_ACT_ID IN (
    SELECT WH_CME_ENFR_ACT_ID FROM ETL_CME_ENFRC_ACT_DEL_VW WHERE WH_CME_ENFR_ACT_ID IS NOT NULL
);
END;

-- CME

    PROCEDURE CME_LOG_HANDLERS AS
        ETL_ID number;
BEGIN
        ETL_ID := SEQ_ETL_RUN.NEXTVAL;
INSERT INTO ETL_RUN
(ETL_RUN_ID,
 RUN_DATE,
 ETL_TYPE)
VALUES (ETL_ID,
        CURRENT_TIMESTAMP,
        'CE');
INSERT INTO ETL_RUN_HANDLER
(ETL_RUN_ID,
 HANDLER_ID,
 STATUS_TYPE)
SELECT ETL_ID,
       EPA_HDLR_ID,
       CASE
           WHEN
               CME_FAC_SUBM_ID IS NULL
               THEN
               'I'
           ELSE
               'U'
           END
FROM ETL_CME_FAC_SUBM_VW;
END;

    PROCEDURE CME_MERGE_FAC_SUBM AS
BEGIN
MERGE INTO RCRA_CME_FAC_SUBM D
    USING (SELECT *
           FROM ETL_CME_FAC_SUBM_VW) S
    ON (D.CME_FAC_SUBM_ID = S.WH_CME_FAC_SUBM_ID)
    WHEN NOT MATCHED THEN
        INSERT (CME_FAC_SUBM_ID,
                EPA_HDLR_ID)
            VALUES (SEQ_RCRA_CME_FAC_SUBM.NEXTVAL,
                    S.EPA_HDLR_ID);
END;

    PROCEDURE CME_MERGE_VIOL AS
BEGIN
MERGE INTO RCRA_CME_VIOL D
    USING (SELECT *
           FROM ETL_CME_VIOL_VW) S
    ON (D.CME_VIOL_ID = S.WH_CME_VIOL_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE           = S.TRANS_CODE,
                D.VIOL_ACT_LOC         = S.VIOL_ACT_LOC,
                D.VIOL_SEQ_NUM         = S.VIOL_SEQ_NUM,
                D.AGN_WHICH_DTRM_VIOL  = S.AGN_WHICH_DTRM_VIOL,
                D.VIOL_TYPE_OWNER      = S.VIOL_TYPE_OWNER,
                D.VIOL_TYPE            = S.VIOL_TYPE,
                D.FORMER_CITATION_NAME = S.FORMER_CITATION_NAME,
                D.VIOL_DTRM_DATE       = S.VIOL_DTRM_DATE,
                D.RTN_COMPL_ACTL_DATE  = S.RTN_COMPL_ACTL_DATE,
                D.RTN_TO_COMPL_QUAL    = S.RTN_TO_COMPL_QUAL,
                D.VIOL_RESP_AGN        = S.VIOL_RESP_AGN,
                D.NOTES                = S.NOTES,
                D.CREATED_BY_USERID    = S.CREATED_BY_USERID,
                D.C_CREATED_DATE       = S.C_CREATED_DATE,
                D.LAST_UPDT_BY         = S.LAST_UPDT_BY,
                D.LAST_UPDT_DATE       = S.LAST_UPDT_DATE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.VIOL_ACT_LOC, S.VIOL_ACT_LOC, 0, 1) = 1
               OR DECODE(D.VIOL_SEQ_NUM, S.VIOL_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.AGN_WHICH_DTRM_VIOL, S.AGN_WHICH_DTRM_VIOL, 0, 1) = 1
               OR DECODE(D.VIOL_TYPE_OWNER, S.VIOL_TYPE_OWNER, 0, 1) = 1
               OR DECODE(D.VIOL_TYPE, S.VIOL_TYPE, 0, 1) = 1
               OR DECODE(D.FORMER_CITATION_NAME, S.FORMER_CITATION_NAME, 0, 1) = 1
               OR DECODE(D.VIOL_DTRM_DATE, S.VIOL_DTRM_DATE, 0, 1) = 1
               OR DECODE(D.RTN_COMPL_ACTL_DATE, S.RTN_COMPL_ACTL_DATE, 0, 1) = 1
               OR DECODE(D.RTN_TO_COMPL_QUAL, S.RTN_TO_COMPL_QUAL, 0, 1) = 1
               OR DECODE(D.VIOL_RESP_AGN, S.VIOL_RESP_AGN, 0, 1) = 1
               OR DECODE(D.NOTES, S.NOTES, 0, 1) = 1
               OR DECODE(D.CREATED_BY_USERID, S.CREATED_BY_USERID, 0, 1) = 1
               OR DECODE(D.C_CREATED_DATE, S.C_CREATED_DATE, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_BY, S.LAST_UPDT_BY, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_DATE, S.LAST_UPDT_DATE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CME_VIOL_ID,
                    CME_FAC_SUBM_ID,
                    TRANS_CODE,
                    VIOL_ACT_LOC,
                    VIOL_SEQ_NUM,
                    AGN_WHICH_DTRM_VIOL,
                    VIOL_TYPE_OWNER,
                    VIOL_TYPE,
                    FORMER_CITATION_NAME,
                    VIOL_DTRM_DATE,
                    RTN_COMPL_ACTL_DATE,
                    RTN_TO_COMPL_QUAL,
                    VIOL_RESP_AGN,
                    NOTES,
                    CREATED_BY_USERID,
                    C_CREATED_DATE,
                    LAST_UPDT_BY,
                    LAST_UPDT_DATE)
            VALUES (SEQ_RCRA_CME_VIOL.NEXTVAL,
                    S.WH_CME_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.VIOL_ACT_LOC,
                    S.VIOL_SEQ_NUM,
                    S.AGN_WHICH_DTRM_VIOL,
                    S.VIOL_TYPE_OWNER,
                    S.VIOL_TYPE,
                    S.FORMER_CITATION_NAME,
                    S.VIOL_DTRM_DATE,
                    S.RTN_COMPL_ACTL_DATE,
                    S.RTN_TO_COMPL_QUAL,
                    S.VIOL_RESP_AGN,
                    S.NOTES,
                    S.CREATED_BY_USERID,
                    S.C_CREATED_DATE,
                    S.LAST_UPDT_BY,
                    S.LAST_UPDT_DATE);
END;

    PROCEDURE CME_MERGE_EVAL AS
BEGIN
MERGE INTO RCRA_CME_EVAL D
    USING (SELECT *
           FROM ETL_CME_EVAL_VW) S
    ON (D.CME_EVAL_ID = S.WH_CME_EVAL_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                  = S.TRANS_CODE,
                D.EVAL_ACT_LOC                = S.EVAL_ACT_LOC,
                D.EVAL_IDEN                   = S.EVAL_IDEN,
                D.EVAL_START_DATE             = S.EVAL_START_DATE,
                D.EVAL_RESP_AGN               = S.EVAL_RESP_AGN,
                D.DAY_ZERO                    = S.DAY_ZERO,
                D.FOUND_VIOL                  = S.FOUND_VIOL,
                D.CTZN_CPLT_IND               = S.CTZN_CPLT_IND,
                D.MULTIMEDIA_IND              = S.MULTIMEDIA_IND,
                D.SAMPL_IND                   = S.SAMPL_IND,
                D.NOT_SUBTL_C_IND             = S.NOT_SUBTL_C_IND,
                D.EVAL_TYPE_OWNER             = S.EVAL_TYPE_OWNER,
                D.EVAL_TYPE                   = S.EVAL_TYPE,
                D.FOCUS_AREA_OWNER            = S.FOCUS_AREA_OWNER,
                D.FOCUS_AREA                  = S.FOCUS_AREA,
                D.EVAL_RESP_PERSON_IDEN_OWNER = S.EVAL_RESP_PERSON_IDEN_OWNER,
                D.EVAL_RESP_PERSON_IDEN       = S.EVAL_RESP_PERSON_IDEN,
                D.EVAL_RESP_SUBORG_OWNER      = S.EVAL_RESP_SUBORG_OWNER,
                D.EVAL_RESP_SUBORG            = S.EVAL_RESP_SUBORG,
                D.NOTES                       = S.NOTES,
                D.NOC_DATE                    = S.NOC_DATE,
                D.CREATED_BY_USERID           = S.CREATED_BY_USERID,
                D.C_CREATED_DATE              = S.C_CREATED_DATE,
                D.DATA_ORIG                   = S.DATA_ORIG,
                D.LAST_UPDT_BY                = S.LAST_UPDT_BY,
                D.LAST_UPDT_DATE              = S.LAST_UPDT_DATE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.EVAL_ACT_LOC, S.EVAL_ACT_LOC, 0, 1) = 1
               OR DECODE(D.EVAL_IDEN, S.EVAL_IDEN, 0, 1) = 1
               OR DECODE(D.EVAL_START_DATE, S.EVAL_START_DATE, 0, 1) = 1
               OR DECODE(D.EVAL_RESP_AGN, S.EVAL_RESP_AGN, 0, 1) = 1
               OR DECODE(D.DAY_ZERO, S.DAY_ZERO, 0, 1) = 1
               OR DECODE(D.FOUND_VIOL, S.FOUND_VIOL, 0, 1) = 1
               OR DECODE(D.CTZN_CPLT_IND, S.CTZN_CPLT_IND, 0, 1) = 1
               OR DECODE(D.MULTIMEDIA_IND, S.MULTIMEDIA_IND, 0, 1) = 1
               OR DECODE(D.SAMPL_IND, S.SAMPL_IND, 0, 1) = 1
               OR DECODE(D.NOT_SUBTL_C_IND, S.NOT_SUBTL_C_IND, 0, 1) = 1
               OR DECODE(D.EVAL_TYPE_OWNER, S.EVAL_TYPE_OWNER, 0, 1) = 1
               OR DECODE(D.EVAL_TYPE, S.EVAL_TYPE, 0, 1) = 1
               OR DECODE(D.FOCUS_AREA_OWNER, S.FOCUS_AREA_OWNER, 0, 1) = 1
               OR DECODE(D.FOCUS_AREA, S.FOCUS_AREA, 0, 1) = 1
               OR DECODE(D.EVAL_RESP_PERSON_IDEN_OWNER, S.EVAL_RESP_PERSON_IDEN_OWNER, 0, 1) = 1
               OR DECODE(D.EVAL_RESP_PERSON_IDEN, S.EVAL_RESP_PERSON_IDEN, 0, 1) = 1
               OR DECODE(D.EVAL_RESP_SUBORG_OWNER, S.EVAL_RESP_SUBORG_OWNER, 0, 1) = 1
               OR DECODE(D.EVAL_RESP_SUBORG, S.EVAL_RESP_SUBORG, 0, 1) = 1
               OR DECODE(D.NOTES, S.NOTES, 0, 1) = 1
               OR DECODE(D.NOC_DATE, S.NOC_DATE, 0, 1) = 1
               OR DECODE(D.CREATED_BY_USERID, S.CREATED_BY_USERID, 0, 1) = 1
               OR DECODE(D.C_CREATED_DATE, S.C_CREATED_DATE, 0, 1) = 1
               OR DECODE(D.DATA_ORIG, S.DATA_ORIG, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_BY, S.LAST_UPDT_BY, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_DATE, S.LAST_UPDT_DATE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CME_EVAL_ID,
                    CME_FAC_SUBM_ID,
                    TRANS_CODE,
                    EVAL_ACT_LOC,
                    EVAL_IDEN,
                    EVAL_START_DATE,
                    EVAL_RESP_AGN,
                    DAY_ZERO,
                    FOUND_VIOL,
                    CTZN_CPLT_IND,
                    MULTIMEDIA_IND,
                    SAMPL_IND,
                    NOT_SUBTL_C_IND,
                    EVAL_TYPE_OWNER,
                    EVAL_TYPE,
                    FOCUS_AREA_OWNER,
                    FOCUS_AREA,
                    EVAL_RESP_PERSON_IDEN_OWNER,
                    EVAL_RESP_PERSON_IDEN,
                    EVAL_RESP_SUBORG_OWNER,
                    EVAL_RESP_SUBORG,
                    NOTES,
                    NOC_DATE,
                    CREATED_BY_USERID,
                    C_CREATED_DATE,
                    DATA_ORIG,
                    LAST_UPDT_BY,
                    LAST_UPDT_DATE)
            VALUES (SEQ_RCRA_CME_EVAL.NEXTVAL,
                    S.WH_CME_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.EVAL_ACT_LOC,
                    S.EVAL_IDEN,
                    S.EVAL_START_DATE,
                    S.EVAL_RESP_AGN,
                    S.DAY_ZERO,
                    S.FOUND_VIOL,
                    S.CTZN_CPLT_IND,
                    S.MULTIMEDIA_IND,
                    S.SAMPL_IND,
                    S.NOT_SUBTL_C_IND,
                    S.EVAL_TYPE_OWNER,
                    S.EVAL_TYPE,
                    S.FOCUS_AREA_OWNER,
                    S.FOCUS_AREA,
                    S.EVAL_RESP_PERSON_IDEN_OWNER,
                    S.EVAL_RESP_PERSON_IDEN,
                    S.EVAL_RESP_SUBORG_OWNER,
                    S.EVAL_RESP_SUBORG,
                    S.NOTES,
                    S.NOC_DATE,
                    S.CREATED_BY_USERID,
                    S.C_CREATED_DATE,
                    S.DATA_ORIG,
                    S.LAST_UPDT_BY,
                    S.LAST_UPDT_DATE);
END;

    PROCEDURE CME_MERGE_EVAL_COMMIT AS
BEGIN
MERGE INTO RCRA_CME_EVAL_COMMIT D
    USING (SELECT *
           FROM ETL_CME_EVAL_COMMIT_VW) S
    ON (D.CME_EVAL_COMMIT_ID = S.WH_CME_EVAL_COMMIT_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE     = S.TRANS_CODE,
                D.COMMIT_LEAD    = S.COMMIT_LEAD,
                D.COMMIT_SEQ_NUM = S.COMMIT_SEQ_NUM
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.COMMIT_LEAD, S.COMMIT_LEAD, 0, 1) = 1
               OR DECODE(D.COMMIT_SEQ_NUM, S.COMMIT_SEQ_NUM, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CME_EVAL_COMMIT_ID,
                    CME_EVAL_ID,
                    TRANS_CODE,
                    COMMIT_LEAD,
                    COMMIT_SEQ_NUM)
            VALUES (SEQ_RCRA_CME_EVAL_COMMIT.NEXTVAL,
                    S.WH_CME_EVAL_ID,
                    S.TRANS_CODE,
                    S.COMMIT_LEAD,
                    S.COMMIT_SEQ_NUM);
END;

    PROCEDURE CME_MERGE_EVAL_VIOL AS
BEGIN
MERGE INTO RCRA_CME_EVAL_VIOL D
    USING (SELECT *
           FROM ETL_CME_EVAL_VIOL_VW) S
    ON (D.CME_EVAL_VIOL_ID = S.WH_CME_EVAL_VIOL_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE          = S.TRANS_CODE,
                D.VIOL_SEQ_NUM        = S.VIOL_SEQ_NUM,
                D.VIOL_ACT_LOC        = S.VIOL_ACT_LOC,
                D.AGN_WHICH_DTRM_VIOL = S.AGN_WHICH_DTRM_VIOL
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.VIOL_SEQ_NUM, S.VIOL_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.VIOL_ACT_LOC, S.VIOL_ACT_LOC, 0, 1) = 1
               OR DECODE(D.AGN_WHICH_DTRM_VIOL, S.AGN_WHICH_DTRM_VIOL, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CME_EVAL_VIOL_ID,
                    CME_EVAL_ID,
                    TRANS_CODE,
                    VIOL_SEQ_NUM,
                    VIOL_ACT_LOC,
                    AGN_WHICH_DTRM_VIOL)
            VALUES (SEQ_RCRA_CME_EVAL_VIOL.NEXTVAL,
                    S.WH_CME_EVAL_ID,
                    S.TRANS_CODE,
                    S.VIOL_SEQ_NUM,
                    S.VIOL_ACT_LOC,
                    S.AGN_WHICH_DTRM_VIOL);
END;

    PROCEDURE CME_MERGE_CITATION AS
BEGIN
MERGE INTO RCRA_CME_CITATION D
    USING (SELECT *
           FROM ETL_CME_CITATION_VW) S
    ON (D.CME_CITATION_ID = S.WH_CME_CITATION_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE            = S.TRANS_CODE,
                D.CITATION_NAME_SEQ_NUM = S.CITATION_NAME_SEQ_NUM,
                D.CITATION_NAME         = S.CITATION_NAME,
                D.CITATION_NAME_OWNER   = S.CITATION_NAME_OWNER,
                D.CITATION_NAME_TYPE    = S.CITATION_NAME_TYPE,
                D.NOTES                 = S.NOTES
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.CITATION_NAME_SEQ_NUM, S.CITATION_NAME_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.CITATION_NAME, S.CITATION_NAME, 0, 1) = 1
               OR DECODE(D.CITATION_NAME_OWNER, S.CITATION_NAME_OWNER, 0, 1) = 1
               OR DECODE(D.CITATION_NAME_TYPE, S.CITATION_NAME_TYPE, 0, 1) = 1
               OR DECODE(D.NOTES, S.NOTES, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CME_CITATION_ID,
                    CME_VIOL_ID,
                    TRANS_CODE,
                    CITATION_NAME_SEQ_NUM,
                    CITATION_NAME,
                    CITATION_NAME_OWNER,
                    CITATION_NAME_TYPE,
                    NOTES)
            VALUES (SEQ_RCRA_CME_CITATION.NEXTVAL,
                    S.WH_CME_VIOL_ID,
                    S.TRANS_CODE,
                    S.CITATION_NAME_SEQ_NUM,
                    S.CITATION_NAME,
                    S.CITATION_NAME_OWNER,
                    S.CITATION_NAME_TYPE,
                    S.NOTES);
END;

    PROCEDURE CME_MERGE_ENFRC_ACT AS
BEGIN
MERGE INTO RCRA_CME_ENFRC_ACT D
    USING (SELECT *
           FROM ETL_CME_ENFRC_ACT_VW) S
    ON (D.CME_ENFRC_ACT_ID = S.WH_CME_ENFR_ACT_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                    = S.TRANS_CODE,
                D.ENFRC_AGN_LOC_NAME            = S.ENFRC_AGN_LOC_NAME,
                D.ENFRC_ACT_IDEN                = S.ENFRC_ACT_IDEN,
                D.ENFRC_ACT_DATE                = S.ENFRC_ACT_DATE,
                D.ENFRC_AGN_NAME                = S.ENFRC_AGN_NAME,
                D.ENFRC_DOCKET_NUM              = S.ENFRC_DOCKET_NUM,
                D.ENFRC_ATTRY                   = S.ENFRC_ATTRY,
                D.CORCT_ACT_COMPT               = S.CORCT_ACT_COMPT,
                D.CNST_AGMT_FINAL_ORDER_SEQ_NUM = S.CNST_AGMT_FINAL_ORDER_SEQ_NUM,
                D.APPEAL_INIT_DATE              = S.APPEAL_INIT_DATE,
                D.APPEAL_RSLN_DATE              = S.APPEAL_RSLN_DATE,
                D.DISP_STAT_DATE                = S.DISP_STAT_DATE,
                D.DISP_STAT_OWNER               = S.DISP_STAT_OWNER,
                D.DISP_STAT                     = S.DISP_STAT,
                D.ENFRC_OWNER                   = S.ENFRC_OWNER,
                D.ENFRC_TYPE                    = S.ENFRC_TYPE,
                D.ENFRC_RESP_PERSON_OWNER       = S.ENFRC_RESP_PERSON_OWNER,
                D.ENFRC_RESP_PERSON_IDEN        = S.ENFRC_RESP_PERSON_IDEN,
                D.ENFRC_RESP_SUBORG_OWNER       = S.ENFRC_RESP_SUBORG_OWNER,
                D.ENFRC_RESP_SUBORG             = S.ENFRC_RESP_SUBORG,
                D.NOTES                         = S.NOTES,
                D.CREATED_BY_USERID             = S.CREATED_BY_USERID,
                D.C_CREATED_DATE                = S.C_CREATED_DATE,
                D.DATA_ORIG                     = S.DATA_ORIG,
                D.LAST_UPDT_BY                  = S.LAST_UPDT_BY,
                D.LAST_UPDT_DATE                = S.LAST_UPDT_DATE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.ENFRC_AGN_LOC_NAME, S.ENFRC_AGN_LOC_NAME, 0, 1) = 1
               OR DECODE(D.ENFRC_ACT_IDEN, S.ENFRC_ACT_IDEN, 0, 1) = 1
               OR DECODE(D.ENFRC_ACT_DATE, S.ENFRC_ACT_DATE, 0, 1) = 1
               OR DECODE(D.ENFRC_AGN_NAME, S.ENFRC_AGN_NAME, 0, 1) = 1
               OR DECODE(D.ENFRC_DOCKET_NUM, S.ENFRC_DOCKET_NUM, 0, 1) = 1
               OR DECODE(D.ENFRC_ATTRY, S.ENFRC_ATTRY, 0, 1) = 1
               OR DECODE(D.CORCT_ACT_COMPT, S.CORCT_ACT_COMPT, 0, 1) = 1
               OR DECODE(D.CNST_AGMT_FINAL_ORDER_SEQ_NUM, S.CNST_AGMT_FINAL_ORDER_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.APPEAL_INIT_DATE, S.APPEAL_INIT_DATE, 0, 1) = 1
               OR DECODE(D.APPEAL_RSLN_DATE, S.APPEAL_RSLN_DATE, 0, 1) = 1
               OR DECODE(D.DISP_STAT_DATE, S.DISP_STAT_DATE, 0, 1) = 1
               OR DECODE(D.DISP_STAT_OWNER, S.DISP_STAT_OWNER, 0, 1) = 1
               OR DECODE(D.DISP_STAT, S.DISP_STAT, 0, 1) = 1
               OR DECODE(D.ENFRC_OWNER, S.ENFRC_OWNER, 0, 1) = 1
               OR DECODE(D.ENFRC_TYPE, S.ENFRC_TYPE, 0, 1) = 1
               OR DECODE(D.ENFRC_RESP_PERSON_OWNER, S.ENFRC_RESP_PERSON_OWNER, 0, 1) = 1
               OR DECODE(D.ENFRC_RESP_PERSON_IDEN, S.ENFRC_RESP_PERSON_IDEN, 0, 1) = 1
               OR DECODE(D.ENFRC_RESP_SUBORG_OWNER, S.ENFRC_RESP_SUBORG_OWNER, 0, 1) = 1
               OR DECODE(D.ENFRC_RESP_SUBORG, S.ENFRC_RESP_SUBORG, 0, 1) = 1
               OR DECODE(D.NOTES, S.NOTES, 0, 1) = 1
               OR DECODE(D.CREATED_BY_USERID, S.CREATED_BY_USERID, 0, 1) = 1
               OR DECODE(D.C_CREATED_DATE, S.C_CREATED_DATE, 0, 1) = 1
               OR DECODE(D.DATA_ORIG, S.DATA_ORIG, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_BY, S.LAST_UPDT_BY, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_DATE, S.LAST_UPDT_DATE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CME_ENFRC_ACT_ID,
                    CME_FAC_SUBM_ID,
                    TRANS_CODE,
                    ENFRC_AGN_LOC_NAME,
                    ENFRC_ACT_IDEN,
                    ENFRC_ACT_DATE,
                    ENFRC_AGN_NAME,
                    ENFRC_DOCKET_NUM,
                    ENFRC_ATTRY,
                    CORCT_ACT_COMPT,
                    CNST_AGMT_FINAL_ORDER_SEQ_NUM,
                    APPEAL_INIT_DATE,
                    APPEAL_RSLN_DATE,
                    DISP_STAT_DATE,
                    DISP_STAT_OWNER,
                    DISP_STAT,
                    ENFRC_OWNER,
                    ENFRC_TYPE,
                    ENFRC_RESP_PERSON_OWNER,
                    ENFRC_RESP_PERSON_IDEN,
                    ENFRC_RESP_SUBORG_OWNER,
                    ENFRC_RESP_SUBORG,
                    NOTES,
                    CREATED_BY_USERID,
                    C_CREATED_DATE,
                    DATA_ORIG,
                    LAST_UPDT_BY,
                    LAST_UPDT_DATE)
            VALUES (SEQ_RCRA_CME_ENFRC_ACT.NEXTVAL,
                    S.WH_CME_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.ENFRC_AGN_LOC_NAME,
                    S.ENFRC_ACT_IDEN,
                    S.ENFRC_ACT_DATE,
                    S.ENFRC_AGN_NAME,
                    S.ENFRC_DOCKET_NUM,
                    S.ENFRC_ATTRY,
                    S.CORCT_ACT_COMPT,
                    S.CNST_AGMT_FINAL_ORDER_SEQ_NUM,
                    S.APPEAL_INIT_DATE,
                    S.APPEAL_RSLN_DATE,
                    S.DISP_STAT_DATE,
                    S.DISP_STAT_OWNER,
                    S.DISP_STAT,
                    S.ENFRC_OWNER,
                    S.ENFRC_TYPE,
                    S.ENFRC_RESP_PERSON_OWNER,
                    S.ENFRC_RESP_PERSON_IDEN,
                    S.ENFRC_RESP_SUBORG_OWNER,
                    S.ENFRC_RESP_SUBORG,
                    S.NOTES,
                    S.CREATED_BY_USERID,
                    S.C_CREATED_DATE,
                    S.DATA_ORIG,
                    S.LAST_UPDT_BY,
                    S.LAST_UPDT_DATE);
END;

    PROCEDURE CME_MERGE_CSNY_DATE AS
BEGIN
MERGE INTO RCRA_CME_CSNY_DATE D
    USING (SELECT *
           FROM ETL_CME_CSNY_DATE_VW) S
    ON (D.CME_CSNY_DATE_ID = S.WH_CME_CSNY_DATE_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE = S.TRANS_CODE,
                D.SNY_DATE   = S.SNY_DATE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.SNY_DATE, S.SNY_DATE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CME_CSNY_DATE_ID,
                    CME_ENFRC_ACT_ID,
                    TRANS_CODE,
                    SNY_DATE)
            VALUES (SEQ_RCRA_CME_CSNY_DATE.NEXTVAL,
                    S.WH_CME_ENFR_ACT_ID,
                    S.TRANS_CODE,
                    S.SNY_DATE);
END;

    PROCEDURE CME_MERGE_MEDIA AS
BEGIN
MERGE INTO RCRA_CME_MEDIA D
    USING (SELECT *
           FROM ETL_CME_MEDIA_VW) S
    ON (D.CME_MEDIA_ID = S.WH_CME_MEDIA_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE            = S.TRANS_CODE,
                D.MULTIMEDIA_CODE_OWNER = S.MULTIMEDIA_CODE_OWNER,
                D.MULTIMEDIA_CODE       = S.MULTIMEDIA_CODE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.MULTIMEDIA_CODE_OWNER, S.MULTIMEDIA_CODE_OWNER, 0, 1) = 1
               OR DECODE(D.MULTIMEDIA_CODE, S.MULTIMEDIA_CODE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CME_MEDIA_ID,
                    CME_ENFRC_ACT_ID,
                    TRANS_CODE,
                    MULTIMEDIA_CODE_OWNER,
                    MULTIMEDIA_CODE)
            VALUES (SEQ_RCRA_CME_MEDIA.NEXTVAL,
                    S.WH_CME_ENFR_ACT_ID,
                    S.TRANS_CODE,
                    S.MULTIMEDIA_CODE_OWNER,
                    S.MULTIMEDIA_CODE);
END;

    PROCEDURE CME_MERGE_MILESTONE AS
BEGIN
MERGE INTO RCRA_CME_MILESTONE D
    USING (SELECT *
           FROM ETL_CME_MILESTONE_VW) S
    ON (D.CME_MILESTONE_ID = S.WH_CME_MILESTONE_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE               = S.TRANS_CODE,
                D.MILESTONE_SEQ_NUM        = S.MILESTONE_SEQ_NUM,
                D.TECH_RQMT_IDEN           = S.TECH_RQMT_IDEN,
                D.TECH_RQMT_DESC           = S.TECH_RQMT_DESC,
                D.MILESTONE_SCHD_COMP_DATE = S.MILESTONE_SCHD_COMP_DATE,
                D.MILESTONE_ACTL_COMP_DATE = S.MILESTONE_ACTL_COMP_DATE,
                D.MILESTONE_DFLT_DATE      = S.MILESTONE_DFLT_DATE,
                D.NOTES                    = S.NOTES
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.MILESTONE_SEQ_NUM, S.MILESTONE_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.TECH_RQMT_IDEN, S.TECH_RQMT_IDEN, 0, 1) = 1
               OR DECODE(D.TECH_RQMT_DESC, S.TECH_RQMT_DESC, 0, 1) = 1
               OR DECODE(D.MILESTONE_SCHD_COMP_DATE, S.MILESTONE_SCHD_COMP_DATE, 0, 1) = 1
               OR DECODE(D.MILESTONE_ACTL_COMP_DATE, S.MILESTONE_ACTL_COMP_DATE, 0, 1) = 1
               OR DECODE(D.MILESTONE_DFLT_DATE, S.MILESTONE_DFLT_DATE, 0, 1) = 1
               OR DECODE(D.NOTES, S.NOTES, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CME_MILESTONE_ID,
                    CME_ENFRC_ACT_ID,
                    TRANS_CODE,
                    MILESTONE_SEQ_NUM,
                    TECH_RQMT_IDEN,
                    TECH_RQMT_DESC,
                    MILESTONE_SCHD_COMP_DATE,
                    MILESTONE_ACTL_COMP_DATE,
                    MILESTONE_DFLT_DATE,
                    NOTES)
            VALUES (SEQ_RCRA_CME_MILESTONE.NEXTVAL,
                    S.WH_CME_ENFR_ACT_ID,
                    S.TRANS_CODE,
                    S.MILESTONE_SEQ_NUM,
                    S.TECH_RQMT_IDEN,
                    S.TECH_RQMT_DESC,
                    S.MILESTONE_SCHD_COMP_DATE,
                    S.MILESTONE_ACTL_COMP_DATE,
                    S.MILESTONE_DFLT_DATE,
                    S.NOTES);
END;

    PROCEDURE CME_MERGE_RQST AS
BEGIN
MERGE INTO RCRA_CME_RQST D
    USING (SELECT *
           FROM ETL_CME_RQST_VW) S
    ON (D.CME_RQST_ID = S.WH_CME_RQST_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE     = S.TRANS_CODE,
                D.RQST_SEQ_NUM   = S.RQST_SEQ_NUM,
                D.DATE_OF_RQST   = S.DATE_OF_RQST,
                D.DATE_RESP_RCVD = S.DATE_RESP_RCVD,
                D.RQST_AGN       = S.RQST_AGN,
                D.NOTES          = S.NOTES
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.RQST_SEQ_NUM, S.RQST_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.DATE_OF_RQST, S.DATE_OF_RQST, 0, 1) = 1
               OR DECODE(D.DATE_RESP_RCVD, S.DATE_RESP_RCVD, 0, 1) = 1
               OR DECODE(D.RQST_AGN, S.RQST_AGN, 0, 1) = 1
               OR DECODE(D.NOTES, S.NOTES, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CME_RQST_ID,
                    CME_EVAL_ID,
                    TRANS_CODE,
                    RQST_SEQ_NUM,
                    DATE_OF_RQST,
                    DATE_RESP_RCVD,
                    RQST_AGN,
                    NOTES)
            VALUES (SEQ_RCRA_CME_RQST.NEXTVAL,
                    S.WH_CME_EVAL_ID,
                    S.TRANS_CODE,
                    S.RQST_SEQ_NUM,
                    S.DATE_OF_RQST,
                    S.DATE_RESP_RCVD,
                    S.RQST_AGN,
                    S.NOTES);
END;

    PROCEDURE CME_MERGE_SUPP_ENVR_PRJT AS
BEGIN
MERGE INTO RCRA_CME_SUPP_ENVR_PRJT D
    USING (SELECT *
           FROM ETL_CME_SUPP_ENVR_PRJT_VW) S
    ON (D.CME_SUPP_ENVR_PRJT_ID = S.WH_CME_SUPP_ENVR_PRJT_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE         = S.TRANS_CODE,
                D.SEP_SEQ_NUM        = S.SEP_SEQ_NUM,
                D.SEP_EXPND_AMOUNT   = S.SEP_EXPND_AMOUNT,
                D.SEP_SCHD_COMP_DATE = S.SEP_SCHD_COMP_DATE,
                D.SEP_ACTL_DATE      = S.SEP_ACTL_DATE,
                D.SEP_DFLT_DATE      = S.SEP_DFLT_DATE,
                D.SEP_CODE_OWNER     = S.SEP_CODE_OWNER,
                D.SEP_DESC_TXT       = S.SEP_DESC_TXT,
                D.NOTES              = S.NOTES
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.SEP_SEQ_NUM, S.SEP_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.SEP_EXPND_AMOUNT, S.SEP_EXPND_AMOUNT, 0, 1) = 1
               OR DECODE(D.SEP_SCHD_COMP_DATE, S.SEP_SCHD_COMP_DATE, 0, 1) = 1
               OR DECODE(D.SEP_ACTL_DATE, S.SEP_ACTL_DATE, 0, 1) = 1
               OR DECODE(D.SEP_DFLT_DATE, S.SEP_DFLT_DATE, 0, 1) = 1
               OR DECODE(D.SEP_CODE_OWNER, S.SEP_CODE_OWNER, 0, 1) = 1
               OR DECODE(D.SEP_DESC_TXT, S.SEP_DESC_TXT, 0, 1) = 1
               OR DECODE(D.NOTES, S.NOTES, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CME_SUPP_ENVR_PRJT_ID,
                    CME_ENFRC_ACT_ID,
                    TRANS_CODE,
                    SEP_SEQ_NUM,
                    SEP_EXPND_AMOUNT,
                    SEP_SCHD_COMP_DATE,
                    SEP_ACTL_DATE,
                    SEP_DFLT_DATE,
                    SEP_CODE_OWNER,
                    SEP_DESC_TXT,
                    NOTES)
            VALUES (SEQ_RCRA_CME_SUPP_ENVR_PRJT.NEXTVAL,
                    S.WH_CME_ENFR_ACT_ID,
                    S.TRANS_CODE,
                    S.SEP_SEQ_NUM,
                    S.SEP_EXPND_AMOUNT,
                    S.SEP_SCHD_COMP_DATE,
                    S.SEP_ACTL_DATE,
                    S.SEP_DFLT_DATE,
                    S.SEP_CODE_OWNER,
                    S.SEP_DESC_TXT,
                    S.NOTES);
END;

    PROCEDURE CME_MERGE_VIOL_ENFRC AS
BEGIN
MERGE INTO RCRA_CME_VIOL_ENFRC D
    USING (SELECT *
           FROM ETL_CME_VIOL_ENFRC_VW) S
    ON (D.CME_VIOL_ENFRC_ID = S.WH_CME_VIOL_ENFRC_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE          = S.TRANS_CODE,
                D.VIOL_SEQ_NUM        = S.VIOL_SEQ_NUM,
                D.AGN_WHICH_DTRM_VIOL = S.AGN_WHICH_DTRM_VIOL,
                D.RTN_COMPL_SCHD_DATE = S.RTN_COMPL_SCHD_DATE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.VIOL_SEQ_NUM, S.VIOL_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.AGN_WHICH_DTRM_VIOL, S.AGN_WHICH_DTRM_VIOL, 0, 1) = 1
               OR DECODE(D.RTN_COMPL_SCHD_DATE, S.RTN_COMPL_SCHD_DATE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CME_VIOL_ENFRC_ID,
                    CME_ENFRC_ACT_ID,
                    TRANS_CODE,
                    VIOL_SEQ_NUM,
                    AGN_WHICH_DTRM_VIOL,
                    RTN_COMPL_SCHD_DATE)
            VALUES (SEQ_RCRA_CME_VIOL_ENFRC.NEXTVAL,
                    S.WH_CME_ENFR_ACT_ID,
                    S.TRANS_CODE,
                    S.VIOL_SEQ_NUM,
                    S.AGN_WHICH_DTRM_VIOL,
                    S.RTN_COMPL_SCHD_DATE);
END;

    PROCEDURE CME_MERGE_PNLTY AS
BEGIN
MERGE INTO RCRA_CME_PNLTY D
    USING (SELECT *
           FROM ETL_CME_PNLTY_VW) S
    ON (D.CME_PNLTY_ID = S.WH_CME_PNLTY_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.PNLTY_TYPE_OWNER               = S.PNLTY_TYPE_OWNER,
                D.PNLTY_TYPE                     = S.PNLTY_TYPE,
                D.CASH_CIVIL_PNLTY_SOUGHT_AMOUNT = S.CASH_CIVIL_PNLTY_SOUGHT_AMOUNT,
                D.NOTES                          = S.NOTES
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.PNLTY_TYPE_OWNER, S.PNLTY_TYPE_OWNER, 0, 1) = 1
               OR DECODE(D.PNLTY_TYPE, S.PNLTY_TYPE, 0, 1) = 1
               OR DECODE(D.CASH_CIVIL_PNLTY_SOUGHT_AMOUNT, S.CASH_CIVIL_PNLTY_SOUGHT_AMOUNT, 0, 1) = 1
               OR DECODE(D.NOTES, S.NOTES, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CME_PNLTY_ID,
                    CME_ENFRC_ACT_ID,
                    TRANS_CODE,
                    PNLTY_TYPE_OWNER,
                    PNLTY_TYPE,
                    CASH_CIVIL_PNLTY_SOUGHT_AMOUNT,
                    NOTES)
            VALUES (SEQ_RCRA_CME_PNLTY.NEXTVAL,
                    S.WH_CME_ENFR_ACT_ID,
                    S.TRANS_CODE,
                    S.PNLTY_TYPE_OWNER,
                    S.PNLTY_TYPE,
                    S.CASH_CIVIL_PNLTY_SOUGHT_AMOUNT,
                    S.NOTES);
END;

-- ETL_CME_PYMT_VW
    PROCEDURE CME_MERGE_PYMT AS
BEGIN
MERGE INTO RCRA_CME_PYMT D
    USING (SELECT *
           FROM ETL_CME_PYMT_VW) S
    ON (D.CME_PYMT_ID = S.WH_CME_PYMT_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE       = S.TRANS_CODE,
                D.PYMT_SEQ_NUM     = S.PYMT_SEQ_NUM,
                D.PYMT_DFLT_DATE   = S.PYMT_DFLT_DATE,
                D.SCHD_PYMT_DATE   = S.SCHD_PYMT_DATE,
                D.SCHD_PYMT_AMOUNT = S.SCHD_PYMT_AMOUNT,
                D.ACTL_PYMT_DATE   = S.ACTL_PYMT_DATE,
                D.ACTL_PAID_AMOUNT = S.ACTL_PAID_AMOUNT,
                D.NOTES            = S.NOTES
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.PYMT_SEQ_NUM, S.PYMT_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.PYMT_DFLT_DATE, S.PYMT_DFLT_DATE, 0, 1) = 1
               OR DECODE(D.SCHD_PYMT_DATE, S.SCHD_PYMT_DATE, 0, 1) = 1
               OR DECODE(D.SCHD_PYMT_AMOUNT, S.SCHD_PYMT_AMOUNT, 0, 1) = 1
               OR DECODE(D.ACTL_PYMT_DATE, S.ACTL_PYMT_DATE, 0, 1) = 1
               OR DECODE(D.ACTL_PAID_AMOUNT, S.ACTL_PAID_AMOUNT, 0, 1) = 1
               OR DECODE(D.NOTES, S.NOTES, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CME_PYMT_ID,
                    CME_PNLTY_ID,
                    TRANS_CODE,
                    PYMT_SEQ_NUM,
                    PYMT_DFLT_DATE,
                    SCHD_PYMT_DATE,
                    SCHD_PYMT_AMOUNT,
                    ACTL_PYMT_DATE,
                    ACTL_PAID_AMOUNT,
                    NOTES)
            VALUES (SEQ_RCRA_CME_PYMT.NEXTVAL,
                    S.WH_CME_PNLTY_ID,
                    S.TRANS_CODE,
                    S.PYMT_SEQ_NUM,
                    S.PYMT_DFLT_DATE,
                    S.SCHD_PYMT_DATE,
                    S.SCHD_PYMT_AMOUNT,
                    S.ACTL_PYMT_DATE,
                    S.ACTL_PAID_AMOUNT,
                    S.NOTES);
END;

-- CA

    PROCEDURE CA_LOG_HANDLERS AS
        ETL_ID number;
BEGIN
        ETL_ID := SEQ_ETL_RUN.NEXTVAL;
INSERT INTO ETL_RUN
(ETL_RUN_ID,
 RUN_DATE,
 ETL_TYPE)
VALUES (ETL_ID,
        CURRENT_TIMESTAMP,
        'CA');
INSERT INTO ETL_RUN_HANDLER
(ETL_RUN_ID,
 HANDLER_ID,
 STATUS_TYPE)
SELECT ETL_ID,
       HANDLER_ID,
       CASE
           WHEN
               CA_FAC_SUBM_ID IS NULL
               THEN
               'I'
           ELSE
               'U'
           END
FROM ETL_CA_FAC_SUBM_VW;
END;

    PROCEDURE CA_MERGE_FAC_SUBM AS
BEGIN
MERGE INTO RCRA_CA_FAC_SUBM D
    USING (SELECT *
           FROM ETL_CA_FAC_SUBM_VW) S
    ON (D.CA_FAC_SUBM_ID = S.WH_CA_FAC_SUBM_ID)
    WHEN NOT MATCHED THEN
        INSERT (D.CA_FAC_SUBM_ID,
                HANDLER_ID)
            VALUES (SEQ_RCRA_CA_FAC_SUBM.NEXTVAL,
                    S.HANDLER_ID);
END;

    PROCEDURE CA_MERGE_EVENT AS
BEGIN
MERGE INTO RCRA_CA_EVENT D
    USING (SELECT *
           FROM ETL_CA_EVENT_VW) S
    ON (D.CA_EVENT_ID = S.WH_CA_EVENT_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.ACT_LOC_CODE                   = S.ACT_LOC_CODE,
                D.CORCT_ACT_EVENT_DATA_OWNER_CDE = S.CORCT_ACT_EVENT_DATA_OWNER_CDE,
                D.CORCT_ACT_EVENT_CODE           = S.CORCT_ACT_EVENT_CODE,
                D.EVENT_AGN_CODE                 = S.EVENT_AGN_CODE,
                D.EVENT_SEQ_NUM                  = S.EVENT_SEQ_NUM,
                D.ACTL_DATE                      = S.ACTL_DATE,
                D.ORIGINAL_SCHEDULE_DATE         = S.ORIGINAL_SCHEDULE_DATE,
                D.NEW_SCHEDULE_DATE              = S.NEW_SCHEDULE_DATE,
                D.EVENT_SUBORG_DATA_OWNER_CODE   = S.EVENT_SUBORG_DATA_OWNER_CODE,
                D.EVENT_SUBORG_CODE              = S.EVENT_SUBORG_CODE,
                D.RESP_PERSON_DATA_OWNER_CODE    = S.RESP_PERSON_DATA_OWNER_CODE,
                D.RESP_PERSON_ID                 = S.RESP_PERSON_ID,
                D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT,
                D.PUBLIC_SUPP_INFO_TXT           = S.PUBLIC_SUPP_INFO_TXT,
                D.CREATED_BY_USERID              = S.CREATED_BY_USERID,
                D.A_CREATED_DATE                 = S.A_CREATED_DATE,
                D.DATA_ORIG                      = S.DATA_ORIG,
                D.LAST_UPDT_BY                   = S.LAST_UPDT_BY,
                D.LAST_UPDT_DATE                 = S.LAST_UPDT_DATE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.ACT_LOC_CODE, S.ACT_LOC_CODE, 0, 1) = 1
               OR DECODE(D.CORCT_ACT_EVENT_DATA_OWNER_CDE, S.CORCT_ACT_EVENT_DATA_OWNER_CDE, 0, 1) = 1
               OR DECODE(D.CORCT_ACT_EVENT_CODE, S.CORCT_ACT_EVENT_CODE, 0, 1) = 1
               OR DECODE(D.EVENT_AGN_CODE, S.EVENT_AGN_CODE, 0, 1) = 1
               OR DECODE(D.EVENT_SEQ_NUM, S.EVENT_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.ACTL_DATE, S.ACTL_DATE, 0, 1) = 1
               OR DECODE(D.ORIGINAL_SCHEDULE_DATE, S.ORIGINAL_SCHEDULE_DATE, 0, 1) = 1
               OR DECODE(D.NEW_SCHEDULE_DATE, S.NEW_SCHEDULE_DATE, 0, 1) = 1
               OR DECODE(D.EVENT_SUBORG_DATA_OWNER_CODE, S.EVENT_SUBORG_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.EVENT_SUBORG_CODE, S.EVENT_SUBORG_CODE, 0, 1) = 1
               OR DECODE(D.RESP_PERSON_DATA_OWNER_CODE, S.RESP_PERSON_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.RESP_PERSON_ID, S.RESP_PERSON_ID, 0, 1) = 1
               OR DECODE(D.SUPP_INFO_TXT, S.SUPP_INFO_TXT, 0, 1) = 1
               OR DECODE(D.PUBLIC_SUPP_INFO_TXT, S.PUBLIC_SUPP_INFO_TXT, 0, 1) = 1
               OR DECODE(D.CREATED_BY_USERID, S.CREATED_BY_USERID, 0, 1) = 1
               OR DECODE(D.A_CREATED_DATE, S.A_CREATED_DATE, 0, 1) = 1
               OR DECODE(D.DATA_ORIG, S.DATA_ORIG, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_BY, S.LAST_UPDT_BY, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_DATE, S.LAST_UPDT_DATE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CA_EVENT_ID,
                    CA_FAC_SUBM_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    CORCT_ACT_EVENT_DATA_OWNER_CDE,
                    CORCT_ACT_EVENT_CODE,
                    EVENT_AGN_CODE,
                    EVENT_SEQ_NUM,
                    ACTL_DATE,
                    ORIGINAL_SCHEDULE_DATE,
                    NEW_SCHEDULE_DATE,
                    EVENT_SUBORG_DATA_OWNER_CODE,
                    EVENT_SUBORG_CODE,
                    RESP_PERSON_DATA_OWNER_CODE,
                    RESP_PERSON_ID,
                    SUPP_INFO_TXT,
                    PUBLIC_SUPP_INFO_TXT,
                    CREATED_BY_USERID,
                    A_CREATED_DATE,
                    DATA_ORIG,
                    LAST_UPDT_BY,
                    LAST_UPDT_DATE)
            VALUES (SEQ_RCRA_CA_EVENT.NEXTVAL,
                    S.WH_CA_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.CORCT_ACT_EVENT_DATA_OWNER_CDE,
                    S.CORCT_ACT_EVENT_CODE,
                    S.EVENT_AGN_CODE,
                    S.EVENT_SEQ_NUM,
                    S.ACTL_DATE,
                    S.ORIGINAL_SCHEDULE_DATE,
                    S.NEW_SCHEDULE_DATE,
                    S.EVENT_SUBORG_DATA_OWNER_CODE,
                    S.EVENT_SUBORG_CODE,
                    S.RESP_PERSON_DATA_OWNER_CODE,
                    S.RESP_PERSON_ID,
                    S.SUPP_INFO_TXT,
                    S.PUBLIC_SUPP_INFO_TXT,
                    S.CREATED_BY_USERID,
                    S.A_CREATED_DATE,
                    S.DATA_ORIG,
                    S.LAST_UPDT_BY,
                    S.LAST_UPDT_DATE);
END;

--
    PROCEDURE CA_MERGE_EVENT_COMMITMENT AS
BEGIN
MERGE INTO RCRA_CA_EVENT_COMMITMENT D
    USING (SELECT *
           FROM ETL_CA_EVENT_COMMITMENT_VW) S
    ON (D.CA_EVENT_COMMITMENT_ID = S.WH_CA_EVENT_COMMITMENT_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE     = S.TRANS_CODE,
                D.COMMIT_LEAD    = S.COMMIT_LEAD,
                D.COMMIT_SEQ_NUM = S.COMMIT_SEQ_NUM
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.COMMIT_LEAD, S.COMMIT_LEAD, 0, 1) = 1
               OR DECODE(D.COMMIT_SEQ_NUM, S.COMMIT_SEQ_NUM, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CA_EVENT_COMMITMENT_ID,
                    CA_EVENT_ID,
                    TRANS_CODE,
                    COMMIT_LEAD,
                    COMMIT_SEQ_NUM)
            VALUES (SEQ_RCRA_CA_EVENT_COMMITMENT.NEXTVAL,
                    S.WH_CA_EVENT_ID,
                    S.TRANS_CODE,
                    S.COMMIT_LEAD,
                    S.COMMIT_SEQ_NUM);
END;

    PROCEDURE CA_MERGE_AREA AS
BEGIN
MERGE INTO RCRA_CA_AREA D
    USING (SELECT *
           FROM ETL_CA_AREA_VW) S
    ON (D.CA_AREA_ID = S.WH_CA_AREA_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.AREA_SEQ_NUM                   = S.AREA_SEQ_NUM,
                D.FAC_WIDE_IND                   = S.FAC_WIDE_IND,
                D.AREA_NAME                      = S.AREA_NAME,
                D.AIR_REL_IND                    = S.AIR_REL_IND,
                D.GROUNDWATER_REL_IND            = S.GROUNDWATER_REL_IND,
                D.SOIL_REL_IND                   = S.SOIL_REL_IND,
                D.SURFACE_WATER_REL_IND          = S.SURFACE_WATER_REL_IND,
                D.REGULATED_UNIT_IND             = S.REGULATED_UNIT_IND,
                D.EPA_RESP_PERSON_DATA_OWNER_CDE = S.EPA_RESP_PERSON_DATA_OWNER_CDE,
                D.EPA_RESP_PERSON_ID             = S.EPA_RESP_PERSON_ID,
                D.STA_RESP_PERSON_DATA_OWNER_CDE = S.STA_RESP_PERSON_DATA_OWNER_CDE,
                D.STA_RESP_PERSON_ID             = S.STA_RESP_PERSON_ID,
                D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT,
                D.CREATED_BY_USERID              = S.CREATED_BY_USERID,
                D.A_CREATED_DATE                 = S.A_CREATED_DATE,
                D.DATA_ORIG                      = S.DATA_ORIG,
                D.LAST_UPDT_BY                   = S.LAST_UPDT_BY,
                D.LAST_UPDT_DATE                 = S.LAST_UPDT_DATE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.AREA_SEQ_NUM, S.AREA_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.FAC_WIDE_IND, S.FAC_WIDE_IND, 0, 1) = 1
               OR DECODE(D.AREA_NAME, S.AREA_NAME, 0, 1) = 1
               OR DECODE(D.AIR_REL_IND, S.AIR_REL_IND, 0, 1) = 1
               OR DECODE(D.GROUNDWATER_REL_IND, S.GROUNDWATER_REL_IND, 0, 1) = 1
               OR DECODE(D.SOIL_REL_IND, S.SOIL_REL_IND, 0, 1) = 1
               OR DECODE(D.SURFACE_WATER_REL_IND, S.SURFACE_WATER_REL_IND, 0, 1) = 1
               OR DECODE(D.REGULATED_UNIT_IND, S.REGULATED_UNIT_IND, 0, 1) = 1
               OR DECODE(D.EPA_RESP_PERSON_DATA_OWNER_CDE, S.EPA_RESP_PERSON_DATA_OWNER_CDE, 0, 1) = 1
               OR DECODE(D.EPA_RESP_PERSON_ID, S.EPA_RESP_PERSON_ID, 0, 1) = 1
               OR DECODE(D.STA_RESP_PERSON_DATA_OWNER_CDE, S.STA_RESP_PERSON_DATA_OWNER_CDE, 0, 1) = 1
               OR DECODE(D.STA_RESP_PERSON_ID, S.STA_RESP_PERSON_ID, 0, 1) = 1
               OR DECODE(D.SUPP_INFO_TXT, S.SUPP_INFO_TXT, 0, 1) = 1
               OR DECODE(D.CREATED_BY_USERID, S.CREATED_BY_USERID, 0, 1) = 1
               OR DECODE(D.A_CREATED_DATE, S.A_CREATED_DATE, 0, 1) = 1
               OR DECODE(D.DATA_ORIG, S.DATA_ORIG, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_BY, S.LAST_UPDT_BY, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_DATE, S.LAST_UPDT_DATE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CA_AREA_ID,
                    CA_FAC_SUBM_ID,
                    TRANS_CODE,
                    AREA_SEQ_NUM,
                    FAC_WIDE_IND,
                    AREA_NAME,
                    AIR_REL_IND,
                    GROUNDWATER_REL_IND,
                    SOIL_REL_IND,
                    SURFACE_WATER_REL_IND,
                    REGULATED_UNIT_IND,
                    EPA_RESP_PERSON_DATA_OWNER_CDE,
                    EPA_RESP_PERSON_ID,
                    STA_RESP_PERSON_DATA_OWNER_CDE,
                    STA_RESP_PERSON_ID,
                    SUPP_INFO_TXT,
                    CREATED_BY_USERID,
                    A_CREATED_DATE,
                    DATA_ORIG,
                    LAST_UPDT_BY,
                    LAST_UPDT_DATE)
            VALUES (SEQ_RCRA_CA_AREA.NEXTVAL,
                    S.WH_CA_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.AREA_SEQ_NUM,
                    S.FAC_WIDE_IND,
                    S.AREA_NAME,
                    S.AIR_REL_IND,
                    S.GROUNDWATER_REL_IND,
                    S.SOIL_REL_IND,
                    S.SURFACE_WATER_REL_IND,
                    S.REGULATED_UNIT_IND,
                    S.EPA_RESP_PERSON_DATA_OWNER_CDE,
                    S.EPA_RESP_PERSON_ID,
                    S.STA_RESP_PERSON_DATA_OWNER_CDE,
                    S.STA_RESP_PERSON_ID,
                    S.SUPP_INFO_TXT,
                    S.CREATED_BY_USERID,
                    S.A_CREATED_DATE,
                    S.DATA_ORIG,
                    S.LAST_UPDT_BY,
                    S.LAST_UPDT_DATE);
END;

    PROCEDURE CA_MERGE_AREA_REL_EVENT AS
BEGIN
MERGE INTO RCRA_CA_AREA_REL_EVENT D
    USING (SELECT *
           FROM ETL_CA_AREA_REL_EVENT_VW) S
    ON (D.CA_AREA_REL_EVENT_ID = S.WH_CA_AREA_REL_EVENT_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.ACT_LOC_CODE                   = S.ACT_LOC_CODE,
                D.CORCT_ACT_EVENT_DATA_OWNER_CDE = S.CORCT_ACT_EVENT_DATA_OWNER_CDE,
                D.CORCT_ACT_EVENT_CODE           = S.CORCT_ACT_EVENT_CODE,
                D.EVENT_AGN_CODE                 = S.EVENT_AGN_CODE,
                D.EVENT_SEQ_NUM                  = S.EVENT_SEQ_NUM
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.ACT_LOC_CODE, S.ACT_LOC_CODE, 0, 1) = 1
               OR DECODE(D.CORCT_ACT_EVENT_DATA_OWNER_CDE, S.CORCT_ACT_EVENT_DATA_OWNER_CDE, 0, 1) = 1
               OR DECODE(D.CORCT_ACT_EVENT_CODE, S.CORCT_ACT_EVENT_CODE, 0, 1) = 1
               OR DECODE(D.EVENT_AGN_CODE, S.EVENT_AGN_CODE, 0, 1) = 1
               OR DECODE(D.EVENT_SEQ_NUM, S.EVENT_SEQ_NUM, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CA_AREA_REL_EVENT_ID,
                    CA_AREA_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    CORCT_ACT_EVENT_DATA_OWNER_CDE,
                    CORCT_ACT_EVENT_CODE,
                    EVENT_AGN_CODE,
                    EVENT_SEQ_NUM)
            VALUES (SEQ_RCRA_CA_AREA_REL_EVENT.NEXTVAL,
                    S.WH_CA_AREA_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.CORCT_ACT_EVENT_DATA_OWNER_CDE,
                    S.CORCT_ACT_EVENT_CODE,
                    S.EVENT_AGN_CODE,
                    S.EVENT_SEQ_NUM);
END;

    PROCEDURE CA_MERGE_REL_PERMIT_UNIT AS
BEGIN
MERGE INTO RCRA_CA_REL_PERMIT_UNIT D
    USING (SELECT *
           FROM ETL_CA_REL_PERMIT_UNIT_VW) S
    ON (D.CA_REL_PERMIT_UNIT_ID = S.WH_CA_REL_PERMIT_UNIT_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE          = S.TRANS_CODE,
                D.PERMIT_UNIT_SEQ_NUM = S.PERMIT_UNIT_SEQ_NUM
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.PERMIT_UNIT_SEQ_NUM, S.PERMIT_UNIT_SEQ_NUM, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CA_REL_PERMIT_UNIT_ID,
                    CA_AREA_ID,
                    TRANS_CODE,
                    PERMIT_UNIT_SEQ_NUM)
            VALUES (SEQ_RCRA_CA_REL_PERMIT_UNIT.NEXTVAL,
                    S.WH_CA_AREA_ID,
                    S.TRANS_CODE,
                    S.PERMIT_UNIT_SEQ_NUM);
END;

    PROCEDURE CA_MERGE_AUTHORITY AS
BEGIN
MERGE INTO RCRA_CA_AUTHORITY D
    USING (SELECT *
           FROM ETL_CA_AUTHORITY_VW) S
    ON (D.CA_AUTHORITY_ID = S.WH_CA_AUTHORITY_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.ACT_LOC_CODE                   = S.ACT_LOC_CODE,
                D.AUTHORITY_DATA_OWNER_CODE      = S.AUTHORITY_DATA_OWNER_CODE,
                D.AUTHORITY_TYPE_CODE            = S.AUTHORITY_TYPE_CODE,
                D.AUTHORITY_AGN_CODE             = S.AUTHORITY_AGN_CODE,
                D.AUTHORITY_EFFC_DATE            = S.AUTHORITY_EFFC_DATE,
                D.ISSUE_DATE                     = S.ISSUE_DATE,
                D.END_DATE                       = S.END_DATE,
                D.ESTABLISHED_REPOSITORY_CODE    = S.ESTABLISHED_REPOSITORY_CODE,
                D.RESP_LEAD_PROG_IDEN            = S.RESP_LEAD_PROG_IDEN,
                D.AUTHORITY_SUBORG_DATA_OWNR_CDE = S.AUTHORITY_SUBORG_DATA_OWNR_CDE,
                D.AUTHORITY_SUBORG_CODE          = S.AUTHORITY_SUBORG_CODE,
                D.RESP_PERSON_DATA_OWNER_CODE    = S.RESP_PERSON_DATA_OWNER_CODE,
                D.RESP_PERSON_ID                 = S.RESP_PERSON_ID,
                D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT,
                D.CREATED_BY_USERID              = S.CREATED_BY_USERID,
                D.A_CREATED_DATE                 = S.A_CREATED_DATE,
                D.DATA_ORIG                      = S.DATA_ORIG,
                D.LAST_UPDT_BY                   = S.LAST_UPDT_BY,
                D.LAST_UPDT_DATE                 = S.LAST_UPDT_DATE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.ACT_LOC_CODE, S.ACT_LOC_CODE, 0, 1) = 1
               OR DECODE(D.AUTHORITY_DATA_OWNER_CODE, S.AUTHORITY_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.AUTHORITY_TYPE_CODE, S.AUTHORITY_TYPE_CODE, 0, 1) = 1
               OR DECODE(D.AUTHORITY_AGN_CODE, S.AUTHORITY_AGN_CODE, 0, 1) = 1
               OR DECODE(D.AUTHORITY_EFFC_DATE, S.AUTHORITY_EFFC_DATE, 0, 1) = 1
               OR DECODE(D.ISSUE_DATE, S.ISSUE_DATE, 0, 1) = 1
               OR DECODE(D.END_DATE, S.END_DATE, 0, 1) = 1
               OR DECODE(D.ESTABLISHED_REPOSITORY_CODE, S.ESTABLISHED_REPOSITORY_CODE, 0, 1) = 1
               OR DECODE(D.RESP_LEAD_PROG_IDEN, S.RESP_LEAD_PROG_IDEN, 0, 1) = 1
               OR DECODE(D.AUTHORITY_SUBORG_DATA_OWNR_CDE, S.AUTHORITY_SUBORG_DATA_OWNR_CDE, 0, 1) = 1
               OR DECODE(D.AUTHORITY_SUBORG_CODE, S.AUTHORITY_SUBORG_CODE, 0, 1) = 1
               OR DECODE(D.RESP_PERSON_DATA_OWNER_CODE, S.RESP_PERSON_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.RESP_PERSON_ID, S.RESP_PERSON_ID, 0, 1) = 1
               OR DECODE(D.SUPP_INFO_TXT, S.SUPP_INFO_TXT, 0, 1) = 1
               OR DECODE(D.CREATED_BY_USERID, S.CREATED_BY_USERID, 0, 1) = 1
               OR DECODE(D.A_CREATED_DATE, S.A_CREATED_DATE, 0, 1) = 1
               OR DECODE(D.DATA_ORIG, S.DATA_ORIG, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_BY, S.LAST_UPDT_BY, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_DATE, S.LAST_UPDT_DATE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CA_AUTHORITY_ID,
                    CA_FAC_SUBM_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    AUTHORITY_DATA_OWNER_CODE,
                    AUTHORITY_TYPE_CODE,
                    AUTHORITY_AGN_CODE,
                    AUTHORITY_EFFC_DATE,
                    ISSUE_DATE,
                    END_DATE,
                    ESTABLISHED_REPOSITORY_CODE,
                    RESP_LEAD_PROG_IDEN,
                    AUTHORITY_SUBORG_DATA_OWNR_CDE,
                    AUTHORITY_SUBORG_CODE,
                    RESP_PERSON_DATA_OWNER_CODE,
                    RESP_PERSON_ID,
                    SUPP_INFO_TXT,
                    CREATED_BY_USERID,
                    A_CREATED_DATE,
                    DATA_ORIG,
                    LAST_UPDT_BY,
                    LAST_UPDT_DATE)
            VALUES (SEQ_RCRA_CA_AUTHORITY.NEXTVAL,
                    S.WH_CA_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.AUTHORITY_DATA_OWNER_CODE,
                    S.AUTHORITY_TYPE_CODE,
                    S.AUTHORITY_AGN_CODE,
                    S.AUTHORITY_EFFC_DATE,
                    S.ISSUE_DATE,
                    S.END_DATE,
                    S.ESTABLISHED_REPOSITORY_CODE,
                    S.RESP_LEAD_PROG_IDEN,
                    S.AUTHORITY_SUBORG_DATA_OWNR_CDE,
                    S.AUTHORITY_SUBORG_CODE,
                    S.RESP_PERSON_DATA_OWNER_CODE,
                    S.RESP_PERSON_ID,
                    S.SUPP_INFO_TXT,
                    S.CREATED_BY_USERID,
                    S.A_CREATED_DATE,
                    S.DATA_ORIG,
                    S.LAST_UPDT_BY,
                    S.LAST_UPDT_DATE);
END;

    PROCEDURE CA_MERGE_AUTH_REL_EVENT AS
BEGIN
MERGE INTO RCRA_CA_AUTH_REL_EVENT D
    USING (SELECT *
           FROM ETL_CA_AUTH_REL_EVENT_VW) S
    ON (D.CA_AUTH_REL_EVENT_ID = S.WH_CA_AUTH_REL_EVENT_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.ACT_LOC_CODE                   = S.ACT_LOC_CODE,
                D.CORCT_ACT_EVENT_DATA_OWNER_CDE = S.CORCT_ACT_EVENT_DATA_OWNER_CDE,
                D.CORCT_ACT_EVENT_CODE           = S.CORCT_ACT_EVENT_CODE,
                D.EVENT_AGN_CODE                 = S.EVENT_AGN_CODE,
                D.EVENT_SEQ_NUM                  = S.EVENT_SEQ_NUM
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.ACT_LOC_CODE, S.ACT_LOC_CODE, 0, 1) = 1
               OR DECODE(D.CORCT_ACT_EVENT_DATA_OWNER_CDE, S.CORCT_ACT_EVENT_DATA_OWNER_CDE, 0, 1) = 1
               OR DECODE(D.CORCT_ACT_EVENT_CODE, S.CORCT_ACT_EVENT_CODE, 0, 1) = 1
               OR DECODE(D.EVENT_AGN_CODE, S.EVENT_AGN_CODE, 0, 1) = 1
               OR DECODE(D.EVENT_SEQ_NUM, S.EVENT_SEQ_NUM, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CA_AUTH_REL_EVENT_ID,
                    CA_AUTHORITY_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    CORCT_ACT_EVENT_DATA_OWNER_CDE,
                    CORCT_ACT_EVENT_CODE,
                    EVENT_AGN_CODE,
                    EVENT_SEQ_NUM)
            VALUES (SEQ_RCRA_CA_AUTH_REL_EVENT.NEXTVAL,
                    S.WH_CA_AUTHORITY_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.CORCT_ACT_EVENT_DATA_OWNER_CDE,
                    S.CORCT_ACT_EVENT_CODE,
                    S.EVENT_AGN_CODE,
                    S.EVENT_SEQ_NUM);
END;

    PROCEDURE CA_MERGE_STATUTORY_CITATION AS
BEGIN
MERGE INTO RCRA_CA_STATUTORY_CITATION D
    USING (SELECT *
           FROM ETL_CA_STATUTORY_CITATION_VW) S
    ON (D.CA_STATUTORY_CITATION_ID = S.WH_CA_STATUTORY_CITATION_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.STATUTORY_CITTION_DTA_OWNR_CDE = S.STATUTORY_CITTION_DTA_OWNR_CDE,
                D.STATUTORY_CITATION_IDEN        = S.STATUTORY_CITATION_IDEN
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.STATUTORY_CITTION_DTA_OWNR_CDE, S.STATUTORY_CITTION_DTA_OWNR_CDE, 0, 1) = 1
               OR DECODE(D.STATUTORY_CITATION_IDEN, S.STATUTORY_CITATION_IDEN, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (CA_STATUTORY_CITATION_ID,
                    CA_AUTHORITY_ID,
                    TRANS_CODE,
                    STATUTORY_CITTION_DTA_OWNR_CDE,
                    STATUTORY_CITATION_IDEN)
            VALUES (SEQ_RCRA_CA_STATUTORY_CITATION.NEXTVAL,
                    S.WH_CA_AUTHORITY_ID,
                    S.TRANS_CODE,
                    S.STATUTORY_CITTION_DTA_OWNR_CDE,
                    S.STATUTORY_CITATION_IDEN);
END;

-- FA

    PROCEDURE FA_LOG_HANDLERS AS
        ETL_ID number;
BEGIN
        ETL_ID := SEQ_ETL_RUN.NEXTVAL;
INSERT INTO ETL_RUN
(ETL_RUN_ID,
 RUN_DATE,
 ETL_TYPE)
VALUES (ETL_ID,
        CURRENT_TIMESTAMP,
        'FA');
INSERT INTO ETL_RUN_HANDLER
(ETL_RUN_ID,
 HANDLER_ID,
 STATUS_TYPE)
SELECT ETL_ID,
       HANDLER_ID,
       CASE
           WHEN
               FA_FAC_SUBM_ID IS NULL
               THEN
               'I'
           ELSE
               'U'
           END
FROM ETL_FA_FAC_SUBM_VW;
END;

    PROCEDURE FA_MERGE_COST_EST_REL_MECH AS
BEGIN
MERGE INTO RCRA_FA_COST_EST_REL_MECHANISM D
    USING (SELECT *
           FROM ETL_FA_COST_EST_REL_MECH_VW) S
    ON (D.FA_COST_EST_REL_MECHANISM_ID = S.WH_FA_COST_EST_REL_MECH_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE               = S.TRANS_CODE,
                D.ACT_LOC_CODE             = S.ACT_LOC_CODE,
                D.MECHANISM_AGN_CODE       = S.MECHANISM_AGN_CODE,
                D.MECHANISM_SEQ_NUM        = S.MECHANISM_SEQ_NUM,
                D.MECHANISM_DETAIL_SEQ_NUM = S.MECHANISM_DETAIL_SEQ_NUM
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.ACT_LOC_CODE, S.ACT_LOC_CODE, 0, 1) = 1
               OR DECODE(D.MECHANISM_AGN_CODE, S.MECHANISM_AGN_CODE, 0, 1) = 1
               OR DECODE(D.MECHANISM_SEQ_NUM, S.MECHANISM_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.MECHANISM_DETAIL_SEQ_NUM, S.MECHANISM_DETAIL_SEQ_NUM, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (FA_COST_EST_REL_MECHANISM_ID,
                    FA_COST_EST_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    MECHANISM_AGN_CODE,
                    MECHANISM_SEQ_NUM,
                    MECHANISM_DETAIL_SEQ_NUM)
            VALUES (SEQ_RCRA_FA_COST_EST_REL_MECH.NEXTVAL,
                    S.WH_FA_COST_EST_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.MECHANISM_AGN_CODE,
                    S.MECHANISM_SEQ_NUM,
                    S.MECHANISM_DETAIL_SEQ_NUM);
END;

    PROCEDURE FA_MERGE_COST_EST AS
BEGIN
MERGE INTO RCRA_FA_COST_EST D
    USING (SELECT *
           FROM ETL_FA_COST_EST_VW) S
    ON (D.FA_COST_EST_ID = S.WH_FA_COST_EST_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                  = S.TRANS_CODE,
                D.ACT_LOC_CODE                = S.ACT_LOC_CODE,
                D.COST_ESTIMATE_TYPE_CODE     = S.COST_ESTIMATE_TYPE_CODE,
                D.COST_ESTIMATE_AGN_CODE      = S.COST_ESTIMATE_AGN_CODE,
                D.COST_ESTIMATE_SEQ_NUM       = S.COST_ESTIMATE_SEQ_NUM,
                D.RESP_PERSON_DATA_OWNER_CODE = S.RESP_PERSON_DATA_OWNER_CODE,
                D.RESP_PERSON_ID              = S.RESP_PERSON_ID,
                D.COST_ESTIMATE_AMOUNT        = S.COST_ESTIMATE_AMOUNT,
                D.COST_ESTIMATE_DATE          = S.COST_ESTIMATE_DATE,
                D.COST_ESTIMATE_RSN_CODE      = S.COST_ESTIMATE_RSN_CODE,
                D.AREA_UNIT_NOTES_TXT         = S.AREA_UNIT_NOTES_TXT,
                D.SUPP_INFO_TXT               = S.SUPP_INFO_TXT,
                D.CREATED_BY_USERID           = S.CREATED_BY_USERID,
                D.F_CREATED_DATE              = S.F_CREATED_DATE,
                D.DATA_ORIG                   = S.DATA_ORIG,
                D.UPDATE_DUE_DATE             = S.UPDATE_DUE_DATE,
                D.CURRENT_COST_ESTIMATE_IND   = S.CURRENT_COST_ESTIMATE_IND,
                D.LAST_UPDT_BY                = S.LAST_UPDT_BY,
                D.LAST_UPDT_DATE              = S.LAST_UPDT_DATE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.ACT_LOC_CODE, S.ACT_LOC_CODE, 0, 1) = 1
               OR DECODE(D.COST_ESTIMATE_TYPE_CODE, S.COST_ESTIMATE_TYPE_CODE, 0, 1) = 1
               OR DECODE(D.COST_ESTIMATE_AGN_CODE, S.COST_ESTIMATE_AGN_CODE, 0, 1) = 1
               OR DECODE(D.COST_ESTIMATE_SEQ_NUM, S.COST_ESTIMATE_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.RESP_PERSON_DATA_OWNER_CODE, S.RESP_PERSON_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.RESP_PERSON_ID, S.RESP_PERSON_ID, 0, 1) = 1
               OR DECODE(D.COST_ESTIMATE_AMOUNT, S.COST_ESTIMATE_AMOUNT, 0, 1) = 1
               OR DECODE(D.COST_ESTIMATE_DATE, S.COST_ESTIMATE_DATE, 0, 1) = 1
               OR DECODE(D.COST_ESTIMATE_RSN_CODE, S.COST_ESTIMATE_RSN_CODE, 0, 1) = 1
               OR DECODE(D.AREA_UNIT_NOTES_TXT, S.AREA_UNIT_NOTES_TXT, 0, 1) = 1
               OR DECODE(D.SUPP_INFO_TXT, S.SUPP_INFO_TXT, 0, 1) = 1
               OR DECODE(D.CREATED_BY_USERID, S.CREATED_BY_USERID, 0, 1) = 1
               OR DECODE(D.F_CREATED_DATE, S.F_CREATED_DATE, 0, 1) = 1
               OR DECODE(D.DATA_ORIG, S.DATA_ORIG, 0, 1) = 1
               OR DECODE(D.UPDATE_DUE_DATE, S.UPDATE_DUE_DATE, 0, 1) = 1
               OR DECODE(D.CURRENT_COST_ESTIMATE_IND, S.CURRENT_COST_ESTIMATE_IND, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_BY, S.LAST_UPDT_BY, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_DATE, S.LAST_UPDT_DATE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (FA_COST_EST_ID,
                    FA_FAC_SUBM_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    COST_ESTIMATE_TYPE_CODE,
                    COST_ESTIMATE_AGN_CODE,
                    COST_ESTIMATE_SEQ_NUM,
                    RESP_PERSON_DATA_OWNER_CODE,
                    RESP_PERSON_ID,
                    COST_ESTIMATE_AMOUNT,
                    COST_ESTIMATE_DATE,
                    COST_ESTIMATE_RSN_CODE,
                    AREA_UNIT_NOTES_TXT,
                    SUPP_INFO_TXT,
                    CREATED_BY_USERID,
                    F_CREATED_DATE,
                    DATA_ORIG,
                    UPDATE_DUE_DATE,
                    CURRENT_COST_ESTIMATE_IND,
                    LAST_UPDT_BY,
                    LAST_UPDT_DATE)
            VALUES (SEQ_RCRA_FA_COST_EST.NEXTVAL,
                    S.WH_FA_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.COST_ESTIMATE_TYPE_CODE,
                    S.COST_ESTIMATE_AGN_CODE,
                    S.COST_ESTIMATE_SEQ_NUM,
                    S.RESP_PERSON_DATA_OWNER_CODE,
                    S.RESP_PERSON_ID,
                    S.COST_ESTIMATE_AMOUNT,
                    S.COST_ESTIMATE_DATE,
                    S.COST_ESTIMATE_RSN_CODE,
                    S.AREA_UNIT_NOTES_TXT,
                    S.SUPP_INFO_TXT,
                    S.CREATED_BY_USERID,
                    S.F_CREATED_DATE,
                    S.DATA_ORIG,
                    S.UPDATE_DUE_DATE,
                    S.CURRENT_COST_ESTIMATE_IND,
                    S.LAST_UPDT_BY,
                    S.LAST_UPDT_DATE);
END;

    PROCEDURE FA_MERGE_MECHANISM_DETAIL AS
BEGIN
MERGE INTO RCRA_FA_MECHANISM_DETAIL D
    USING (SELECT *
           FROM ETL_FA_MECHANISM_DETAIL_VW) S
    ON (D.FA_MECHANISM_DETAIL_ID = S.WH_FA_MECHANISM_DETAIL_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                   = S.TRANS_CODE,
                D.MECHANISM_DETAIL_SEQ_NUM     = S.MECHANISM_DETAIL_SEQ_NUM,
                D.MECHANISM_IDEN_TXT           = S.MECHANISM_IDEN_TXT,
                D.FACE_VAL_AMOUNT              = S.FACE_VAL_AMOUNT,
                D.EFFC_DATE                    = S.EFFC_DATE,
                D.EXPIRATION_DATE              = S.EXPIRATION_DATE,
                D.SUPP_INFO_TXT                = S.SUPP_INFO_TXT,
                D.CURRENT_MECHANISM_DETAIL_IND = S.CURRENT_MECHANISM_DETAIL_IND,
                D.CREATED_BY_USERID            = S.CREATED_BY_USERID,
                D.F_CREATED_DATE               = S.F_CREATED_DATE,
                D.DATA_ORIG                    = S.DATA_ORIG,
                D.FAC_FACE_VAL_AMOUNT          = S.FAC_FACE_VAL_AMOUNT,
                D.ALT_IND                      = S.ALT_IND,
                D.LAST_UPDT_BY                 = S.LAST_UPDT_BY,
                D.LAST_UPDT_DATE               = S.LAST_UPDT_DATE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.MECHANISM_DETAIL_SEQ_NUM, S.MECHANISM_DETAIL_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.MECHANISM_IDEN_TXT, S.MECHANISM_IDEN_TXT, 0, 1) = 1
               OR DECODE(D.FACE_VAL_AMOUNT, S.FACE_VAL_AMOUNT, 0, 1) = 1
               OR DECODE(D.EFFC_DATE, S.EFFC_DATE, 0, 1) = 1
               OR DECODE(D.EXPIRATION_DATE, S.EXPIRATION_DATE, 0, 1) = 1
               OR DECODE(D.SUPP_INFO_TXT, S.SUPP_INFO_TXT, 0, 1) = 1
               OR DECODE(D.CURRENT_MECHANISM_DETAIL_IND, S.CURRENT_MECHANISM_DETAIL_IND, 0, 1) = 1
               OR DECODE(D.CREATED_BY_USERID, S.CREATED_BY_USERID, 0, 1) = 1
               OR DECODE(D.F_CREATED_DATE, S.F_CREATED_DATE, 0, 1) = 1
               OR DECODE(D.DATA_ORIG, S.DATA_ORIG, 0, 1) = 1
               OR DECODE(D.FAC_FACE_VAL_AMOUNT, S.FAC_FACE_VAL_AMOUNT, 0, 1) = 1
               OR DECODE(D.ALT_IND, S.ALT_IND, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_BY, S.LAST_UPDT_BY, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_DATE, S.LAST_UPDT_DATE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (FA_MECHANISM_DETAIL_ID,
                    FA_MECHANISM_ID,
                    TRANS_CODE,
                    MECHANISM_DETAIL_SEQ_NUM,
                    MECHANISM_IDEN_TXT,
                    FACE_VAL_AMOUNT,
                    EFFC_DATE,
                    EXPIRATION_DATE,
                    SUPP_INFO_TXT,
                    CURRENT_MECHANISM_DETAIL_IND,
                    CREATED_BY_USERID,
                    F_CREATED_DATE,
                    DATA_ORIG,
                    FAC_FACE_VAL_AMOUNT,
                    ALT_IND,
                    LAST_UPDT_BY,
                    LAST_UPDT_DATE)
            VALUES (SEQ_RCRA_FA_MECHANISM_DETAIL.NEXTVAL,
                    S.WH_FA_MECHANISM_ID,
                    S.TRANS_CODE,
                    S.MECHANISM_DETAIL_SEQ_NUM,
                    S.MECHANISM_IDEN_TXT,
                    S.FACE_VAL_AMOUNT,
                    S.EFFC_DATE,
                    S.EXPIRATION_DATE,
                    S.SUPP_INFO_TXT,
                    S.CURRENT_MECHANISM_DETAIL_IND,
                    S.CREATED_BY_USERID,
                    S.F_CREATED_DATE,
                    S.DATA_ORIG,
                    S.FAC_FACE_VAL_AMOUNT,
                    S.ALT_IND,
                    S.LAST_UPDT_BY,
                    S.LAST_UPDT_DATE);
END;

    PROCEDURE FA_MERGE_MECHANISM AS
BEGIN
MERGE INTO RCRA_FA_MECHANISM D
    USING (SELECT *
           FROM ETL_FA_MECHANISM_VW) S
    ON (D.FA_MECHANISM_ID = S.WH_FA_MECHANISM_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.ACT_LOC_CODE                   = S.ACT_LOC_CODE,
                D.MECHANISM_AGN_CODE             = S.MECHANISM_AGN_CODE,
                D.MECHANISM_SEQ_NUM              = S.MECHANISM_SEQ_NUM,
                D.MECHANISM_TYPE_DATA_OWNER_CODE = S.MECHANISM_TYPE_DATA_OWNER_CODE,
                D.MECHANISM_TYPE_CODE            = S.MECHANISM_TYPE_CODE,
                D.PROVIDER_TXT                   = S.PROVIDER_TXT,
                D.PROVIDER_FULL_CONTACT_NAME     = S.PROVIDER_FULL_CONTACT_NAME,
                D.TELE_NUM_TXT                   = S.TELE_NUM_TXT,
                D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT,
                D.CREATED_BY_USERID              = S.CREATED_BY_USERID,
                D.F_CREATED_DATE                 = S.F_CREATED_DATE,
                D.DATA_ORIG                      = S.DATA_ORIG,
                D.PROVIDER_CONTACT_EMAIL         = S.PROVIDER_CONTACT_EMAIL,
                D.ACTIVE_MECHANISM_IND           = S.ACTIVE_MECHANISM_IND,
                D.LAST_UPDT_BY                   = S.LAST_UPDT_BY,
                D.LAST_UPDT_DATE                 = S.LAST_UPDT_DATE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.ACT_LOC_CODE, S.ACT_LOC_CODE, 0, 1) = 1
               OR DECODE(D.MECHANISM_AGN_CODE, S.MECHANISM_AGN_CODE, 0, 1) = 1
               OR DECODE(D.MECHANISM_SEQ_NUM, S.MECHANISM_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.MECHANISM_TYPE_DATA_OWNER_CODE, S.MECHANISM_TYPE_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.MECHANISM_TYPE_CODE, S.MECHANISM_TYPE_CODE, 0, 1) = 1
               OR DECODE(D.PROVIDER_TXT, S.PROVIDER_TXT, 0, 1) = 1
               OR DECODE(D.PROVIDER_FULL_CONTACT_NAME, S.PROVIDER_FULL_CONTACT_NAME, 0, 1) = 1
               OR DECODE(D.TELE_NUM_TXT, S.TELE_NUM_TXT, 0, 1) = 1
               OR DECODE(D.SUPP_INFO_TXT, S.SUPP_INFO_TXT, 0, 1) = 1
               OR DECODE(D.CREATED_BY_USERID, S.CREATED_BY_USERID, 0, 1) = 1
               OR DECODE(D.F_CREATED_DATE, S.F_CREATED_DATE, 0, 1) = 1
               OR DECODE(D.DATA_ORIG, S.DATA_ORIG, 0, 1) = 1
               OR DECODE(D.PROVIDER_CONTACT_EMAIL, S.PROVIDER_CONTACT_EMAIL, 0, 1) = 1
               OR DECODE(D.ACTIVE_MECHANISM_IND, S.ACTIVE_MECHANISM_IND, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_BY, S.LAST_UPDT_BY, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_DATE, S.LAST_UPDT_DATE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (FA_MECHANISM_ID,
                    FA_FAC_SUBM_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    MECHANISM_AGN_CODE,
                    MECHANISM_SEQ_NUM,
                    MECHANISM_TYPE_DATA_OWNER_CODE,
                    MECHANISM_TYPE_CODE,
                    PROVIDER_TXT,
                    PROVIDER_FULL_CONTACT_NAME,
                    TELE_NUM_TXT,
                    SUPP_INFO_TXT,
                    CREATED_BY_USERID,
                    F_CREATED_DATE,
                    DATA_ORIG,
                    PROVIDER_CONTACT_EMAIL,
                    ACTIVE_MECHANISM_IND,
                    LAST_UPDT_BY,
                    LAST_UPDT_DATE)
            VALUES (SEQ_RCRA_FA_MECHANISM.NEXTVAL,
                    S.WH_FA_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.MECHANISM_AGN_CODE,
                    S.MECHANISM_SEQ_NUM,
                    S.MECHANISM_TYPE_DATA_OWNER_CODE,
                    S.MECHANISM_TYPE_CODE,
                    S.PROVIDER_TXT,
                    S.PROVIDER_FULL_CONTACT_NAME,
                    S.TELE_NUM_TXT,
                    S.SUPP_INFO_TXT,
                    S.CREATED_BY_USERID,
                    S.F_CREATED_DATE,
                    S.DATA_ORIG,
                    S.PROVIDER_CONTACT_EMAIL,
                    S.ACTIVE_MECHANISM_IND,
                    S.LAST_UPDT_BY,
                    S.LAST_UPDT_DATE);
END;

    PROCEDURE FA_MERGE_FAC_SUBM AS
BEGIN
MERGE INTO RCRA_FA_FAC_SUBM D
    USING (SELECT *
           FROM ETL_FA_FAC_SUBM_VW) S
    ON (D.FA_FAC_SUBM_ID = S.WH_FA_FAC_SUBM_ID)
    WHEN NOT MATCHED THEN
        INSERT (D.FA_FAC_SUBM_ID,
                HANDLER_ID)
            VALUES (SEQ_RCRA_FA_FAC_SUBM.NEXTVAL,
                    S.HANDLER_ID);
END;

-- PRM

    PROCEDURE PRM_LOG_HANDLERS AS
        ETL_ID number;
BEGIN
        ETL_ID := SEQ_ETL_RUN.NEXTVAL;
INSERT INTO ETL_RUN
(ETL_RUN_ID,
 RUN_DATE,
 ETL_TYPE)
VALUES (ETL_ID,
        CURRENT_TIMESTAMP,
        'PM');
INSERT INTO ETL_RUN_HANDLER
(ETL_RUN_ID,
 HANDLER_ID,
 STATUS_TYPE)
SELECT ETL_ID,
       HANDLER_ID,
       CASE
           WHEN
               PRM_FAC_SUBM_ID IS NULL
               THEN
               'I'
           ELSE
               'U'
           END
FROM ETL_PRM_FAC_SUBM_VW;
END;

    PROCEDURE PRM_MERGE_RELATED_EVENT AS
BEGIN
MERGE INTO RCRA_PRM_RELATED_EVENT D
    USING (SELECT *
           FROM ETL_PRM_REL_EVENT_VW) S
    ON (D.PRM_RELATED_EVENT_ID = S.WH_PRM_RELATED_EVENT_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                   = S.TRANS_CODE,
                D.ACT_LOC_CODE                 = S.ACT_LOC_CODE,
                D.PERMIT_SERIES_SEQ_NUM        = S.PERMIT_SERIES_SEQ_NUM,
                D.PERMIT_EVENT_DATA_OWNER_CODE = S.PERMIT_EVENT_DATA_OWNER_CODE,
                D.PERMIT_EVENT_CODE            = S.PERMIT_EVENT_CODE,
                D.EVENT_AGN_CODE               = S.EVENT_AGN_CODE,
                D.EVENT_SEQ_NUM                = S.EVENT_SEQ_NUM
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.ACT_LOC_CODE, S.ACT_LOC_CODE, 0, 1) = 1
               OR DECODE(D.PERMIT_SERIES_SEQ_NUM, S.PERMIT_SERIES_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.PERMIT_EVENT_DATA_OWNER_CODE, S.PERMIT_EVENT_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.PERMIT_EVENT_CODE, S.PERMIT_EVENT_CODE, 0, 1) = 1
               OR DECODE(D.EVENT_AGN_CODE, S.EVENT_AGN_CODE, 0, 1) = 1
               OR DECODE(D.EVENT_SEQ_NUM, S.EVENT_SEQ_NUM, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (PRM_RELATED_EVENT_ID,
                    PRM_UNIT_DETAIL_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    PERMIT_SERIES_SEQ_NUM,
                    PERMIT_EVENT_DATA_OWNER_CODE,
                    PERMIT_EVENT_CODE,
                    EVENT_AGN_CODE,
                    EVENT_SEQ_NUM)
            VALUES (SEQ_RCRA_PRM_RELATED_EVENT.NEXTVAL,
                    S.WH_PRM_UNIT_DETAIL_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.PERMIT_SERIES_SEQ_NUM,
                    S.PERMIT_EVENT_DATA_OWNER_CODE,
                    S.PERMIT_EVENT_CODE,
                    S.EVENT_AGN_CODE,
                    S.EVENT_SEQ_NUM);
END;

    PROCEDURE PRM_MERGE_EVENT_COMMITMENT AS
BEGIN
MERGE INTO RCRA_PRM_EVENT_COMMITMENT D
    USING (SELECT *
           FROM ETL_PRM_EVENT_COMM_VW) S
    ON (D.PRM_EVENT_COMMITMENT_ID = S.WH_PRM_EVENT_COMMITMENT_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE     = S.TRANS_CODE,
                D.COMMIT_LEAD    = S.COMMIT_LEAD,
                D.COMMIT_SEQ_NUM = S.COMMIT_SEQ_NUM
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.COMMIT_LEAD, S.COMMIT_LEAD, 0, 1) = 1
               OR DECODE(D.COMMIT_SEQ_NUM, S.COMMIT_SEQ_NUM, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (PRM_EVENT_COMMITMENT_ID,
                    PRM_EVENT_ID,
                    TRANS_CODE,
                    COMMIT_LEAD,
                    COMMIT_SEQ_NUM)
            VALUES (SEQ_RCRA_PRM_EVENT_COMMITMENT.NEXTVAL,
                    S.WH_PRM_EVENT_ID,
                    S.TRANS_CODE,
                    S.COMMIT_LEAD,
                    S.COMMIT_SEQ_NUM);
END;

    PROCEDURE PRM_MERGE_EVENT AS
BEGIN
MERGE INTO RCRA_PRM_EVENT D
    USING (SELECT *
           FROM ETL_PRM_EVENT_VW) S
    ON (D.PRM_EVENT_ID = S.WH_PRM_EVENT_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                   = S.TRANS_CODE,
                D.ACT_LOC_CODE                 = S.ACT_LOC_CODE,
                D.PERMIT_EVENT_DATA_OWNER_CODE = S.PERMIT_EVENT_DATA_OWNER_CODE,
                D.PERMIT_EVENT_CODE            = S.PERMIT_EVENT_CODE,
                D.EVENT_AGN_CODE               = S.EVENT_AGN_CODE,
                D.EVENT_SEQ_NUM                = S.EVENT_SEQ_NUM,
                D.ACTL_DATE                    = S.ACTL_DATE,
                D.ORIGINAL_SCHEDULE_DATE       = S.ORIGINAL_SCHEDULE_DATE,
                D.NEW_SCHEDULE_DATE            = S.NEW_SCHEDULE_DATE,
                D.RESP_PERSON_DATA_OWNER_CODE  = S.RESP_PERSON_DATA_OWNER_CODE,
                D.RESP_PERSON_ID               = S.RESP_PERSON_ID,
                D.EVENT_SUBORG_DATA_OWNER_CODE = S.EVENT_SUBORG_DATA_OWNER_CODE,
                D.EVENT_SUBORG_CODE            = S.EVENT_SUBORG_CODE,
                D.SUPP_INFO_TXT                = S.SUPP_INFO_TXT,
                D.CREATED_BY_USERID            = S.CREATED_BY_USERID,
                D.P_CREATED_DATE               = S.P_CREATED_DATE,
                D.LAST_UPDT_BY                 = S.LAST_UPDT_BY,
                D.LAST_UPDT_DATE               = S.LAST_UPDT_DATE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.ACT_LOC_CODE, S.ACT_LOC_CODE, 0, 1) = 1
               OR DECODE(D.PERMIT_EVENT_DATA_OWNER_CODE, S.PERMIT_EVENT_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.PERMIT_EVENT_CODE, S.PERMIT_EVENT_CODE, 0, 1) = 1
               OR DECODE(D.EVENT_AGN_CODE, S.EVENT_AGN_CODE, 0, 1) = 1
               OR DECODE(D.EVENT_SEQ_NUM, S.EVENT_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.ACTL_DATE, S.ACTL_DATE, 0, 1) = 1
               OR DECODE(D.ORIGINAL_SCHEDULE_DATE, S.ORIGINAL_SCHEDULE_DATE, 0, 1) = 1
               OR DECODE(D.NEW_SCHEDULE_DATE, S.NEW_SCHEDULE_DATE, 0, 1) = 1
               OR DECODE(D.RESP_PERSON_DATA_OWNER_CODE, S.RESP_PERSON_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.RESP_PERSON_ID, S.RESP_PERSON_ID, 0, 1) = 1
               OR DECODE(D.EVENT_SUBORG_DATA_OWNER_CODE, S.EVENT_SUBORG_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.EVENT_SUBORG_CODE, S.EVENT_SUBORG_CODE, 0, 1) = 1
               OR DECODE(D.SUPP_INFO_TXT, S.SUPP_INFO_TXT, 0, 1) = 1
               OR DECODE(D.CREATED_BY_USERID, S.CREATED_BY_USERID, 0, 1) = 1
               OR DECODE(D.P_CREATED_DATE, S.P_CREATED_DATE, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_BY, S.LAST_UPDT_BY, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_DATE, S.LAST_UPDT_DATE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (PRM_EVENT_ID,
                    PRM_SERIES_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    PERMIT_EVENT_DATA_OWNER_CODE,
                    PERMIT_EVENT_CODE,
                    EVENT_AGN_CODE,
                    EVENT_SEQ_NUM,
                    ACTL_DATE,
                    ORIGINAL_SCHEDULE_DATE,
                    NEW_SCHEDULE_DATE,
                    RESP_PERSON_DATA_OWNER_CODE,
                    RESP_PERSON_ID,
                    EVENT_SUBORG_DATA_OWNER_CODE,
                    EVENT_SUBORG_CODE,
                    SUPP_INFO_TXT,
                    CREATED_BY_USERID,
                    P_CREATED_DATE,
                    LAST_UPDT_BY,
                    LAST_UPDT_DATE)
            VALUES (SEQ_RCRA_PRM_EVENT.NEXTVAL,
                    S.WH_PRM_SERIES_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.PERMIT_EVENT_DATA_OWNER_CODE,
                    S.PERMIT_EVENT_CODE,
                    S.EVENT_AGN_CODE,
                    S.EVENT_SEQ_NUM,
                    S.ACTL_DATE,
                    S.ORIGINAL_SCHEDULE_DATE,
                    S.NEW_SCHEDULE_DATE,
                    S.RESP_PERSON_DATA_OWNER_CODE,
                    S.RESP_PERSON_ID,
                    S.EVENT_SUBORG_DATA_OWNER_CODE,
                    S.EVENT_SUBORG_CODE,
                    S.SUPP_INFO_TXT,
                    S.CREATED_BY_USERID,
                    S.P_CREATED_DATE,
                    S.LAST_UPDT_BY,
                    S.LAST_UPDT_DATE);
END;

    PROCEDURE PRM_MERGE_MOD_EVENT AS
BEGIN
MERGE INTO RCRA_PRM_MOD_EVENT D
    USING (SELECT *
           FROM ETL_PRM_MOD_EVENT_VW) S
    ON (D.PRM_MOD_EVENT_ID = S.WH_PRM_MOD_EVENT_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                = S.TRANS_CODE,
                D.MOD_HANDLER_ID            = S.MOD_HANDLER_ID,
                D.MOD_ACT_LOC_CODE          = S.MOD_ACT_LOC_CODE,
                D.MOD_SERIES_SEQ_NUM        = S.MOD_SERIES_SEQ_NUM,
                D.MOD_EVENT_SEQ_NUM         = S.MOD_EVENT_SEQ_NUM,
                D.MOD_EVENT_AGN_CODE        = S.MOD_EVENT_AGN_CODE,
                D.MOD_EVENT_DATA_OWNER_CODE = S.MOD_EVENT_DATA_OWNER_CODE,
                D.MOD_EVENT_CODE            = S.MOD_EVENT_CODE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.MOD_HANDLER_ID, S.MOD_HANDLER_ID, 0, 1) = 1
               OR DECODE(D.MOD_ACT_LOC_CODE, S.MOD_ACT_LOC_CODE, 0, 1) = 1
               OR DECODE(D.MOD_SERIES_SEQ_NUM, S.MOD_SERIES_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.MOD_EVENT_SEQ_NUM, S.MOD_EVENT_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.MOD_EVENT_AGN_CODE, S.MOD_EVENT_AGN_CODE, 0, 1) = 1
               OR DECODE(D.MOD_EVENT_DATA_OWNER_CODE, S.MOD_EVENT_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.MOD_EVENT_CODE, S.MOD_EVENT_CODE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (PRM_MOD_EVENT_ID,
                    PRM_EVENT_ID,
                    TRANS_CODE,
                    MOD_HANDLER_ID,
                    MOD_ACT_LOC_CODE,
                    MOD_SERIES_SEQ_NUM,
                    MOD_EVENT_SEQ_NUM,
                    MOD_EVENT_AGN_CODE,
                    MOD_EVENT_DATA_OWNER_CODE,
                    MOD_EVENT_CODE)
            VALUES (SEQ_RCRA_PRM_MOD_EVENT.NEXTVAL,
                    S.WH_PRM_EVENT_ID,
                    S.TRANS_CODE,
                    S.MOD_HANDLER_ID,
                    S.MOD_ACT_LOC_CODE,
                    S.MOD_SERIES_SEQ_NUM,
                    S.MOD_EVENT_SEQ_NUM,
                    S.MOD_EVENT_AGN_CODE,
                    S.MOD_EVENT_DATA_OWNER_CODE,
                    S.MOD_EVENT_CODE);
END;

    PROCEDURE PRM_MERGE_WASTE_CODE AS
BEGIN
MERGE INTO RCRA_PRM_WASTE_CODE D
    USING (SELECT *
           FROM ETL_PRM_WASTE_CODE_VW) S
    ON (D.PRM_WASTE_CODE_ID = S.WH_PRM_WASTE_CODE_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANSACTION_CODE = S.TRANSACTION_CODE,
                D.WASTE_CODE_OWNER = S.WASTE_CODE_OWNER,
                D.WASTE_CODE_TYPE  = S.WASTE_CODE_TYPE
    WHERE DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
               OR DECODE(D.WASTE_CODE_OWNER, S.WASTE_CODE_OWNER, 0, 1) = 1
               OR DECODE(D.WASTE_CODE_TYPE, S.WASTE_CODE_TYPE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (PRM_WASTE_CODE_ID,
                    PRM_UNIT_DETAIL_ID,
                    TRANSACTION_CODE,
                    WASTE_CODE_OWNER,
                    WASTE_CODE_TYPE)
            VALUES (SEQ_RCRA_PRM_WASTE_CODE.NEXTVAL,
                    S.WH_PRM_UNIT_DETAIL_ID,
                    S.TRANSACTION_CODE,
                    S.WASTE_CODE_OWNER,
                    S.WASTE_CODE_TYPE);
END;

    PROCEDURE PRM_MERGE_UNIT_DETAIL AS
BEGIN
MERGE INTO RCRA_PRM_UNIT_DETAIL D
    USING (SELECT *
           FROM ETL_PRM_UNIT_DETAIL_VW) S
    ON (D.PRM_UNIT_DETAIL_ID = S.WH_PRM_UNIT_DETAIL_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.PROC_UNIT_DATA_OWNER_CODE      = S.PROC_UNIT_DATA_OWNER_CODE,
                D.PROC_UNIT_CODE                 = S.PROC_UNIT_CODE,
                D.PERMIT_STAT_EFFC_DATE          = S.PERMIT_STAT_EFFC_DATE,
                D.PERMIT_UNIT_CAP_QNTY           = S.PERMIT_UNIT_CAP_QNTY,
                D.CAP_TYPE_CODE                  = S.CAP_TYPE_CODE,
                D.COMMER_STAT_CODE               = S.COMMER_STAT_CODE,
                D.LEGAL_OPER_STAT_DATA_OWNER_CDE = S.LEGAL_OPER_STAT_DATA_OWNER_CDE,
                D.LEGAL_OPER_STAT_CODE           = S.LEGAL_OPER_STAT_CODE,
                D.MEASUREMENT_UNIT_DATA_OWNR_CDE = S.MEASUREMENT_UNIT_DATA_OWNR_CDE,
                D.MEASUREMENT_UNIT_CODE          = S.MEASUREMENT_UNIT_CODE,
                D.NUM_OF_UNITS_COUNT             = S.NUM_OF_UNITS_COUNT,
                D.STANDARD_PERMIT_IND            = S.STANDARD_PERMIT_IND,
                D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT,
                D.CURRENT_UNIT_DETAIL_IND        = S.CURRENT_UNIT_DETAIL_IND,
                D.CREATED_BY_USERID              = S.CREATED_BY_USERID,
                D.P_CREATED_DATE                 = S.P_CREATED_DATE,
                D.LAST_UPDT_BY                   = S.LAST_UPDT_BY,
                D.LAST_UPDT_DATE                 = S.LAST_UPDT_DATE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.PERMIT_UNIT_DETAIL_SEQ_NUM, S.PERMIT_UNIT_DETAIL_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.PROC_UNIT_DATA_OWNER_CODE, S.PROC_UNIT_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.PROC_UNIT_CODE, S.PROC_UNIT_CODE, 0, 1) = 1
               OR DECODE(D.PERMIT_STAT_EFFC_DATE, S.PERMIT_STAT_EFFC_DATE, 0, 1) = 1
               OR DECODE(D.PERMIT_UNIT_CAP_QNTY, S.PERMIT_UNIT_CAP_QNTY, 0, 1) = 1
               OR DECODE(D.CAP_TYPE_CODE, S.CAP_TYPE_CODE, 0, 1) = 1
               OR DECODE(D.COMMER_STAT_CODE, S.COMMER_STAT_CODE, 0, 1) = 1
               OR DECODE(D.LEGAL_OPER_STAT_DATA_OWNER_CDE, S.LEGAL_OPER_STAT_DATA_OWNER_CDE, 0, 1) = 1
               OR DECODE(D.LEGAL_OPER_STAT_CODE, S.LEGAL_OPER_STAT_CODE, 0, 1) = 1
               OR DECODE(D.MEASUREMENT_UNIT_DATA_OWNR_CDE, S.MEASUREMENT_UNIT_DATA_OWNR_CDE, 0, 1) = 1
               OR DECODE(D.MEASUREMENT_UNIT_CODE, S.MEASUREMENT_UNIT_CODE, 0, 1) = 1
               OR DECODE(D.NUM_OF_UNITS_COUNT, S.NUM_OF_UNITS_COUNT, 0, 1) = 1
               OR DECODE(D.STANDARD_PERMIT_IND, S.STANDARD_PERMIT_IND, 0, 1) = 1
               OR DECODE(D.SUPP_INFO_TXT, S.SUPP_INFO_TXT, 0, 1) = 1
               OR DECODE(D.CURRENT_UNIT_DETAIL_IND, S.CURRENT_UNIT_DETAIL_IND, 0, 1) = 1
               OR DECODE(D.CREATED_BY_USERID, S.CREATED_BY_USERID, 0, 1) = 1
               OR DECODE(D.P_CREATED_DATE, S.P_CREATED_DATE, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_BY, S.LAST_UPDT_BY, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_DATE, S.LAST_UPDT_DATE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (PRM_UNIT_DETAIL_ID,
                    PRM_UNIT_ID,
                    TRANS_CODE,
                    PERMIT_UNIT_DETAIL_SEQ_NUM,
                    PROC_UNIT_DATA_OWNER_CODE,
                    PROC_UNIT_CODE,
                    PERMIT_STAT_EFFC_DATE,
                    PERMIT_UNIT_CAP_QNTY,
                    CAP_TYPE_CODE,
                    COMMER_STAT_CODE,
                    LEGAL_OPER_STAT_DATA_OWNER_CDE,
                    LEGAL_OPER_STAT_CODE,
                    MEASUREMENT_UNIT_DATA_OWNR_CDE,
                    MEASUREMENT_UNIT_CODE,
                    NUM_OF_UNITS_COUNT,
                    STANDARD_PERMIT_IND,
                    SUPP_INFO_TXT,
                    CURRENT_UNIT_DETAIL_IND,
                    CREATED_BY_USERID,
                    P_CREATED_DATE,
                    LAST_UPDT_BY,
                    LAST_UPDT_DATE)
            VALUES (SEQ_RCRA_PRM_UNIT_DETAIL.NEXTVAL,
                    S.WH_PRM_UNIT_ID,
                    S.TRANS_CODE,
                    S.PERMIT_UNIT_DETAIL_SEQ_NUM,
                    S.PROC_UNIT_DATA_OWNER_CODE,
                    S.PROC_UNIT_CODE,
                    S.PERMIT_STAT_EFFC_DATE,
                    S.PERMIT_UNIT_CAP_QNTY,
                    S.CAP_TYPE_CODE,
                    S.COMMER_STAT_CODE,
                    S.LEGAL_OPER_STAT_DATA_OWNER_CDE,
                    S.LEGAL_OPER_STAT_CODE,
                    S.MEASUREMENT_UNIT_DATA_OWNR_CDE,
                    S.MEASUREMENT_UNIT_CODE,
                    S.NUM_OF_UNITS_COUNT,
                    S.STANDARD_PERMIT_IND,
                    S.SUPP_INFO_TXT,
                    S.CURRENT_UNIT_DETAIL_IND,
                    S.CREATED_BY_USERID,
                    S.P_CREATED_DATE,
                    S.LAST_UPDT_BY,
                    S.LAST_UPDT_DATE);
END;

    PROCEDURE PRM_MERGE_UNIT AS
BEGIN
MERGE INTO RCRA_PRM_UNIT D
    USING (SELECT *
           FROM ETL_PRM_UNIT_VW) S
    ON (D.PRM_UNIT_ID = S.WH_PRM_UNIT_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE          = S.TRANS_CODE,
                D.PERMIT_UNIT_SEQ_NUM = S.PERMIT_UNIT_SEQ_NUM,
                D.PERMIT_UNIT_NAME    = S.PERMIT_UNIT_NAME,
                D.SUPP_INFO_TXT       = S.SUPP_INFO_TXT,
                D.ACTIVE_UNIT_IND     = S.ACTIVE_UNIT_IND,
                D.CREATED_BY_USERID   = S.CREATED_BY_USERID,
                D.P_CREATED_DATE      = S.P_CREATED_DATE,
                D.LAST_UPDT_BY        = S.LAST_UPDT_BY,
                D.LAST_UPDT_DATE      = S.LAST_UPDT_DATE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.PERMIT_UNIT_SEQ_NUM, S.PERMIT_UNIT_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.PERMIT_UNIT_NAME, S.PERMIT_UNIT_NAME, 0, 1) = 1
               OR DECODE(D.SUPP_INFO_TXT, S.SUPP_INFO_TXT, 0, 1) = 1
               OR DECODE(D.ACTIVE_UNIT_IND, S.ACTIVE_UNIT_IND, 0, 1) = 1
               OR DECODE(D.CREATED_BY_USERID, S.CREATED_BY_USERID, 0, 1) = 1
               OR DECODE(D.P_CREATED_DATE, S.P_CREATED_DATE, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_BY, S.LAST_UPDT_BY, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_DATE, S.LAST_UPDT_DATE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (PRM_UNIT_ID,
                    PRM_FAC_SUBM_ID,
                    TRANS_CODE,
                    PERMIT_UNIT_SEQ_NUM,
                    PERMIT_UNIT_NAME,
                    SUPP_INFO_TXT,
                    ACTIVE_UNIT_IND,
                    CREATED_BY_USERID,
                    P_CREATED_DATE,
                    LAST_UPDT_BY,
                    LAST_UPDT_DATE)
            VALUES (SEQ_RCRA_PRM_UNIT.NEXTVAL,
                    S.WH_PRM_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.PERMIT_UNIT_SEQ_NUM,
                    S.PERMIT_UNIT_NAME,
                    S.SUPP_INFO_TXT,
                    S.ACTIVE_UNIT_IND,
                    S.CREATED_BY_USERID,
                    S.P_CREATED_DATE,
                    S.LAST_UPDT_BY,
                    S.LAST_UPDT_DATE);
END;

    PROCEDURE PRM_MERGE_SERIES AS
BEGIN
MERGE INTO RCRA_PRM_SERIES D
    USING (SELECT *
           FROM ETL_PRM_SERIES_VW) S
    ON (D.PRM_SERIES_ID = S.WH_PRM_SERIES_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                  = S.TRANS_CODE,
                D.PERMIT_SERIES_SEQ_NUM       = S.PERMIT_SERIES_SEQ_NUM,
                D.PERMIT_SERIES_NAME          = S.PERMIT_SERIES_NAME,
                D.RESP_PERSON_DATA_OWNER_CODE = S.RESP_PERSON_DATA_OWNER_CODE,
                D.RESP_PERSON_ID              = S.RESP_PERSON_ID,
                D.SUPP_INFO_TXT               = S.SUPP_INFO_TXT,
                D.ACTIVE_SERIES_IND           = S.ACTIVE_SERIES_IND,
                D.CREATED_BY_USERID           = S.CREATED_BY_USERID,
                D.P_CREATED_DATE              = S.P_CREATED_DATE,
                D.LAST_UPDT_BY                = S.LAST_UPDT_BY,
                D.LAST_UPDT_DATE              = S.LAST_UPDT_DATE
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.PERMIT_SERIES_SEQ_NUM, S.PERMIT_SERIES_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.PERMIT_SERIES_NAME, S.PERMIT_SERIES_NAME, 0, 1) = 1
               OR DECODE(D.RESP_PERSON_DATA_OWNER_CODE, S.RESP_PERSON_DATA_OWNER_CODE, 0, 1) = 1
               OR DECODE(D.RESP_PERSON_ID, S.RESP_PERSON_ID, 0, 1) = 1
               OR DECODE(D.SUPP_INFO_TXT, S.SUPP_INFO_TXT, 0, 1) = 1
               OR DECODE(D.ACTIVE_SERIES_IND, S.ACTIVE_SERIES_IND, 0, 1) = 1
               OR DECODE(D.CREATED_BY_USERID, S.CREATED_BY_USERID, 0, 1) = 1
               OR DECODE(D.P_CREATED_DATE, S.P_CREATED_DATE, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_BY, S.LAST_UPDT_BY, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_DATE, S.LAST_UPDT_DATE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (PRM_SERIES_ID,
                    PRM_FAC_SUBM_ID,
                    TRANS_CODE,
                    PERMIT_SERIES_SEQ_NUM,
                    PERMIT_SERIES_NAME,
                    RESP_PERSON_DATA_OWNER_CODE,
                    RESP_PERSON_ID,
                    SUPP_INFO_TXT,
                    ACTIVE_SERIES_IND,
                    CREATED_BY_USERID,
                    P_CREATED_DATE,
                    LAST_UPDT_BY,
                    LAST_UPDT_DATE)
            VALUES (SEQ_RCRA_PRM_SERIES.NEXTVAL,
                    S.WH_PRM_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.PERMIT_SERIES_SEQ_NUM,
                    S.PERMIT_SERIES_NAME,
                    S.RESP_PERSON_DATA_OWNER_CODE,
                    S.RESP_PERSON_ID,
                    S.SUPP_INFO_TXT,
                    S.ACTIVE_SERIES_IND,
                    S.CREATED_BY_USERID,
                    S.P_CREATED_DATE,
                    S.LAST_UPDT_BY,
                    S.LAST_UPDT_DATE);
END;

    PROCEDURE PRM_MERGE_FAC_SUBM AS
BEGIN
MERGE INTO RCRA_PRM_FAC_SUBM D
    USING (SELECT *
           FROM ETL_PRM_FAC_SUBM_VW) S
    ON (D.PRM_FAC_SUBM_ID = S.WH_PRM_FAC_SUBM_ID)
    WHEN NOT MATCHED THEN
        INSERT (PRM_FAC_SUBM_ID,
                HANDLER_ID)
            VALUES (SEQ_RCRA_PRM_FAC_SUBM.NEXTVAL,
                    S.HANDLER_ID);
END;

-- HD

    PROCEDURE HD_LOG_HANDLERS AS
        ETL_ID number;
BEGIN
        ETL_ID := SEQ_ETL_RUN.NEXTVAL;
INSERT INTO ETL_RUN
(ETL_RUN_ID,
 RUN_DATE,
 ETL_TYPE)
VALUES (ETL_ID,
        CURRENT_TIMESTAMP,
        'HD');
INSERT INTO ETL_RUN_HANDLER
(ETL_RUN_ID,
 HANDLER_ID,
 STATUS_TYPE)
SELECT ETL_ID,
       HANDLER_ID,
       CASE
           WHEN
               HD_HBASIC_ID IS NULL
               THEN
               'I'
           ELSE
               'U'
           END
FROM ETL_HD_BASIC_VW;
END;

    PROCEDURE HD_MERGE_HBASIC AS
BEGIN
MERGE INTO RCRA_HD_HBASIC D
    USING (
        SELECT *
        FROM ETL_HD_BASIC_VW) S
    --INNER JOIN NODE_RCRA_HD_HBASIC ON NODE_RCRA_HD_HBASIC.HANDLER_ID = ETL_HD_BASIC_VW.HANDLER_ID) S
    ON (D.HD_HBASIC_ID = S.WH_HD_HBASIC_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.FACILITY_IDENTIFIER = S.FACILITY_IDENTIFIER,
                D.EXTRACT_FLAG        = S.EXTRACT_FLAG,
                D.TRANSACTION_CODE    = S.TRANSACTION_CODE
    WHERE DECODE(D.FACILITY_IDENTIFIER, S.FACILITY_IDENTIFIER, 0, 1) = 1
               OR DECODE(D.EXTRACT_FLAG, S.EXTRACT_FLAG, 0, 1) = 1
               OR DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT
            (HD_HBASIC_ID,
             TRANSACTION_CODE,
             HANDLER_ID,
             EXTRACT_FLAG,
             FACILITY_IDENTIFIER)
            VALUES (SEQ_RCRA_HD_HBASIC.NEXTVAL,
                    S.TRANSACTION_CODE,
                    S.HANDLER_ID,
                    S.EXTRACT_FLAG,
                    S.FACILITY_IDENTIFIER);
END;

    PROCEDURE HD_MERGE_HANDLER AS
BEGIN
MERGE INTO RCRA_HD_HANDLER D
    USING (SELECT *
           FROM ETL_HD_HANDLER_VW) S
    ON (D.HD_HANDLER_ID = S.WH_HD_HANDLER_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANSACTION_CODE               = S.TRANSACTION_CODE,
                D.ACTIVITY_LOCATION              = S.ACTIVITY_LOCATION,
                D.SOURCE_TYPE                    = S.SOURCE_TYPE,
                D.RECEIVE_DATE                   = S.RECEIVE_DATE,
                D.HANDLER_NAME                   = S.HANDLER_NAME,
                D.ACKNOWLEDGE_DATE               = S.ACKNOWLEDGE_DATE,
                D.NON_NOTIFIER                   = S.NON_NOTIFIER,
                D.OFF_SITE_RECEIPT               = S.OFF_SITE_RECEIPT,
                D.ACCESSIBILITY                  = S.ACCESSIBILITY,
                D.COUNTY_CODE_OWNER              = S.COUNTY_CODE_OWNER,
                D.COUNTY_CODE                    = S.COUNTY_CODE,
                D.NOTES                          = S.NOTES,
                D.ACKNOWLEDGE_FLAG               = S.ACKNOWLEDGE_FLAG,
                D.LOCATION_STREET1               = S.LOCATION_STREET1,
                D.LOCATION_STREET2               = S.LOCATION_STREET2,
                D.LOCATION_CITY                  = S.LOCATION_CITY,
                D.LOCATION_STATE                 = S.LOCATION_STATE,
                D.LOCATION_COUNTRY               = S.LOCATION_COUNTRY,
                D.LOCATION_ZIP                   = S.LOCATION_ZIP,
                D.MAIL_STREET1                   = S.MAIL_STREET1,
                D.MAIL_STREET2                   = S.MAIL_STREET2,
                D.MAIL_CITY                      = S.MAIL_CITY,
                D.MAIL_STATE                     = S.MAIL_STATE,
                D.MAIL_COUNTRY                   = S.MAIL_COUNTRY,
                D.MAIL_ZIP                       = S.MAIL_ZIP,
                D.CONTACT_FIRST_NAME             = S.CONTACT_FIRST_NAME,
                D.CONTACT_MIDDLE_INITIAL         = S.CONTACT_MIDDLE_INITIAL,
                D.CONTACT_LAST_NAME              = S.CONTACT_LAST_NAME,
                D.CONTACT_ORG_NAME               = S.CONTACT_ORG_NAME,
                D.CONTACT_TITLE                  = D.CONTACT_TITLE,
                D.CONTACT_EMAIL_ADDRESS          = S.CONTACT_EMAIL_ADDRESS,
                D.CONTACT_PHONE                  = S.CONTACT_PHONE,
                D.CONTACT_PHONE_EXT              = S.CONTACT_PHONE_EXT,
                D.CONTACT_FAX                    = S.CONTACT_FAX,
                D.CONTACT_STREET1                = S.CONTACT_STREET1,
                D.CONTACT_STREET2                = S.CONTACT_STREET2,
                D.CONTACT_CITY                   = S.CONTACT_CITY,
                D.CONTACT_STATE                  = S.CONTACT_STATE,
                D.CONTACT_COUNTRY                = S.CONTACT_COUNTRY,
                D.CONTACT_ZIP                    = S.CONTACT_ZIP,
                D.PCONTACT_FIRST_NAME            = S.PCONTACT_FIRST_NAME,
                D.PCONTACT_MIDDLE_NAME           = S.PCONTACT_MIDDLE_NAME,
                D.PCONTACT_LAST_NAME             = S.PCONTACT_LAST_NAME,
                D.PCONTACT_ORG_NAME              = S.PCONTACT_ORG_NAME,
                D.PCONTACT_TITLE                 = D.PCONTACT_TITLE,
                D.PCONTACT_EMAIL_ADDRESS         = S.PCONTACT_EMAIL_ADDRESS,
                D.PCONTACT_PHONE                 = S.PCONTACT_PHONE,
                D.PCONTACT_PHONE_EXT             = S.PCONTACT_PHONE_EXT,
                D.PCONTACT_FAX                   = S.PCONTACT_FAX,
                D.PCONTACT_STREET1               = S.PCONTACT_STREET1,
                D.PCONTACT_STREET2               = S.PCONTACT_STREET2,
                D.PCONTACT_CITY                  = S.PCONTACT_CITY,
                D.PCONTACT_STATE                 = S.PCONTACT_STATE,
                D.PCONTACT_COUNTRY               = S.PCONTACT_COUNTRY,
                D.PCONTACT_ZIP                   = S.PCONTACT_ZIP,
                D.USED_OIL_BURNER                = S.USED_OIL_BURNER,
                D.USED_OIL_PROCESSOR             = S.USED_OIL_PROCESSOR,
                D.USED_OIL_REFINER               = S.USED_OIL_REFINER,
                D.USED_OIL_MARKET_BURNER         = S.USED_OIL_MARKET_BURNER,
                D.USED_OIL_SPEC_MARKETER         = S.USED_OIL_SPEC_MARKETER,
                D.USED_OIL_TRANSFER_FACILITY     = S.USED_OIL_TRANSFER_FACILITY,
                D.USED_OIL_TRANSPORTER           = S.USED_OIL_TRANSPORTER,
                D.LAND_TYPE                      = S.LAND_TYPE,
                D.STATE_DISTRICT_OWNER           = S.STATE_DISTRICT_OWNER,
                D.STATE_DISTRICT                 = S.STATE_DISTRICT,
                D.IMPORTER_ACTIVITY              = S.IMPORTER_ACTIVITY,
                D.MIXED_WASTE_GENERATOR          = S.MIXED_WASTE_GENERATOR,
                D.RECYCLER_ACTIVITY              = S.RECYCLER_ACTIVITY,
                D.TRANSPORTER_ACTIVITY           = S.TRANSPORTER_ACTIVITY,
                D.TSD_ACTIVITY                   = S.TSD_ACTIVITY,
                D.UNDERGROUND_INJECTION_ACTIVITY = S.UNDERGROUND_INJECTION_ACTIVITY,
                D.ONSITE_BURNER_EXEMPTION        = S.ONSITE_BURNER_EXEMPTION,
                D.FURNACE_EXEMPTION              = S.FURNACE_EXEMPTION,
                D.SHORT_TERM_GEN_IND             = S.SHORT_TERM_GEN_IND,
                D.TRANSFER_FACILITY_IND          = S.TRANSFER_FACILITY_IND,
                D.COLLEGE_IND                    = S.COLLEGE_IND,
                D.HOSPITAL_IND                   = S.HOSPITAL_IND,
                D.NON_PROFIT_IND                 = S.NON_PROFIT_IND,
                D.WITHDRAWAL_IND                 = S.WITHDRAWAL_IND,
                D.TRANS_CODE                     = S.TRANS_CODE,
                D.NOTIFICATION_RSN_CODE          = S.NOTIFICATION_RSN_CODE,
                D.EFFC_DATE                      = S.EFFC_DATE,
                D.FINANCIAL_ASSURANCE_IND        = S.FINANCIAL_ASSURANCE_IND,
                D.RECYCLING_IND                  = S.RECYCLING_IND,
                D.MAIL_STREET_NUMBER             = S.MAIL_STREET_NUMBER,
                D.LOCATION_STREET_NUMBER         = S.LOCATION_STREET_NUMBER,
                D.NON_NOTIFIER_TEXT              = S.NON_NOTIFIER_TEXT,
                D.ACCESSIBILITY_TEXT             = S.ACCESSIBILITY_TEXT,
                D.STATE_DISTRICT_TEXT            = S.STATE_DISTRICT_TEXT,
                D.INTRNL_NOTES                   = S.INTRNL_NOTES,
                D.SHORT_TERM_INTRNL_NOTES        = S.SHORT_TERM_INTRNL_NOTES,
                D.NATURE_OF_BUSINESS_TEXT        = S.NATURE_OF_BUSINESS_TEXT,
                D.SLAB_EXPORTER_IND              = S.SLAB_EXPORTER_IND,
                D.SLAB_IMPORTER_IND              = S.SLAB_IMPORTER_IND,
                D.RECOGNIZED_TRADER_EXPORTER_IND = S.RECOGNIZED_TRADER_EXPORTER_IND,
                D.RECOGNIZED_TRADER_IMPORTER_IND = S.RECOGNIZED_TRADER_IMPORTER_IND,
                D.TSD_DATE                       = S.TSD_DATE,
                D.UNIVERSAL_WASTE_DEST_FACILITY  = S.UNIVERSAL_WASTE_DEST_FACILITY,
                D.STATE_WASTE_GENERATOR_OWNER    = S.STATE_WASTE_GENERATOR_OWNER,
                D.STATE_WASTE_GENERATOR          = S.STATE_WASTE_GENERATOR,
                D.FED_WASTE_GENERATOR_OWNER      = S.FED_WASTE_GENERATOR_OWNER,
                D.FED_WASTE_GENERATOR            = S.FED_WASTE_GENERATOR,
                D.ACKNOWLEDGE_FLAG_IND           = S.ACKNOWLEDGE_FLAG_IND,
                D.INCLUDE_IN_NATIONAL_REPORT_IND = S.INCLUDE_IN_NATIONAL_REPORT_IND,
                D.LQHUW_IND                      = S.LQHUW_IND,
                D.HD_REPORT_CYCLE_YEAR           = S.HD_REPORT_CYCLE_YEAR,
                D.HEALTHCARE_FAC                 = S.HEALTHCARE_FAC,
                D.REVERSE_DISTRIBUTOR            = S.REVERSE_DISTRIBUTOR,
                D.SUBPART_P_WITHDRAWAL           = S.SUBPART_P_WITHDRAWAL,
                D.RECYCLER_IND                   = S.RECYCLER_IND,
                D.CURRENT_RECORD                 = S.CURRENT_RECORD,
                D.CREATED_BY_USERID              = S.CREATED_BY_USERID,
                D.H_CREATED_DATE                 = S.H_CREATED_DATE,
                D.DATA_ORIG                      = S.DATA_ORIG,
                D.LOCATION_LATITUDE              = S.LOCATION_LATITUDE,
                D.LOCATION_LONGITUDE             = S.LOCATION_LONGITUDE,
                D.LOCATION_GIS_PRIM              = S.LOCATION_GIS_PRIM,
                D.LOCATION_GIS_ORIG              = S.LOCATION_GIS_ORIG,
                D.LAST_UPDT_BY                   = S.LAST_UPDT_BY,
                D.LAST_UPDT_DATE                 = S.LAST_UPDT_DATE,
                D.BR_EXEMPT_IND                  = S.BR_EXEMPT_IND
    WHERE DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
               OR DECODE(D.ACTIVITY_LOCATION, S.ACTIVITY_LOCATION, 0, 1) = 1
               OR DECODE(D.SOURCE_TYPE, S.SOURCE_TYPE, 0, 1) = 1
               OR DECODE(D.RECEIVE_DATE, S.RECEIVE_DATE, 0, 1) = 1
               OR DECODE(D.HANDLER_NAME, S.HANDLER_NAME, 0, 1) = 1
               OR DECODE(D.ACKNOWLEDGE_DATE, S.ACKNOWLEDGE_DATE, 0, 1) = 1
               OR DECODE(D.NON_NOTIFIER, S.NON_NOTIFIER, 0, 1) = 1
               OR DECODE(D.OFF_SITE_RECEIPT, S.OFF_SITE_RECEIPT, 0, 1) = 1
               OR DECODE(D.ACCESSIBILITY, S.ACCESSIBILITY, 0, 1) = 1
               OR DECODE(D.COUNTY_CODE_OWNER, S.COUNTY_CODE_OWNER, 0, 1) = 1
               OR DECODE(D.COUNTY_CODE, S.COUNTY_CODE, 0, 1) = 1
               OR DECODE(D.NOTES, S.NOTES, 0, 1) = 1
               OR DECODE(D.ACKNOWLEDGE_FLAG, S.ACKNOWLEDGE_FLAG, 0, 1) = 1
               OR DECODE(D.LOCATION_STREET1, S.LOCATION_STREET1, 0, 1) = 1
               OR DECODE(D.LOCATION_STREET2, S.LOCATION_STREET2, 0, 1) = 1
               OR DECODE(D.LOCATION_CITY, S.LOCATION_CITY, 0, 1) = 1
               OR DECODE(D.LOCATION_STATE, S.LOCATION_STATE, 0, 1) = 1
               OR DECODE(D.LOCATION_COUNTRY, S.LOCATION_COUNTRY, 0, 1) = 1
               OR DECODE(D.LOCATION_ZIP, S.LOCATION_ZIP, 0, 1) = 1
               OR DECODE(D.MAIL_STREET1, S.MAIL_STREET1, 0, 1) = 1
               OR DECODE(D.MAIL_STREET2, S.MAIL_STREET2, 0, 1) = 1
               OR DECODE(D.MAIL_CITY, S.MAIL_CITY, 0, 1) = 1
               OR DECODE(D.MAIL_STATE, S.MAIL_STATE, 0, 1) = 1
               OR DECODE(D.MAIL_COUNTRY, S.MAIL_COUNTRY, 0, 1) = 1
               OR DECODE(D.MAIL_ZIP, S.MAIL_ZIP, 0, 1) = 1
               OR DECODE(D.CONTACT_FIRST_NAME, S.CONTACT_FIRST_NAME, 0, 1) = 1
               OR DECODE(D.CONTACT_MIDDLE_INITIAL, S.CONTACT_MIDDLE_INITIAL, 0, 1) = 1
               OR DECODE(D.CONTACT_LAST_NAME, S.CONTACT_LAST_NAME, 0, 1) = 1
               OR DECODE(D.CONTACT_ORG_NAME, S.CONTACT_ORG_NAME, 0, 1) = 1
               OR DECODE(D.CONTACT_TITLE, S.CONTACT_TITLE, 0, 1) = 1
               OR DECODE(D.CONTACT_EMAIL_ADDRESS, S.CONTACT_EMAIL_ADDRESS, 0, 1) = 1
               OR DECODE(D.CONTACT_PHONE, S.CONTACT_PHONE, 0, 1) = 1
               OR DECODE(D.CONTACT_PHONE_EXT, S.CONTACT_PHONE_EXT, 0, 1) = 1
               OR DECODE(D.CONTACT_FAX, S.CONTACT_FAX, 0, 1) = 1
               OR DECODE(D.CONTACT_STREET1, S.CONTACT_STREET1, 0, 1) = 1
               OR DECODE(D.CONTACT_STREET2, S.CONTACT_STREET2, 0, 1) = 1
               OR DECODE(D.CONTACT_CITY, S.CONTACT_CITY, 0, 1) = 1
               OR DECODE(D.CONTACT_STATE, S.CONTACT_STATE, 0, 1) = 1
               OR DECODE(D.CONTACT_COUNTRY, S.CONTACT_COUNTRY, 0, 1) = 1
               OR DECODE(D.CONTACT_ZIP, S.CONTACT_ZIP, 0, 1) = 1
               OR DECODE(D.PCONTACT_FIRST_NAME, S.PCONTACT_FIRST_NAME, 0, 1) = 1
               OR DECODE(D.PCONTACT_MIDDLE_NAME, S.PCONTACT_MIDDLE_NAME, 0, 1) = 1
               OR DECODE(D.PCONTACT_LAST_NAME, S.PCONTACT_LAST_NAME, 0, 1) = 1
               OR DECODE(D.PCONTACT_ORG_NAME, S.PCONTACT_ORG_NAME, 0, 1) = 1
               OR DECODE(D.PCONTACT_TITLE, S.PCONTACT_TITLE, 0, 1) = 1
               OR DECODE(D.PCONTACT_EMAIL_ADDRESS, S.PCONTACT_EMAIL_ADDRESS, 0, 1) = 1
               OR DECODE(D.PCONTACT_PHONE, S.PCONTACT_PHONE, 0, 1) = 1
               OR DECODE(D.PCONTACT_PHONE_EXT, S.PCONTACT_PHONE_EXT, 0, 1) = 1
               OR DECODE(D.PCONTACT_FAX, S.PCONTACT_FAX, 0, 1) = 1
               OR DECODE(D.PCONTACT_STREET1, S.PCONTACT_STREET1, 0, 1) = 1
               OR DECODE(D.PCONTACT_STREET2, S.PCONTACT_STREET2, 0, 1) = 1
               OR DECODE(D.PCONTACT_CITY, S.PCONTACT_CITY, 0, 1) = 1
               OR DECODE(D.PCONTACT_STATE, S.PCONTACT_STATE, 0, 1) = 1
               OR DECODE(D.PCONTACT_COUNTRY, S.PCONTACT_COUNTRY, 0, 1) = 1
               OR DECODE(D.PCONTACT_ZIP, S.PCONTACT_ZIP, 0, 1) = 1
               OR DECODE(D.USED_OIL_BURNER, S.USED_OIL_BURNER, 0, 1) = 1
               OR DECODE(D.USED_OIL_PROCESSOR, S.USED_OIL_PROCESSOR, 0, 1) = 1
               OR DECODE(D.USED_OIL_REFINER, S.USED_OIL_REFINER, 0, 1) = 1
               OR DECODE(D.USED_OIL_MARKET_BURNER, S.USED_OIL_MARKET_BURNER, 0, 1) = 1
               OR DECODE(D.USED_OIL_SPEC_MARKETER, S.USED_OIL_SPEC_MARKETER, 0, 1) = 1
               OR DECODE(D.USED_OIL_TRANSFER_FACILITY, S.USED_OIL_TRANSFER_FACILITY, 0, 1) = 1
               OR DECODE(D.USED_OIL_TRANSPORTER, S.USED_OIL_TRANSPORTER, 0, 1) = 1
               OR DECODE(D.LAND_TYPE, S.LAND_TYPE, 0, 1) = 1
               OR DECODE(D.STATE_DISTRICT_OWNER, S.STATE_DISTRICT_OWNER, 0, 1) = 1
               OR DECODE(D.STATE_DISTRICT, S.STATE_DISTRICT, 0, 1) = 1
               OR DECODE(D.IMPORTER_ACTIVITY, S.IMPORTER_ACTIVITY, 0, 1) = 1
               OR DECODE(D.MIXED_WASTE_GENERATOR, S.MIXED_WASTE_GENERATOR, 0, 1) = 1
               OR DECODE(D.RECYCLER_ACTIVITY, S.RECYCLER_ACTIVITY, 0, 1) = 1
               OR DECODE(D.TRANSPORTER_ACTIVITY, S.TRANSPORTER_ACTIVITY, 0, 1) = 1
               OR DECODE(D.TSD_ACTIVITY, S.TSD_ACTIVITY, 0, 1) = 1
               OR DECODE(D.UNDERGROUND_INJECTION_ACTIVITY, S.UNDERGROUND_INJECTION_ACTIVITY, 0, 1) = 1
               OR DECODE(D.ONSITE_BURNER_EXEMPTION, S.ONSITE_BURNER_EXEMPTION, 0, 1) = 1
               OR DECODE(D.FURNACE_EXEMPTION, S.FURNACE_EXEMPTION, 0, 1) = 1
               OR DECODE(D.SHORT_TERM_GEN_IND, S.SHORT_TERM_GEN_IND, 0, 1) = 1
               OR DECODE(D.TRANSFER_FACILITY_IND, S.TRANSFER_FACILITY_IND, 0, 1) = 1
               OR DECODE(D.COLLEGE_IND, S.COLLEGE_IND, 0, 1) = 1
               OR DECODE(D.HOSPITAL_IND, S.HOSPITAL_IND, 0, 1) = 1
               OR DECODE(D.NON_PROFIT_IND, S.NON_PROFIT_IND, 0, 1) = 1
               OR DECODE(D.WITHDRAWAL_IND, S.WITHDRAWAL_IND, 0, 1) = 1
               OR DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.NOTIFICATION_RSN_CODE, S.NOTIFICATION_RSN_CODE, 0, 1) = 1
               OR DECODE(D.EFFC_DATE, S.EFFC_DATE, 0, 1) = 1
               OR DECODE(D.FINANCIAL_ASSURANCE_IND, S.FINANCIAL_ASSURANCE_IND, 0, 1) = 1
               OR DECODE(D.RECYCLING_IND, S.RECYCLING_IND, 0, 1) = 1
               OR DECODE(D.MAIL_STREET_NUMBER, S.MAIL_STREET_NUMBER, 0, 1) = 1
               OR DECODE(D.LOCATION_STREET_NUMBER, S.LOCATION_STREET_NUMBER, 0, 1) = 1
               OR DECODE(D.NON_NOTIFIER_TEXT, S.NON_NOTIFIER_TEXT, 0, 1) = 1
               OR DECODE(D.ACCESSIBILITY_TEXT, S.ACCESSIBILITY_TEXT, 0, 1) = 1
               OR DECODE(D.STATE_DISTRICT_TEXT, S.STATE_DISTRICT_TEXT, 0, 1) = 1
               OR DECODE(D.INTRNL_NOTES, S.STATE_DISTRICT_TEXT, 0, 1) = 1
               OR DECODE(D.SHORT_TERM_INTRNL_NOTES, S.SHORT_TERM_INTRNL_NOTES, 0, 1) = 1
               OR DECODE(D.NATURE_OF_BUSINESS_TEXT, S.NATURE_OF_BUSINESS_TEXT, 0, 1) = 1
               OR DECODE(D.RECOGNIZED_TRADER_EXPORTER_IND, S.RECOGNIZED_TRADER_EXPORTER_IND, 0, 1) = 1
               OR DECODE(D.RECOGNIZED_TRADER_IMPORTER_IND, S.RECOGNIZED_TRADER_IMPORTER_IND, 0, 1) = 1
               OR DECODE(D.SLAB_EXPORTER_IND, S.SLAB_EXPORTER_IND, 0, 1) = 1
               OR DECODE(D.SLAB_IMPORTER_IND, S.SLAB_IMPORTER_IND, 0, 1) = 1
               OR DECODE(D.TSD_DATE, S.TSD_DATE, 0, 1) = 1
               OR DECODE(D.UNIVERSAL_WASTE_DEST_FACILITY, S.UNIVERSAL_WASTE_DEST_FACILITY, 0, 1) = 1
               OR DECODE(D.STATE_WASTE_GENERATOR_OWNER, S.STATE_WASTE_GENERATOR_OWNER, 0, 1) = 1
               OR DECODE(D.STATE_WASTE_GENERATOR, S.STATE_WASTE_GENERATOR, 0, 1) = 1
               OR DECODE(D.FED_WASTE_GENERATOR_OWNER, S.FED_WASTE_GENERATOR_OWNER, 0, 1) = 1
               OR DECODE(D.FED_WASTE_GENERATOR, S.FED_WASTE_GENERATOR, 0, 1) = 1
               OR DECODE(D.ACKNOWLEDGE_FLAG_IND, S.ACKNOWLEDGE_FLAG_IND, 0, 1) = 1
               OR DECODE(D.INCLUDE_IN_NATIONAL_REPORT_IND, S.INCLUDE_IN_NATIONAL_REPORT_IND, 0, 1) = 1
               OR DECODE(D.LQHUW_IND, S.LQHUW_IND, 0, 1) = 1
               OR DECODE(D.HD_REPORT_CYCLE_YEAR, S.HD_REPORT_CYCLE_YEAR, 0, 1) = 1
               OR DECODE(D.HEALTHCARE_FAC, S.HEALTHCARE_FAC, 0, 1) = 1
               OR DECODE(D.REVERSE_DISTRIBUTOR, S.REVERSE_DISTRIBUTOR, 0, 1) = 1
               OR DECODE(D.SUBPART_P_WITHDRAWAL, S.SUBPART_P_WITHDRAWAL, 0, 1) = 1
               OR DECODE(D.RECYCLER_IND, S.RECYCLER_IND, 0, 1) = 1
               OR DECODE(D.CURRENT_RECORD, S.CURRENT_RECORD, 0, 1) = 1
               OR DECODE(D.CREATED_BY_USERID, S.CREATED_BY_USERID, 0, 1) = 1
               OR DECODE(D.H_CREATED_DATE, S.H_CREATED_DATE, 0, 1) = 1
               OR DECODE(D.DATA_ORIG, S.DATA_ORIG, 0, 1) = 1
               OR DECODE(D.LOCATION_LATITUDE, S.LOCATION_LATITUDE, 0, 1) = 1
               OR DECODE(D.LOCATION_LONGITUDE, S.LOCATION_LONGITUDE, 0, 1) = 1
               OR DECODE(D.LOCATION_GIS_PRIM, S.LOCATION_GIS_PRIM, 0, 1) = 1
               OR DECODE(D.LOCATION_GIS_ORIG, S.LOCATION_GIS_ORIG, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_BY, S.LAST_UPDT_BY, 0, 1) = 1
               OR DECODE(D.LAST_UPDT_DATE, S.LAST_UPDT_DATE, 0, 1) = 1
               OR DECODE(D.BR_EXEMPT_IND, S.BR_EXEMPT_IND, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT
            (HD_HANDLER_ID,
             HD_HBASIC_ID,
             TRANSACTION_CODE,
             ACTIVITY_LOCATION,
             SEQ_NUMBER,
             SOURCE_TYPE,
             RECEIVE_DATE,
             HANDLER_NAME,
             ACKNOWLEDGE_DATE,
             NON_NOTIFIER,
             OFF_SITE_RECEIPT,
             ACCESSIBILITY,
             COUNTY_CODE_OWNER,
             COUNTY_CODE,
             NOTES,
             ACKNOWLEDGE_FLAG,
             LOCATION_STREET1,
             LOCATION_STREET2,
             LOCATION_CITY,
             LOCATION_STATE,
             LOCATION_COUNTRY,
             LOCATION_ZIP,
             MAIL_STREET1,
             MAIL_STREET2,
             MAIL_CITY,
             MAIL_STATE,
             MAIL_COUNTRY,
             MAIL_ZIP,
             CONTACT_FIRST_NAME,
             CONTACT_MIDDLE_INITIAL,
             CONTACT_LAST_NAME,
             CONTACT_ORG_NAME,
             CONTACT_TITLE,
             CONTACT_EMAIL_ADDRESS,
             CONTACT_PHONE,
             CONTACT_PHONE_EXT,
             CONTACT_FAX,
             CONTACT_STREET1,
             CONTACT_STREET2,
             CONTACT_CITY,
             CONTACT_STATE,
             CONTACT_COUNTRY,
             CONTACT_ZIP,
             PCONTACT_FIRST_NAME,
             PCONTACT_MIDDLE_NAME,
             PCONTACT_LAST_NAME,
             PCONTACT_ORG_NAME,
             PCONTACT_TITLE,
             PCONTACT_EMAIL_ADDRESS,
             PCONTACT_PHONE,
             PCONTACT_PHONE_EXT,
             PCONTACT_FAX,
             PCONTACT_STREET1,
             PCONTACT_STREET2,
             PCONTACT_CITY,
             PCONTACT_STATE,
             PCONTACT_COUNTRY,
             PCONTACT_ZIP,
             USED_OIL_BURNER,
             USED_OIL_PROCESSOR,
             USED_OIL_REFINER,
             USED_OIL_MARKET_BURNER,
             USED_OIL_SPEC_MARKETER,
             USED_OIL_TRANSFER_FACILITY,
             USED_OIL_TRANSPORTER,
             LAND_TYPE,
             STATE_DISTRICT_OWNER,
             STATE_DISTRICT,
             IMPORTER_ACTIVITY,
             MIXED_WASTE_GENERATOR,
             RECYCLER_ACTIVITY,
             TRANSPORTER_ACTIVITY,
             TSD_ACTIVITY,
             UNDERGROUND_INJECTION_ACTIVITY,
             ONSITE_BURNER_EXEMPTION,
             FURNACE_EXEMPTION,
             SHORT_TERM_GEN_IND,
             TRANSFER_FACILITY_IND,
             COLLEGE_IND,
             HOSPITAL_IND,
             NON_PROFIT_IND,
             WITHDRAWAL_IND,
             TRANS_CODE,
             NOTIFICATION_RSN_CODE,
             EFFC_DATE,
             FINANCIAL_ASSURANCE_IND,
             RECYCLING_IND,
             MAIL_STREET_NUMBER,
             LOCATION_STREET_NUMBER,
             NON_NOTIFIER_TEXT,
             ACCESSIBILITY_TEXT,
             STATE_DISTRICT_TEXT,
             INTRNL_NOTES,
             SHORT_TERM_INTRNL_NOTES,
             NATURE_OF_BUSINESS_TEXT,
             RECOGNIZED_TRADER_EXPORTER_IND,
             RECOGNIZED_TRADER_IMPORTER_IND,
             SLAB_EXPORTER_IND,
             SLAB_IMPORTER_IND,
             TSD_DATE,
             UNIVERSAL_WASTE_DEST_FACILITY,
             STATE_WASTE_GENERATOR_OWNER,
             STATE_WASTE_GENERATOR,
             FED_WASTE_GENERATOR_OWNER,
             FED_WASTE_GENERATOR,
             ACKNOWLEDGE_FLAG_IND,
             INCLUDE_IN_NATIONAL_REPORT_IND,
             LQHUW_IND,
             HD_REPORT_CYCLE_YEAR,
             HEALTHCARE_FAC,
             REVERSE_DISTRIBUTOR,
             SUBPART_P_WITHDRAWAL,
             RECYCLER_IND,
             CURRENT_RECORD,
             CREATED_BY_USERID,
             H_CREATED_DATE,
             DATA_ORIG,
             LOCATION_LATITUDE,
             LOCATION_LONGITUDE,
             LOCATION_GIS_PRIM,
             LOCATION_GIS_ORIG,
             LAST_UPDT_BY,
             LAST_UPDT_DATE,
             BR_EXEMPT_IND)
            VALUES (SEQ_RCRA_HD_HANDLER.NEXTVAL,
                    S.WH_HD_HBASIC_ID,
                    S.TRANSACTION_CODE,
                    S.ACTIVITY_LOCATION,
                    S.SEQ_NUMBER,
                    S.SOURCE_TYPE,
                    S.RECEIVE_DATE,
                    S.HANDLER_NAME,
                    S.ACKNOWLEDGE_DATE,
                    S.NON_NOTIFIER,
                    S.OFF_SITE_RECEIPT,
                    S.ACCESSIBILITY,
                    S.COUNTY_CODE_OWNER,
                    S.COUNTY_CODE,
                    S.NOTES,
                    S.ACKNOWLEDGE_FLAG,
                    s.LOCATION_STREET1,
                    S.LOCATION_STREET2,
                    S.LOCATION_CITY,
                    S.LOCATION_STATE,
                    S.LOCATION_COUNTRY,
                    S.LOCATION_ZIP,
                    S.MAIL_STREET1,
                    S.MAIL_STREET2,
                    S.MAIL_CITY,
                    S.MAIL_STATE,
                    S.MAIL_COUNTRY,
                    S.MAIL_ZIP,
                    S.CONTACT_FIRST_NAME,
                    S.CONTACT_MIDDLE_INITIAL,
                    S.CONTACT_LAST_NAME,
                    S.CONTACT_ORG_NAME,
                    S.CONTACT_TITLE,
                    S.CONTACT_EMAIL_ADDRESS,
                    S.CONTACT_PHONE,
                    S.CONTACT_PHONE_EXT,
                    S.CONTACT_FAX,
                    S.CONTACT_STREET1,
                    S.CONTACT_STREET2,
                    S.CONTACT_CITY,
                    S.CONTACT_STATE,
                    S.CONTACT_COUNTRY,
                    S.CONTACT_ZIP,
                    S.PCONTACT_FIRST_NAME,
                    S.PCONTACT_MIDDLE_NAME,
                    S.PCONTACT_LAST_NAME,
                    S.PCONTACT_ORG_NAME,
                    S.PCONTACT_TITLE,
                    S.PCONTACT_EMAIL_ADDRESS,
                    S.PCONTACT_PHONE,
                    S.PCONTACT_PHONE_EXT,
                    S.PCONTACT_FAX,
                    S.PCONTACT_STREET1,
                    S.PCONTACT_STREET2,
                    S.PCONTACT_CITY,
                    S.PCONTACT_STATE,
                    S.PCONTACT_COUNTRY,
                    S.PCONTACT_ZIP,
                    S.USED_OIL_BURNER,
                    S.USED_OIL_PROCESSOR,
                    S.USED_OIL_REFINER,
                    S.USED_OIL_MARKET_BURNER,
                    S.USED_OIL_SPEC_MARKETER,
                    S.USED_OIL_TRANSFER_FACILITY,
                    S.USED_OIL_TRANSPORTER,
                    S.LAND_TYPE,
                    S.STATE_DISTRICT_OWNER,
                    S.STATE_DISTRICT,
                    S.IMPORTER_ACTIVITY,
                    S.MIXED_WASTE_GENERATOR,
                    S.RECYCLER_ACTIVITY,
                    S.TRANSPORTER_ACTIVITY,
                    S.TSD_ACTIVITY,
                    S.UNDERGROUND_INJECTION_ACTIVITY,
                    S.ONSITE_BURNER_EXEMPTION,
                    S.FURNACE_EXEMPTION,
                    S.SHORT_TERM_GEN_IND,
                    S.TRANSFER_FACILITY_IND,
                    S.COLLEGE_IND,
                    S.HOSPITAL_IND,
                    S.NON_PROFIT_IND,
                    S.WITHDRAWAL_IND,
                    S.TRANS_CODE,
                    S.NOTIFICATION_RSN_CODE,
                    S.EFFC_DATE,
                    S.FINANCIAL_ASSURANCE_IND,
                    S.RECYCLING_IND,
                    S.MAIL_STREET_NUMBER,
                    S.LOCATION_STREET_NUMBER,
                    S.NON_NOTIFIER_TEXT,
                    S.ACCESSIBILITY_TEXT,
                    S.STATE_DISTRICT_TEXT,
                    S.INTRNL_NOTES,
                    S.SHORT_TERM_INTRNL_NOTES,
                    S.NATURE_OF_BUSINESS_TEXT,
                    S.RECOGNIZED_TRADER_EXPORTER_IND,
                    S.RECOGNIZED_TRADER_IMPORTER_IND,
                    S.SLAB_EXPORTER_IND,
                    S.SLAB_IMPORTER_IND,
                    S.TSD_DATE,
                    S.UNIVERSAL_WASTE_DEST_FACILITY,
                    S.STATE_WASTE_GENERATOR_OWNER,
                    S.STATE_WASTE_GENERATOR,
                    S.FED_WASTE_GENERATOR_OWNER,
                    S.FED_WASTE_GENERATOR,
                    S.ACKNOWLEDGE_FLAG_IND,
                    S.INCLUDE_IN_NATIONAL_REPORT_IND,
                    S.LQHUW_IND,
                    S.HD_REPORT_CYCLE_YEAR,
                    S.HEALTHCARE_FAC,
                    S.REVERSE_DISTRIBUTOR,
                    S.SUBPART_P_WITHDRAWAL,
                    S.RECYCLER_IND,
                    S.CURRENT_RECORD,
                    S.CREATED_BY_USERID,
                    S.H_CREATED_DATE,
                    S.DATA_ORIG,
                    S.LOCATION_LATITUDE,
                    S.LOCATION_LONGITUDE,
                    S.LOCATION_GIS_PRIM,
                    S.LOCATION_GIS_ORIG,
                    S.LAST_UPDT_BY,
                    S.LAST_UPDT_DATE,
                    S.BR_EXEMPT_IND);
END;

    PROCEDURE HD_MERGE_OTHER_ID AS
BEGIN
MERGE INTO RCRA_HD_OTHER_ID D
    USING (SELECT *
           FROM ETL_HD_OTHER_ID_VW) S
    ON (D.HD_OTHER_ID_ID = S.WH_HD_OTHER_ID_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANSACTION_CODE   = S.TRANSACTION_CODE,
                D.RELATIONSHIP_OWNER = S.RELATIONSHIP_OWNER,
                D.RELATIONSHIP_TYPE  = S.RELATIONSHIP_TYPE,
                D.SAME_FACILITY      = S.SAME_FACILITY,
                D.NOTES              = S.NOTES
    WHERE DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
               OR DECODE(D.RELATIONSHIP_OWNER, S.RELATIONSHIP_OWNER, 0, 1) = 1
               OR DECODE(D.RELATIONSHIP_TYPE, S.RELATIONSHIP_TYPE, 0, 1) = 1
               OR DECODE(D.SAME_FACILITY, S.SAME_FACILITY, 0, 1) = 1
               OR DECODE(D.NOTES, S.NOTES, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (HD_OTHER_ID_ID,
                    HD_HBASIC_ID,
                    TRANSACTION_CODE,
                    OTHER_ID,
                    RELATIONSHIP_OWNER,
                    RELATIONSHIP_TYPE,
                    SAME_FACILITY,
                    NOTES)
            VALUES (SEQ_RCRA_HD_OTHER_ID.NEXTVAL,
                    S.WH_HD_HBASIC_ID,
                    S.TRANSACTION_CODE,
                    S.OTHER_ID,
                    S.RELATIONSHIP_OWNER,
                    S.RELATIONSHIP_TYPE,
                    S.SAME_FACILITY,
                    S.NOTES);
END;

    PROCEDURE HD_MERGE_LQG_CLOSURE AS
BEGIN
MERGE INTO RCRA_HD_LQG_CLOSURE D
    USING (SELECT *
           FROM ETL_HD_LQG_CLOSURE) S
    ON (D.HD_LQG_CLOSURE_ID = S.WH_HD_LQG_CLOSURE_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANSACTION_CODE      = S.TRANSACTION_CODE,
                D.CLOSURE_TYPE          = S.CLOSURE_TYPE,
                D.EXPECTED_CLOSURE_DATE = S.EXPECTED_CLOSURE_DATE,
                D.NEW_CLOSURE_DATE      = S.NEW_CLOSURE_DATE,
                D.DATE_CLOSED           = S.DATE_CLOSED,
                D.IN_COMPLIANCE_IND     = s.IN_COMPLIANCE_IND
    WHERE DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
               OR DECODE(D.CLOSURE_TYPE, S.CLOSURE_TYPE, 0, 1) = 1
               OR DECODE(D.EXPECTED_CLOSURE_DATE, S.EXPECTED_CLOSURE_DATE, 0, 1) = 1

               OR DECODE(D.NEW_CLOSURE_DATE, S.NEW_CLOSURE_DATE, 0, 1) = 1
               OR DECODE(D.DATE_CLOSED, S.DATE_CLOSED, 0, 1) = 1
               OR DECODE(D.IN_COMPLIANCE_IND, S.IN_COMPLIANCE_IND, 0, 1) = 1

        WHEN NOT MATCHED THEN
            INSERT (HD_LQG_CLOSURE_ID,
                    HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    CLOSURE_TYPE,
                    EXPECTED_CLOSURE_DATE,
                    NEW_CLOSURE_DATE,
                    DATE_CLOSED,
                    IN_COMPLIANCE_IND)
            VALUES (SEQ_RCRA_HD_LQG_CLOSURE.NEXTVAL,
                    S.WH_HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.CLOSURE_TYPE,
                    S.EXPECTED_CLOSURE_DATE,
                    S.NEW_CLOSURE_DATE,
                    S.DATE_CLOSED,
                    S.IN_COMPLIANCE_IND);
END;

    PROCEDURE HD_MERGE_LQG_CONSOLIDATION AS
BEGIN
MERGE INTO RCRA_HD_LQG_CONSOLIDATION D
    USING (SELECT *
           FROM ETL_HD_LQG_CONSOLIDATION_VW) S
    ON (D.HD_LQG_CONSOLIDATION_ID = S.WH_HD_LQG_CONSOLIDATION_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANSACTION_CODE       = S.TRANSACTION_CODE,
                D.SEQ_NUMBER             = S.SEQ_NUMBER,
                D.HANDLER_ID             = S.HANDLER_ID,
                D.HANDLER_NAME           = S.HANDLER_NAME,
                D.MAIL_STREET_NUMBER     = S.MAIL_STREET_NUMBER,
                D.MAIL_STREET1           = S.MAIL_STREET1,
                D.MAIL_STREET2           = S.MAIL_STREET2,
                D.MAIL_CITY              = S.MAIL_CITY,
                D.MAIL_STATE             = S.MAIL_STATE,
                D.MAIL_COUNTRY           = S.MAIL_COUNTRY,
                D.MAIL_ZIP               = S.MAIL_ZIP,
                D.CONTACT_TITLE          = S.CONTACT_TITLE,
                D.CONTACT_FIRST_NAME     = S.CONTACT_FIRST_NAME,
                D.CONTACT_MIDDLE_INITIAL = S.CONTACT_MIDDLE_INITIAL,
                D.CONTACT_LAST_NAME      = S.CONTACT_LAST_NAME,
                D.CONTACT_EMAIL_ADDRESS  = S.CONTACT_EMAIL_ADDRESS,
                D.CONTACT_PHONE          = S.CONTACT_PHONE,
                D.CONTACT_PHONE_EXT      = S.CONTACT_PHONE_EXT,
                D.CONTACT_FAX            = S.CONTACT_FAX
    WHERE DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
               OR DECODE(D.SEQ_NUMBER, S.SEQ_NUMBER, 0, 1) = 1
               OR DECODE(D.HANDLER_ID, S.HANDLER_ID, 0, 1) = 1
               OR DECODE(D.HANDLER_NAME, S.HANDLER_NAME, 0, 1) = 1
               OR DECODE(D.MAIL_STREET_NUMBER, S.MAIL_STREET_NUMBER, 0, 1) = 1
               OR DECODE(D.MAIL_STREET1, S.MAIL_STREET1, 0, 1) = 1
               OR DECODE(D.MAIL_STREET2, S.MAIL_STREET2, 0, 1) = 1
               OR DECODE(D.MAIL_CITY, S.MAIL_CITY, 0, 1) = 1
               OR DECODE(D.MAIL_STATE, S.MAIL_STATE, 0, 1) = 1
               OR DECODE(D.MAIL_ZIP, S.MAIL_ZIP, 0, 1) = 1
               OR DECODE(D.CONTACT_FIRST_NAME, S.CONTACT_FIRST_NAME, 0, 1) = 1
               OR DECODE(D.CONTACT_MIDDLE_INITIAL, S.CONTACT_MIDDLE_INITIAL, 0, 1) = 1
               OR DECODE(D.CONTACT_LAST_NAME, S.CONTACT_LAST_NAME, 0, 1) = 1
               OR DECODE(D.CONTACT_TITLE, S.CONTACT_TITLE, 0, 1) = 1
               OR DECODE(D.CONTACT_EMAIL_ADDRESS, S.CONTACT_EMAIL_ADDRESS, 0, 1) = 1
               OR DECODE(D.CONTACT_PHONE, S.CONTACT_PHONE, 0, 1) = 1
               OR DECODE(D.CONTACT_PHONE_EXT, S.CONTACT_PHONE_EXT, 0, 1) = 1
               OR DECODE(D.CONTACT_FAX, S.CONTACT_FAX, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (HD_LQG_CONSOLIDATION_ID,
                    HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    SEQ_NUMBER,
                    HANDLER_ID,
                    HANDLER_NAME,
                    MAIL_STREET_NUMBER,
                    MAIL_STREET1,
                    MAIL_STREET2,
                    MAIL_CITY,
                    MAIL_STATE,
                    MAIL_COUNTRY,
                    MAIL_ZIP,
                    CONTACT_FIRST_NAME,
                    CONTACT_MIDDLE_INITIAL,
                    CONTACT_LAST_NAME,
                    CONTACT_TITLE,
                    CONTACT_EMAIL_ADDRESS,
                    CONTACT_PHONE,
                    CONTACT_PHONE_EXT,
                    CONTACT_FAX)
            VALUES (SEQ_RCRA_HD_LQG_CONSOLIDATION.NEXTVAL,
                    S.WH_HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.SEQ_NUMBER,
                    S.HANDLER_ID,
                    S.HANDLER_NAME,
                    S.MAIL_STREET_NUMBER,
                    S.MAIL_STREET1,
                    S.MAIL_STREET2,
                    S.MAIL_CITY,
                    S.MAIL_STATE,
                    S.MAIL_COUNTRY,
                    S.MAIL_ZIP,
                    S.CONTACT_FIRST_NAME,
                    S.CONTACT_MIDDLE_INITIAL,
                    S.CONTACT_LAST_NAME,
                    S.CONTACT_TITLE,
                    S.CONTACT_EMAIL_ADDRESS,
                    S.CONTACT_PHONE,
                    S.CONTACT_PHONE_EXT,
                    S.CONTACT_FAX);
END;

    PROCEDURE HD_MERGE_EPISODIC_EVENT AS
BEGIN
MERGE INTO RCRA_HD_EPISODIC_EVENT D
    USING (SELECT *
           FROM ETL_HD_EPISODIC_EVENT) S
    ON (D.HD_EPISODIC_EVENT_ID = S.WH_HD_EPISODIC_EVENT_ID)
    WHEN MATCHED
        THEN
        UPDATE
            SET D.TRANSACTION_CODE       = S.TRANSACTION_CODE,
                D.EVENT_OWNER            = S.EVENT_OWNER,
                D.EVENT_TYPE             = S.EVENT_TYPE,
                D.CONTACT_FIRST_NAME     = S.CONTACT_FIRST_NAME,
                D.CONTACT_MIDDLE_INITIAL = S.CONTACT_MIDDLE_INITIAL,
                D.CONTACT_LAST_NAME      = S.CONTACT_LAST_NAME,
                D.CONTACT_ORG_NAME       = S.CONTACT_ORG_NAME,
                D.CONTACT_TITLE          = S.CONTACT_TITLE,
                D.CONTACT_EMAIL_ADDRESS  = S.CONTACT_EMAIL_ADDRESS,
                D.CONTACT_PHONE          = S.CONTACT_PHONE,
                D.CONTACT_PHONE_EXT      = S.CONTACT_PHONE_EXT,
                D.CONTACT_FAX            = S.CONTACT_FAX,
                D.START_DATE             = S.START_DATE,
                D.END_DATE               = S.END_DATE
    WHERE DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
               OR DECODE(D.EVENT_OWNER, S.EVENT_OWNER, 0, 1) = 1
               OR DECODE(D.EVENT_TYPE, S.EVENT_TYPE, 0, 1) = 1
               OR DECODE(D.CONTACT_FIRST_NAME, S.CONTACT_FIRST_NAME, 0, 1) = 1
               OR DECODE(D.CONTACT_MIDDLE_INITIAL, S.CONTACT_MIDDLE_INITIAL, 0, 1) = 1
               OR DECODE(D.CONTACT_LAST_NAME, S.CONTACT_LAST_NAME, 0, 1) = 1
               OR DECODE(D.CONTACT_ORG_NAME, S.CONTACT_ORG_NAME, 0, 1) = 1
               OR DECODE(D.CONTACT_TITLE, S.CONTACT_TITLE, 0, 1) = 1
               OR DECODE(D.CONTACT_EMAIL_ADDRESS, S.CONTACT_EMAIL_ADDRESS, 0, 1) = 1
               OR DECODE(D.CONTACT_PHONE, S.CONTACT_PHONE, 0, 1) = 1
               OR DECODE(D.CONTACT_PHONE_EXT, S.CONTACT_PHONE_EXT, 0, 1) = 1
               OR DECODE(D.CONTACT_FAX, S.CONTACT_FAX, 0, 1) = 1
               OR DECODE(D.START_DATE, S.START_DATE, 0, 1) = 1
               OR DECODE(D.END_DATE, S.END_DATE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (HD_EPISODIC_EVENT_ID,
                    HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    EVENT_OWNER,
                    EVENT_TYPE,
                    CONTACT_FIRST_NAME,
                    CONTACT_MIDDLE_INITIAL,
                    CONTACT_LAST_NAME,
                    CONTACT_ORG_NAME,
                    CONTACT_TITLE,
                    CONTACT_EMAIL_ADDRESS,
                    CONTACT_PHONE,
                    CONTACT_PHONE_EXT,
                    CONTACT_FAX,
                    START_DATE,
                    END_DATE)
            VALUES (SEQ_RCRA_HD_EPISODIC_EVENT.nextval,
                    S.WH_HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.EVENT_OWNER,
                    S.EVENT_TYPE,
                    S.CONTACT_FIRST_NAME,
                    S.CONTACT_MIDDLE_INITIAL,
                    S.CONTACT_LAST_NAME,
                    S.CONTACT_ORG_NAME,
                    S.CONTACT_TITLE,
                    S.CONTACT_EMAIL_ADDRESS,
                    S.CONTACT_PHONE,
                    S.CONTACT_PHONE_EXT,
                    S.CONTACT_FAX,
                    S.START_DATE,
                    S.END_DATE);
END;

    PROCEDURE HD_MERGE_EPISODIC_WASTE AS
BEGIN
MERGE INTO RCRA_HD_EPISODIC_WASTE D
    USING (SELECT *
           FROM ETL_HD_EPISODIC_WASTE) S
    ON (D.HD_EPISODIC_WASTE_ID = S.WH_HD_EPISODIC_WASTE_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANSACTION_CODE = S.TRANSACTION_CODE,
                D.SEQ_NUMBER       = S.SEQ_NUMBER,
                D.WASTE_DESC       = S.WASTE_DESC,
                D.EST_QNTY         = S.EST_QNTY
    WHERE DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
               OR DECODE(D.SEQ_NUMBER, S.SEQ_NUMBER, 0, 1) = 1
               OR DECODE(D.WASTE_DESC, S.WASTE_DESC, 0, 1) = 1
               OR DECODE(D.EST_QNTY, S.EST_QNTY, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (HD_EPISODIC_WASTE_ID,
                    HD_EPISODIC_EVENT_ID,
                    TRANSACTION_CODE,
                    SEQ_NUMBER,
                    WASTE_DESC,
                    EST_QNTY)
            VALUES (SEQ_RCRA_HD_EPISODIC_WASTE.nextval,
                    S.WH_HD_EPISODIC_EVENT_ID,
                    S.TRANSACTION_CODE,
                    S.SEQ_NUMBER,
                    S.WASTE_DESC,
                    S.EST_QNTY);
END;

    PROCEDURE HD_MERGE_EPISODIC_WASTE_CODE AS
BEGIN
MERGE INTO RCRA_HD_EPISODIC_WASTE_CODE D
    USING (SELECT *
           FROM ETL_HD_EPISODIC_WASTE_CODE) S
    ON (D.HD_EPISODIC_WASTE_CODE_ID = S.WH_HD_EPISODIC_WASTE_CODE_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANSACTION_CODE = S.TRANSACTION_CODE,
                D.WASTE_CODE_OWNER = S.WASTE_CODE_OWNER,
                D.WASTE_CODE       = S.WASTE_CODE,
                D.WASTE_CODE_TEXT  = S.WASTE_CODE_TEXT
    WHERE DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
               OR DECODE(D.WASTE_CODE_OWNER, S.WASTE_CODE_OWNER, 0, 1) = 1
               OR DECODE(D.WASTE_CODE, S.WASTE_CODE, 0, 1) = 1
               OR DECODE(D.WASTE_CODE_TEXT, S.WASTE_CODE_TEXT, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (HD_EPISODIC_WASTE_CODE_ID,
                    HD_EPISODIC_WASTE_ID,
                    TRANSACTION_CODE,
                    WASTE_CODE_OWNER,
                    WASTE_CODE,
                    WASTE_CODE_TEXT)
            VALUES (SEQ_RCRA_HD_EPISODIC_WASTE_CD.nextval,
                    S.WH_HD_EPISODIC_WASTE_ID,
                    S.TRANSACTION_CODE,
                    S.WASTE_CODE_OWNER,
                    S.WASTE_CODE,
                    S.WASTE_CODE_TEXT);
END;

    PROCEDURE HD_MERGE_SEC_WASTE_CODE AS
BEGIN
MERGE INTO RCRA_HD_SEC_WASTE_CODE D
    USING (SELECT *
           FROM ETL_HD_SEC_WASTE_CD_VW) S
    ON (D.HD_SEC_WASTE_CODE_ID = S.WH_HD_SEC_WASTE_CODE_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANSACTION_CODE = S.TRANSACTION_CODE,
                D.WASTE_CODE_OWNER = S.WASTE_CODE_OWNER,
                D.WASTE_CODE_TYPE  = S.WASTE_CODE_TYPE
    WHERE DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
               OR DECODE(D.WASTE_CODE_OWNER, S.WASTE_CODE_OWNER, 0, 1) = 1
               OR DECODE(D.WASTE_CODE_TYPE, S.WASTE_CODE_TYPE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (HD_SEC_WASTE_CODE_ID,
                    HD_SEC_MATERIAL_ACTIVITY_ID,
                    TRANSACTION_CODE,
                    WASTE_CODE_OWNER,
                    WASTE_CODE_TYPE)
            VALUES (SEQ_RCRA_HD_SEC_WASTE_CODE.NEXTVAL,
                    S.WH_HD_SEC_MATERIAL_ACTIVITY_ID,
                    S.TRANSACTION_CODE,
                    S.WASTE_CODE_OWNER,
                    S.WASTE_CODE_TYPE);
END;

    PROCEDURE HD_MERGE_SEC_MATERIAL_ACTIVITY AS
BEGIN
MERGE INTO RCRA_HD_SEC_MATERIAL_ACTIVITY D
    USING (SELECT *
           FROM ETL_HD_SEC_MAT_ACT_VW) S
    ON (D.HD_SEC_MATERIAL_ACTIVITY_ID = S.WH_HD_SEC_MATERIAL_ACTIVITY_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANS_CODE                = S.TRANS_CODE,
                D.HSM_SEQ_NUM               = S.HSM_SEQ_NUM,
                D.FAC_CODE_OWNER_NAME       = S.FAC_CODE_OWNER_NAME,
                D.FAC_TYPE_CODE             = S.FAC_TYPE_CODE,
                D.ESTIMATED_SHORT_TONS_QNTY = S.ESTIMATED_SHORT_TONS_QNTY,
                D.ACTL_SHORT_TONS_QNTY      = S.ACTL_SHORT_TONS_QNTY,
                D.LAND_BASED_UNIT_IND       = S.LAND_BASED_UNIT_IND,
                D.LAND_BASED_UNIT_IND_TEXT  = S.LAND_BASED_UNIT_IND_TEXT
    WHERE DECODE(D.TRANS_CODE, S.TRANS_CODE, 0, 1) = 1
               OR DECODE(D.HSM_SEQ_NUM, S.HSM_SEQ_NUM, 0, 1) = 1
               OR DECODE(D.FAC_CODE_OWNER_NAME, S.FAC_CODE_OWNER_NAME, 0, 1) = 1
               OR DECODE(D.FAC_TYPE_CODE, S.FAC_TYPE_CODE, 0, 1) = 1
               OR DECODE(D.ESTIMATED_SHORT_TONS_QNTY, S.ESTIMATED_SHORT_TONS_QNTY, 0, 1) = 1
               OR DECODE(D.ACTL_SHORT_TONS_QNTY, S.ACTL_SHORT_TONS_QNTY, 0, 1) = 1
               OR DECODE(D.LAND_BASED_UNIT_IND, S.LAND_BASED_UNIT_IND, 0, 1) = 1
               OR DECODE(D.LAND_BASED_UNIT_IND_TEXT, S.LAND_BASED_UNIT_IND_TEXT, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (HD_SEC_MATERIAL_ACTIVITY_ID,
                    HD_HANDLER_ID,
                    TRANS_CODE,
                    HSM_SEQ_NUM,
                    FAC_CODE_OWNER_NAME,
                    FAC_TYPE_CODE,
                    ESTIMATED_SHORT_TONS_QNTY,
                    ACTL_SHORT_TONS_QNTY,
                    LAND_BASED_UNIT_IND,
                    LAND_BASED_UNIT_IND_TEXT)
            VALUES (SEQ_RCRA_HD_SEC_MATERIAL_ACT.NEXTVAL,
                    S.WH_HD_HANDLER_ID,
                    S.TRANS_CODE,
                    S.HSM_SEQ_NUM,
                    S.FAC_CODE_OWNER_NAME,
                    S.FAC_TYPE_CODE,
                    S.ESTIMATED_SHORT_TONS_QNTY,
                    S.ACTL_SHORT_TONS_QNTY,
                    S.LAND_BASED_UNIT_IND,
                    S.LAND_BASED_UNIT_IND_TEXT);
END;

    PROCEDURE HD_MERGE_OWNEROP AS
BEGIN
MERGE INTO RCRA_HD_OWNEROP D
    USING (SELECT *
           FROM ETL_HD_OWNEROP_VW) S
    ON (D.HD_OWNEROP_ID = S.WH_HD_OWNEROP_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANSACTION_CODE    = S.TRANSACTION_CODE,
                D.OWNER_OP_IND        = S.OWNER_OP_IND,
                D.OWNER_OP_TYPE       = S.OWNER_OP_TYPE,
                D.DATE_BECAME_CURRENT = S.DATE_BECAME_CURRENT,
                D.DATE_ENDED_CURRENT  = S.DATE_ENDED_CURRENT,
                D.NOTES               = S.NOTES,
                D.FIRST_NAME          = S.FIRST_NAME,
                D.MIDDLE_INITIAL      = S.MIDDLE_INITIAL,
                D.LAST_NAME           = S.LAST_NAME,
                D.ORG_NAME            = S.ORG_NAME,
                D.TITLE               = S.TITLE,
                D.EMAIL_ADDRESS       = S.EMAIL_ADDRESS,
                D.PHONE               = S.PHONE,
                D.PHONE_EXT           = S.PHONE_EXT,
                D.FAX                 = S.FAX,
                D.MAIL_ADDR_NUM_TXT   = S.MAIL_ADDR_NUM_TXT,
                D.STREET1             = S.STREET1,
                D.STREET2             = S.STREET2,
                D.CITY                = S.CITY,
                D.STATE               = S.STATE,
                D.COUNTRY             = S.COUNTRY,
                D.ZIP                 = S.ZIP
    WHERE DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
               OR DECODE(D.OWNER_OP_SEQ, S.OWNER_OP_SEQ, 0, 1) = 1
               OR DECODE(D.OWNER_OP_IND, S.OWNER_OP_IND, 0, 1) = 1
               OR DECODE(D.OWNER_OP_TYPE, S.OWNER_OP_TYPE, 0, 1) = 1
               OR DECODE(D.DATE_BECAME_CURRENT, S.DATE_BECAME_CURRENT, 0, 1) = 1
               OR DECODE(D.DATE_ENDED_CURRENT, S.DATE_ENDED_CURRENT, 0, 1) = 1
               OR DECODE(D.NOTES, S.NOTES, 0, 1) = 1
               OR DECODE(D.FIRST_NAME, S.FIRST_NAME, 0, 1) = 1
               OR DECODE(D.MIDDLE_INITIAL, S.MIDDLE_INITIAL, 0, 1) = 1
               OR DECODE(D.LAST_NAME, S.LAST_NAME, 0, 1) = 1
               OR DECODE(D.ORG_NAME, S.ORG_NAME, 0, 1) = 1
               OR DECODE(D.TITLE, S.TITLE, 0, 1) = 1
               OR DECODE(D.EMAIL_ADDRESS, S.EMAIL_ADDRESS, 0, 1) = 1
               OR DECODE(D.PHONE, S.PHONE, 0, 1) = 1
               OR DECODE(D.PHONE_EXT, S.PHONE_EXT, 0, 1) = 1
               OR DECODE(D.FAX, S.FAX, 0, 1) = 1
               OR DECODE(D.MAIL_ADDR_NUM_TXT, S.MAIL_ADDR_NUM_TXT, 0, 1) = 1
               OR DECODE(D.STREET1, S.STREET1, 0, 1) = 1
               OR DECODE(D.STREET2, S.STREET2, 0, 1) = 1
               OR DECODE(D.CITY, S.CITY, 0, 1) = 1
               OR DECODE(D.STATE, S.STATE, 0, 1) = 1
               OR DECODE(D.COUNTRY, S.COUNTRY, 0, 1) = 1
               OR DECODE(D.ZIP, S.ZIP, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (HD_OWNEROP_ID,
                    HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    OWNER_OP_SEQ,
                    OWNER_OP_IND,
                    OWNER_OP_TYPE,
                    DATE_BECAME_CURRENT,
                    DATE_ENDED_CURRENT,
                    NOTES,
                    FIRST_NAME,
                    MIDDLE_INITIAL,
                    LAST_NAME,
                    ORG_NAME,
                    TITLE,
                    EMAIL_ADDRESS,
                    PHONE,
                    PHONE_EXT,
                    FAX,
                    MAIL_ADDR_NUM_TXT,
                    STREET1,
                    STREET2,
                    CITY,
                    STATE,
                    COUNTRY,
                    ZIP)
            VALUES (SEQ_RCRA_HD_OWNEROP.NEXTVAL,
                    S.WH_HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.OWNER_OP_SEQ,
                    S.OWNER_OP_IND,
                    S.OWNER_OP_TYPE,
                    S.DATE_BECAME_CURRENT,
                    S.DATE_ENDED_CURRENT,
                    S.NOTES,
                    S.FIRST_NAME,
                    S.MIDDLE_INITIAL,
                    S.LAST_NAME,
                    S.ORG_NAME,
                    S.TITLE,
                    S.EMAIL_ADDRESS,
                    S.PHONE,
                    S.PHONE_EXT,
                    S.FAX,
                    S.MAIL_ADDR_NUM_TXT,
                    S.STREET1,
                    S.STREET2,
                    S.CITY,
                    S.STATE,
                    S.COUNTRY,
                    S.ZIP);
END;

    PROCEDURE HD_MERGE_STATE_ACTIVITY AS
BEGIN
MERGE INTO RCRA_HD_STATE_ACTIVITY D
    USING (SELECT *
           FROM ETL_HD_STATE_ACT_VW) S
    ON (D.HD_STATE_ACTIVITY_ID = S.WH_HD_STATE_ACTIVITY_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANSACTION_CODE     = S.TRANSACTION_CODE,
                D.STATE_ACTIVITY_OWNER = S.STATE_ACTIVITY_OWNER,
                D.STATE_ACTIVITY_TYPE  = S.STATE_ACTIVITY_TYPE
    WHERE DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
               OR DECODE(D.STATE_ACTIVITY_OWNER, S.STATE_ACTIVITY_OWNER, 0, 1) = 1
               OR DECODE(D.STATE_ACTIVITY_TYPE, S.STATE_ACTIVITY_TYPE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (HD_STATE_ACTIVITY_ID,
                    HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    STATE_ACTIVITY_OWNER,
                    STATE_ACTIVITY_TYPE)
            VALUES (SEQ_RCRA_HD_STATE_ACTIVITY.NEXTVAL,
                    S.WH_HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.STATE_ACTIVITY_OWNER,
                    S.STATE_ACTIVITY_TYPE);
END;

    PROCEDURE HD_MERGE_UNIVERSAL_WASTE AS
BEGIN
MERGE INTO RCRA_HD_UNIVERSAL_WASTE D
    USING (SELECT *
           FROM ETL_HD_UNIV_WASTE_VW) S
    ON (D.HD_UNIVERSAL_WASTE_ID = S.WH_HD_UNIVERSAL_WASTE_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANSACTION_CODE      = S.TRANSACTION_CODE,
                D.UNIVERSAL_WASTE_OWNER = S.UNIVERSAL_WASTE_OWNER,
                D.UNIVERSAL_WASTE_TYPE  = S.UNIVERSAL_WASTE_TYPE,
                D.ACCUMULATED           = S.ACCUMULATED,
                D.GENERATED             = S.GENERATED
    WHERE DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
               OR DECODE(D.UNIVERSAL_WASTE_OWNER, S.UNIVERSAL_WASTE_OWNER, 0, 1) = 1
               OR DECODE(D.UNIVERSAL_WASTE_TYPE, S.UNIVERSAL_WASTE_TYPE, 0, 1) = 1
               OR DECODE(D.ACCUMULATED, S.ACCUMULATED, 0, 1) = 1
               OR DECODE(D.GENERATED, S.GENERATED, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (HD_UNIVERSAL_WASTE_ID,
                    HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    UNIVERSAL_WASTE_OWNER,
                    UNIVERSAL_WASTE_TYPE,
                    ACCUMULATED,
                    GENERATED)
            VALUES (SEQ_RCRA_HD_UNIVERSAL_WASTE.NEXTVAL,
                    S.WH_HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.UNIVERSAL_WASTE_OWNER,
                    S.UNIVERSAL_WASTE_TYPE,
                    S.ACCUMULATED,
                    S.GENERATED);
END;

    PROCEDURE HD_MERGE_WASTE_CODE AS
BEGIN
MERGE INTO RCRA_HD_WASTE_CODE D
    USING (SELECT *
           FROM ETL_HD_WASTE_CODE_VW) S
    ON (D.HD_WASTE_CODE_ID = S.WH_HD_WASTE_CODE_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANSACTION_CODE = S.TRANSACTION_CODE,
                D.WASTE_CODE_OWNER = S.WASTE_CODE_OWNER,
                D.WASTE_CODE_TYPE  = S.WASTE_CODE_TYPE
    WHERE DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
               OR DECODE(D.WASTE_CODE_OWNER, S.WASTE_CODE_OWNER, 0, 1) = 1
               OR DECODE(D.WASTE_CODE_TYPE, S.WASTE_CODE_TYPE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (HD_WASTE_CODE_ID,
                    HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    WASTE_CODE_TYPE,
                    WASTE_CODE_OWNER)
            VALUES (SEQ_RCRA_HD_WASTE_CODE.NEXTVAL,
                    S.WH_HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.WASTE_CODE_TYPE,
                    S.WASTE_CODE_OWNER);
END;

    PROCEDURE HD_MERGE_ENV_PERMIT AS
BEGIN
MERGE INTO RCRA_HD_ENV_PERMIT D
    USING (SELECT *
           FROM ETL_HD_ENV_PERMIT_VW) S
    ON (D.HD_ENV_PERMIT_ID = S.WH_HD_ENV_PERMIT_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANSACTION_CODE  = S.TRANSACTION_CODE,
                D.ENV_PERMIT_NUMBER = S.ENV_PERMIT_NUMBER,
                D.ENV_PERMIT_OWNER  = S.ENV_PERMIT_OWNER,
                D.ENV_PERMIT_TYPE   = S.ENV_PERMIT_TYPE,
                D.ENV_PERMIT_DESC   = S.ENV_PERMIT_DESC
    WHERE DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
               OR DECODE(D.ENV_PERMIT_NUMBER, S.ENV_PERMIT_NUMBER, 0, 1) = 1
               OR DECODE(D.ENV_PERMIT_OWNER, S.ENV_PERMIT_OWNER, 0, 1) = 1
               OR DECODE(D.ENV_PERMIT_TYPE, S.ENV_PERMIT_TYPE, 0, 1) = 1
               OR DECODE(D.ENV_PERMIT_DESC, S.ENV_PERMIT_DESC, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (HD_ENV_PERMIT_ID,
                    HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    ENV_PERMIT_NUMBER,
                    ENV_PERMIT_OWNER,
                    ENV_PERMIT_TYPE,
                    ENV_PERMIT_DESC)
            VALUES (SEQ_RCRA_HD_ENV_PERMIT.NEXTVAL,
                    S.WH_HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.ENV_PERMIT_NUMBER,
                    S.ENV_PERMIT_OWNER,
                    S.ENV_PERMIT_TYPE,
                    S.ENV_PERMIT_DESC);
END;

    PROCEDURE HD_MERGE_CERTIFICATION AS
BEGIN
MERGE INTO RCRA_HD_CERTIFICATION D
    USING (SELECT *
           FROM ETL_HD_CERT_VW) S
    ON (D.HD_CERTIFICATION_ID = S.WH_HD_CERTIFICATION_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANSACTION_CODE    = S.TRANSACTION_CODE,
                D.CERT_SIGNED_DATE    = S.CERT_SIGNED_DATE,
                D.CERT_TITLE          = S.CERT_TITLE,
                D.CERT_FIRST_NAME     = S.CERT_FIRST_NAME,
                D.CERT_MIDDLE_INITIAL = S.CERT_MIDDLE_INITIAL,
                D.CERT_LAST_NAME      = S.CERT_LAST_NAME,
                D.CERT_EMAIL_TEXT     = S.CERT_EMAIL_TEXT
    WHERE DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
               OR DECODE(D.CERT_SIGNED_DATE, S.CERT_SIGNED_DATE, 0, 1) = 1
               OR DECODE(D.CERT_TITLE, S.CERT_TITLE, 0, 1) = 1
               OR DECODE(D.CERT_FIRST_NAME, S.CERT_FIRST_NAME, 0, 1) = 1
               OR DECODE(D.CERT_MIDDLE_INITIAL, S.CERT_MIDDLE_INITIAL, 0, 1) = 1
               OR DECODE(D.CERT_LAST_NAME, S.CERT_LAST_NAME, 0, 1) = 1
               OR DECODE(D.CERT_EMAIL_TEXT, S.CERT_EMAIL_TEXT, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (HD_CERTIFICATION_ID,
                    CERT_SEQ,
                    HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    CERT_SIGNED_DATE,
                    CERT_TITLE,
                    CERT_FIRST_NAME,
                    CERT_MIDDLE_INITIAL,
                    CERT_LAST_NAME,
                    CERT_EMAIL_TEXT)
            VALUES (SEQ_RCRA_HD_CERTIFICATION.NEXTVAL,
                    S.CERT_SEQ,
                    S.WH_HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.CERT_SIGNED_DATE,
                    S.CERT_TITLE,
                    S.CERT_FIRST_NAME,
                    S.CERT_MIDDLE_INITIAL,
                    S.CERT_LAST_NAME,
                    S.CERT_EMAIL_TEXT);
END;

    PROCEDURE HD_MERGE_NAICS AS
BEGIN
MERGE INTO RCRA_HD_NAICS D
    USING (SELECT *
           FROM ETL_HD_NAICS_VW) S
    ON (D.HD_NAICS_ID = S.WH_HD_NAICS_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANSACTION_CODE = S.TRANSACTION_CODE,
                D.NAICS_OWNER      = S.NAICS_OWNER,
                D.NAICS_CODE       = S.NAICS_CODE
    WHERE DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
               OR DECODE(D.NAICS_OWNER, S.NAICS_OWNER, 0, 1) = 1
               OR DECODE(D.NAICS_CODE, S.NAICS_CODE, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (HD_NAICS_ID,
                    HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    NAICS_SEQ,
                    NAICS_OWNER,
                    NAICS_CODE)
            VALUES (SEQ_RCRA_HD_NAICS.NEXTVAL,
                    S.WH_HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.NAICS_SEQ,
                    S.NAICS_OWNER,
                    S.NAICS_CODE);
END;

    PROCEDURE HD_MERGE_EPISODIC_PRJT AS
BEGIN
MERGE INTO RCRA_HD_EPISODIC_PRJT D
    USING (SELECT *
           FROM ETL_HD_EPISODIC_PRJT) S
    ON (D.HD_EPISODIC_PRJT_ID = S.WH_HD_EPISODIC_PRJT_ID)
    WHEN MATCHED THEN
        UPDATE
            SET D.TRANSACTION_CODE = S.TRANSACTION_CODE,
                D.PRJT_CODE_OWNER  = S.PRJT_CODE_OWNER,
                D.PRJT_CODE        = S.PRJT_CODE,
                D.OTHER_PRJT_DESC  = S.OTHER_PRJT_DESC
    WHERE DECODE(D.TRANSACTION_CODE, S.TRANSACTION_CODE, 0, 1) = 1
               OR DECODE(D.PRJT_CODE_OWNER, S.PRJT_CODE_OWNER, 0, 1) = 1
               OR DECODE(D.PRJT_CODE, S.PRJT_CODE, 0, 1) = 1
               OR DECODE(D.OTHER_PRJT_DESC, S.OTHER_PRJT_DESC, 0, 1) = 1
        WHEN NOT MATCHED THEN
            INSERT (HD_EPISODIC_PRJT_ID,
                    HD_EPISODIC_EVENT_ID,
                    TRANSACTION_CODE,
                    PRJT_CODE_OWNER,
                    PRJT_CODE,
                    OTHER_PRJT_DESC)
            VALUES (SEQ_RCRA_HD_EPISODIC_PRJT.NEXTVAL,
                    S.WH_HD_EPISODIC_EVENT_ID,
                    S.TRANSACTION_CODE,
                    S.PRJT_CODE_OWNER,
                    S.PRJT_CODE,
                    S.OTHER_PRJT_DESC);
END;

    PROCEDURE HD_MERGE_DATA AS
BEGIN
        HD_LOG_HANDLERS;
        HD_MERGE_HBASIC;
        HD_MERGE_HANDLER;
        HD_MERGE_NAICS;
        HD_MERGE_CERTIFICATION;
        HD_MERGE_ENV_PERMIT;
        HD_MERGE_WASTE_CODE;
        HD_MERGE_UNIVERSAL_WASTE;
        HD_MERGE_STATE_ACTIVITY;
        HD_MERGE_OWNEROP;
        HD_MERGE_SEC_MATERIAL_ACTIVITY;
        HD_MERGE_SEC_WASTE_CODE;
        HD_MERGE_OTHER_ID;
        HD_MERGE_LQG_CLOSURE;
        HD_MERGE_LQG_CONSOLIDATION;
        HD_MERGE_EPISODIC_EVENT;
        HD_MERGE_EPISODIC_WASTE;
        HD_MERGE_EPISODIC_WASTE_CODE;
        HD_MERGE_EPISODIC_WASTE_CODE;
        HD_MERGE_EPISODIC_PRJT;
END;

    PROCEDURE PRM_MERGE_DATA AS
BEGIN
        PRM_LOG_HANDLERS;
        PRM_MERGE_FAC_SUBM;
        PRM_MERGE_SERIES;
        PRM_MERGE_UNIT;
        PRM_MERGE_UNIT_DETAIL;
        PRM_MERGE_WASTE_CODE;
        PRM_MERGE_EVENT;
        PRM_MERGE_EVENT_COMMITMENT;
        PRM_MERGE_RELATED_EVENT;
        PRM_MERGE_MOD_EVENT;
END;

    PROCEDURE FA_MERGE_DATA AS
BEGIN
        FA_LOG_HANDLERS;
        FA_MERGE_FAC_SUBM;
        FA_MERGE_MECHANISM;
        FA_MERGE_MECHANISM_DETAIL;
        FA_MERGE_COST_EST;
        FA_MERGE_COST_EST_REL_MECH;
END;

    PROCEDURE CA_MERGE_DATA AS
BEGIN
        CA_LOG_HANDLERS;
        CA_MERGE_FAC_SUBM;
        CA_MERGE_EVENT;
        CA_MERGE_EVENT_COMMITMENT;
        CA_MERGE_AREA;
        CA_MERGE_AREA_REL_EVENT;
        CA_MERGE_REL_PERMIT_UNIT;
        CA_MERGE_AUTHORITY;
        CA_MERGE_AUTH_REL_EVENT;
        CA_MERGE_STATUTORY_CITATION;
END;

    PROCEDURE CME_DELETE_DATA AS
BEGIN
        CME_DELETE_VIOL;
        CME_DELETE_ENFRC_ACT;
        CME_DELETE_EVAL;
END;

    PROCEDURE CME_MERGE_DATA AS
BEGIN
        CME_LOG_HANDLERS;
        CME_MERGE_FAC_SUBM;
        CME_MERGE_VIOL;
        CME_MERGE_CITATION;
        CME_MERGE_EVAL;
        CME_MERGE_EVAL_COMMIT;
        CME_MERGE_EVAL_VIOL;
        CME_MERGE_RQST;
        CME_MERGE_ENFRC_ACT;
        CME_MERGE_CSNY_DATE;
        CME_MERGE_MEDIA;
        CME_MERGE_MILESTONE;
        CME_MERGE_SUPP_ENVR_PRJT;
        CME_MERGE_VIOL_ENFRC;
        CME_MERGE_PNLTY;
        CME_MERGE_PYMT;
END;

    PROCEDURE GIS_MERGE_DATA AS
BEGIN
        GIS_LOG_HANDLERS;
        GIS_MERGE_FAC_SUBM;
        GIS_MERGE_RCRA_GIS_GEO_INFO;
END;

    PROCEDURE CH_MERGE_DATA AS
BEGIN
        CH_LOG_HANDLER;
        CH_MERGE_REPORT_UNIV;
END;

    PROCEDURE EM_MERGE_DATA AS
BEGIN
        EM_LOG_HANDLER;
        EM_MERGE_EMANIFEST;
        EM_MERGE_EMANIFEST_COMMENT;
        EM_MERGE_HANDLER;
        EM_MERGE_WASTE;
        EM_MERGE_TR_NUM_ORIG;
        EM_MERGE_TR_NUM_REJ;
        EM_MERGE_TR_NUM_RESIDUE_NEW;
        EM_MERGE_TR_NUM_WASTE;
        EM_MERGE_WASTE_CD_FED;
        EM_MERGE_WASTE_CD_GEN;
        EM_MERGE_WASTE_CD_TRANS;
        EM_MERGE_WASTE_CD_TSDF;
        EM_MERGE_WASTE_COMMENT;
        EM_MERGE_WASTE_PCB;
END;

    PROCEDURE MERGE_DATA(TRANS_TYPE varchar) AS
BEGIN
CASE TRANS_TYPE
            WHEN 'CA'
                THEN CA_MERGE_DATA;
WHEN 'CE'
                THEN CME_MERGE_DATA;
WHEN 'FA'
                THEN FA_MERGE_DATA;
WHEN 'GS'
                THEN GIS_MERGE_DATA;
WHEN 'HD'
                THEN HD_MERGE_DATA;
WHEN 'PM'
                THEN PRM_MERGE_DATA;
WHEN 'CH'
                THEN CH_MERGE_DATA;
WHEN 'EM'
                THEN EM_MERGE_DATA;
WHEN 'CD'
                THEN CME_DELETE_DATA;
ELSE DBMS_OUTPUT.PUT_LINE('No handler for transaction type: ' || TRANS_TYPE);
END CASE;
END;

END RCRAINFO_ETL;
/
