
/* 
 * source: 00-reporting_db-synonyms.sql 
 */
CREATE SYNONYM NODE_RCRA_HD_EPISODIC_PRJT FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_EPISODIC_PRJT]
GO

/* 
 * source: 01-reporting_db-tables.sql 
 */
---$ Alter table dbo.RCRA_HD_EPISODIC_EVENT

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_HD_EPISODIC_EVENT')
            AND NAME = 'EVENT_OTHER_DESC')
    BEGIN
        ALTER TABLE dbo.RCRA_HD_EPISODIC_EVENT
            DROP COLUMN EVENT_OTHER_DESC
    END
GO

---$ Alter table dbo.RCRA_HD_HANDLER
IF NOT EXISTS(SELECT *
              FROM SYS.COLUMNS
              WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_HD_HANDLER')
                AND NAME = 'LOCATION_LATITUDE')
    BEGIN
        ALTER TABLE dbo.RCRA_HD_HANDLER
            ADD LOCATION_LATITUDE DECIMAL(19, 14) NULL
    END
GO

IF NOT EXISTS(SELECT *
              FROM SYS.COLUMNS
              WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_HD_HANDLER')
                AND NAME = 'LOCATION_LONGITUDE')
    BEGIN
        ALTER TABLE dbo.RCRA_HD_HANDLER
            ADD LOCATION_LONGITUDE DECIMAL(19, 14) NULL
    END
GO

IF NOT EXISTS(SELECT *
              FROM SYS.COLUMNS
              WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_HD_HANDLER')
                AND NAME = 'LOCATION_GIS_PRIM')
    BEGIN
        ALTER TABLE dbo.RCRA_HD_HANDLER
            ADD LOCATION_GIS_PRIM CHAR(1) NULL
    END
GO

IF NOT EXISTS(SELECT *
              FROM SYS.COLUMNS
              WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_HD_HANDLER')
                AND NAME = 'LOCATION_GIS_ORIG')
    BEGIN
        ALTER TABLE dbo.RCRA_HD_HANDLER
            ADD LOCATION_GIS_ORIG CHAR(2) NULL
    END
GO

---$ Alter table dbo.RCRA_RU_REPORT_UNIV
IF NOT EXISTS(SELECT *
              FROM SYS.COLUMNS
              WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_RU_REPORT_UNIV')
                AND NAME = 'LOCATION_LATITUDE')
    BEGIN
        ALTER TABLE dbo.RCRA_RU_REPORT_UNIV
            ADD LOCATION_LATITUDE DECIMAL(19, 14) NULL
    END
GO

IF NOT EXISTS(SELECT *
              FROM SYS.COLUMNS
              WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_RU_REPORT_UNIV')
                AND NAME = 'LOCATION_LONGITUDE')
    BEGIN
        ALTER TABLE dbo.RCRA_RU_REPORT_UNIV
            ADD LOCATION_LONGITUDE DECIMAL(19, 14) NULL
    END
GO

IF NOT EXISTS(SELECT *
              FROM SYS.COLUMNS
              WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_RU_REPORT_UNIV')
                AND NAME = 'LOCATION_GIS_PRIM')
    BEGIN
        ALTER TABLE dbo.RCRA_RU_REPORT_UNIV
            ADD LOCATION_GIS_PRIM CHAR(1) NULL
    END
GO

IF NOT EXISTS(SELECT *
              FROM SYS.COLUMNS
              WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_RU_REPORT_UNIV')
                AND NAME = 'LOCATION_GIS_ORIG')
    BEGIN
        ALTER TABLE dbo.RCRA_RU_REPORT_UNIV
            ADD LOCATION_GIS_ORIG CHAR(2) NULL
    END
GO

---$ Create table dbo.RCRA_HD_EPISODIC_PRJT
IF OBJECT_ID(N'dbo.RCRA_HD_EPISODIC_PRJT') IS NULL
    BEGIN
        CREATE TABLE dbo.RCRA_HD_EPISODIC_PRJT
        (
            HD_EPISODIC_PRJT_ID  INT IDENTITY,
            HD_EPISODIC_EVENT_ID INT,
            TRANSACTION_CODE     CHAR(1)      NULL,
            PRJT_CODE_OWNER      CHAR(2)      NOT NULL,
            PRJT_CODE            CHAR(3)      NOT NULL,
            OTHER_PRJT_DESC      VARCHAR(255) NULL
        )
    END
GO

---$ Create Index/PK: IX_HD_EPIS_PRJT_HD_EPIS_EVE_ID, Table : dbo.RCRA_HD_EPISODIC_PRJT
IF NOT EXISTS(SELECT *
              FROM SYS.INDEXES
              WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_HD_EPISODIC_PRJT')
                AND NAME = 'IX_HD_EPIS_PRJT_HD_EPIS_EVE_ID')
CREATE NONCLUSTERED INDEX IX_HD_EPIS_PRJT_HD_EPIS_EVE_ID
    ON dbo.RCRA_HD_EPISODIC_PRJT (HD_EPISODIC_EVENT_ID)
    WITH (IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, DATA_COMPRESSION = NONE)
GO

---$ Create Index/PK: PK_HD_EPISODIC_PRJT, Table : dbo.RCRA_HD_EPISODIC_PRJT
IF OBJECT_ID(N'dbo.PK_HD_EPISODIC_PRJT') IS NULL
ALTER TABLE dbo.RCRA_HD_EPISODIC_PRJT
    ADD CONSTRAINT PK_HD_EPISODIC_PRJT PRIMARY KEY CLUSTERED (HD_EPISODIC_PRJT_ID)
GO

---$ Create FK : FK_HD_EPISO_PRJT_HD_EPISO_EVEN
IF OBJECT_ID(N'dbo.FK_HD_EPISO_PRJT_HD_EPISO_EVEN') IS NULL
    BEGIN
        ALTER TABLE dbo.RCRA_HD_EPISODIC_PRJT
            ADD CONSTRAINT FK_HD_EPISO_PRJT_HD_EPISO_EVEN
                FOREIGN KEY (HD_EPISODIC_EVENT_ID)
                    REFERENCES dbo.RCRA_HD_EPISODIC_EVENT (HD_EPISODIC_EVENT_ID)
                    ON DELETE CASCADE
                    ON UPDATE NO ACTION
    END
GO

-- rename columns to match the names in the .net plugin

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CA_AREA')
            AND NAME = 'CREATED_BY_USER_ID')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_CA_AREA.CREATED_BY_USER_ID', 'CREATED_BY_USERID', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CA_AUTHORITY')
            AND NAME = 'CREATED_BY_USER_ID')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_CA_AUTHORITY.CREATED_BY_USER_ID', 'CREATED_BY_USERID', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CA_EVENT')
            AND NAME = 'CREATED_BY_USER_ID')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_CA_EVENT.CREATED_BY_USER_ID', 'CREATED_BY_USERID', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_FA_COST_EST')
            AND NAME = 'CREATED_BY_USER_ID')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_FA_COST_EST.CREATED_BY_USER_ID', 'CREATED_BY_USERID', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CME_ENFRC_ACT')
            AND NAME = 'CREATED_BY_USER_ID')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_CME_ENFRC_ACT.CREATED_BY_USER_ID', 'CREATED_BY_USERID', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CME_EVAL')
            AND NAME = 'CREATED_BY_USER_ID')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_CME_EVAL.CREATED_BY_USER_ID', 'CREATED_BY_USERID', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_GIS_GEO_INFORMATION')
            AND NAME = 'CREATED_BY_USER_ID')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_GIS_GEO_INFORMATION.CREATED_BY_USER_ID', 'CREATED_BY_USERID', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_HD_HANDLER')
            AND NAME = 'CURR_REC')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_HD_HANDLER.CURR_REC', 'CURRENT_RECORD', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_HD_HANDLER')
            AND NAME = 'CREATED_BY_USER_ID')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_HD_HANDLER.CREATED_BY_USER_ID', 'CREATED_BY_USERID', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_FA_MECHANISM_DETAIL')
            AND NAME = 'CURR_MECH_DET_IND')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_FA_MECHANISM_DETAIL.CURR_MECH_DET_IND', 'CURRENT_MECHANISM_DETAIL_IND', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_FA_MECHANISM_DETAIL')
            AND NAME = 'CREATED_BY_USER_ID')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_FA_MECHANISM_DETAIL.CREATED_BY_USER_ID', 'CREATED_BY_USERID', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_FA_MECHANISM')
            AND NAME = 'CREATED_BY_USER_ID')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_FA_MECHANISM.CREATED_BY_USER_ID', 'CREATED_BY_USERID', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_CME_VIOL')
            AND NAME = 'CREATED_BY_USER_ID')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_CME_VIOL.CREATED_BY_USER_ID', 'CREATED_BY_USERID', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_PRM_SERIES')
            AND NAME = 'CREATED_BY_USER_ID')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_PRM_SERIES.CREATED_BY_USER_ID', 'CREATED_BY_USERID', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_PRM_EVENT')
            AND NAME = 'CREATED_BY_USER_ID')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_PRM_EVENT.CREATED_BY_USER_ID', 'CREATED_BY_USERID', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_PRM_MOD_EVENT')
            AND NAME = 'CREATED_BY_USER_ID')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_PRM_MOD_EVENT.CREATED_BY_USER_ID', 'CREATED_BY_USERID', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_PRM_MOD_EVENT')
            AND NAME = 'MOD_EVENT_DATA_OWNER_CDE')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_PRM_MOD_EVENT.MOD_EVENT_DATA_OWNER_CDE', 'MOD_EVENT_DATA_OWNER_CODE', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_PRM_UNIT')
            AND NAME = 'CREATED_BY_USER_ID')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_PRM_UNIT.CREATED_BY_USER_ID', 'CREATED_BY_USERID', 'COLUMN';
    END
GO

IF EXISTS(SELECT *
          FROM SYS.COLUMNS
          WHERE OBJECT_ID = OBJECT_ID(N'dbo.RCRA_PRM_UNIT_DETAIL')
            AND NAME = 'CREATED_BY_USER_ID')
    BEGIN
        EXEC sp_rename 'dbo.RCRA_PRM_UNIT_DETAIL.CREATED_BY_USER_ID', 'CREATED_BY_USERID', 'COLUMN';
    END
GO

ALTER TABLE RCRA_HD_EPISODIC_WASTE_CODE ALTER COLUMN WASTE_CODE_TEXT VARCHAR (4000)
GO

/* 
 * source: 02-reporting_db-views.sql 
 */
-- recompile view
ALTER VIEW dbo.ETL_HD_EPISODIC_EVENT AS
(
SELECT WH.HD_EPISODIC_EVENT_ID WH_HD_EPISODIC_EVENT_ID,
       ETL.WH_HD_HANDLER_ID,
       ETL.HD_SUBM_ID,
       NODE.*
FROM NODE_RCRA_HD_EPISODIC_EVENT NODE
         INNER JOIN ETL_HD_HANDLER_ID_VW ETL ON ETL.HD_HANDLER_ID = NODE.HD_HANDLER_ID
         LEFT OUTER JOIN RCRA_HD_EPISODIC_EVENT WH ON WH.HD_HANDLER_ID = ETL.WH_HD_HANDLER_ID
    )
GO

-- new view
CREATE VIEW ETL_HD_EPISODIC_PRJT AS
(
SELECT WH.HD_EPISODIC_PRJT_ID WH_HD_EPISODIC_PRJT_ID,
       ETL.WH_HD_EPISODIC_EVENT_ID,
       ETL.HD_SUBM_ID,
       NODE.*
FROM NODE_RCRA_HD_EPISODIC_PRJT NODE
         INNER JOIN ETL_HD_EPISODIC_EVENT ETL ON ETL.HD_EPISODIC_EVENT_ID = NODE.HD_EPISODIC_EVENT_ID
         LEFT OUTER JOIN RCRA_HD_EPISODIC_PRJT WH ON WH.HD_EPISODIC_EVENT_ID = ETL.WH_HD_EPISODIC_EVENT_ID
    AND WH.PRJT_CODE_OWNER = NODE.PRJT_CODE_OWNER
    AND WH.PRJT_CODE = NODE.PRJT_CODE
    )
GO

-- recompile view
ALTER VIEW ETL_HD_HANDLER_VW AS
(
SELECT WH.HD_HANDLER_ID WH_HD_HANDLER_ID,
       ETL.WH_HD_HBASIC_ID,
       ETL.HD_SUBM_ID,
       NODE.*
FROM NODE_RCRA_HD_HANDLER NODE
         INNER JOIN ETL_HD_BASIC_VW ETL ON ETL.HD_HBASIC_ID = NODE.HD_HBASIC_ID
         LEFT OUTER JOIN RCRA_HD_HANDLER WH ON WH.HD_HBASIC_ID = ETL.WH_HD_HBASIC_ID
    AND WH.ACTIVITY_LOCATION = NODE.ACTIVITY_LOCATION
    AND WH.SEQ_NUMBER = NODE.SEQ_NUMBER
    AND WH.SOURCE_TYPE = NODE.SOURCE_TYPE
    )
GO

-- recompile view
ALTER VIEW ETL_RU_REPORT_UNIV_VW AS
(
SELECT SUBM.RU_SUBM_ID      RU_SUBM_ID,
       WH.RU_REPORT_UNIV_ID WH_RU_REPORT_UNIV_ID,
       NODE.*
FROM NODE_RCRA_RU_REPORT_UNIV NODE
         JOIN NODE_RCRA_RU_REPORT_UNIV_SUBM SUBM ON SUBM.RU_REPORT_UNIV_SUBM_ID = NODE.RU_REPORT_UNIV_SUBM_ID
         LEFT OUTER JOIN RCRA_RU_REPORT_UNIV WH ON WH.HANDLER_ID = NODE.HANDLER_ID
    )
GO

-- recompile view
ALTER VIEW ETL_CA_AREA_VW AS
(
SELECT WH.CA_AREA_ID WH_CA_AREA_ID,
       ETL.WH_CA_FAC_SUBM_ID,
       ETL.CA_SUBM_ID,
       NODE.*
FROM NODE_RCRA_CA_AREA NODE
         INNER JOIN ETL_CA_FAC_SUBM_VW ETL ON ETL.CA_FAC_SUBM_ID = NODE.CA_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_CA_AREA WH ON WH.CA_FAC_SUBM_ID = ETL.WH_CA_FAC_SUBM_ID
    AND WH.AREA_SEQ_NUM = NODE.AREA_SEQ_NUM
    )
GO

-- recompile view
ALTER VIEW ETL_CA_AUTHORITY_VW AS
(
SELECT WH.CA_AUTHORITY_ID WH_CA_AUTHORITY_ID,
       ETL.WH_CA_FAC_SUBM_ID,
       ETL.CA_SUBM_ID,
       NODE.*
FROM NODE_RCRA_CA_AUTHORITY NODE
         INNER JOIN ETL_CA_FAC_SUBM_VW ETL ON ETL.CA_FAC_SUBM_ID = NODE.CA_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_CA_AUTHORITY WH ON WH.CA_FAC_SUBM_ID = ETL.WH_CA_FAC_SUBM_ID
    AND WH.ACT_LOC_CODE = NODE.ACT_LOC_CODE
    AND WH.AUTHORITY_AGN_CODE = NODE.AUTHORITY_AGN_CODE
    AND WH.AUTHORITY_EFFC_DATE = NODE.AUTHORITY_EFFC_DATE
    AND WH.AUTHORITY_DATA_OWNER_CODE = NODE.AUTHORITY_DATA_OWNER_CODE
    AND WH.AUTHORITY_TYPE_CODE = NODE.AUTHORITY_TYPE_CODE
    )
GO

-- recompile view
ALTER VIEW ETL_CA_EVENT_VW AS
(
SELECT WH.CA_EVENT_ID WH_CA_EVENT_ID,
       ETL.WH_CA_FAC_SUBM_ID,
       ETL.CA_SUBM_ID,
       NODE.*
FROM NODE_RCRA_CA_EVENT NODE
         INNER JOIN ETL_CA_FAC_SUBM_VW ETL ON ETL.CA_FAC_SUBM_ID = NODE.CA_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_CA_EVENT WH ON WH.CA_FAC_SUBM_ID = ETL.WH_CA_FAC_SUBM_ID
    AND WH.EVENT_SEQ_NUM = NODE.EVENT_SEQ_NUM
    AND WH.EVENT_AGN_CODE = NODE.EVENT_AGN_CODE
    AND WH.CORCT_ACT_EVENT_CODE = NODE.CORCT_ACT_EVENT_CODE
    )
GO

-- recompile view
ALTER VIEW ETL_FA_COST_EST_VW AS
(
SELECT WH.FA_COST_EST_ID WH_FA_COST_EST_ID,
       ETL.WH_FA_FAC_SUBM_ID,
       ETL.FA_SUBM_ID,
       NODE.*
FROM NODE_RCRA_FA_COST_EST NODE
         INNER JOIN ETL_FA_FAC_SUBM_VW ETL ON ETL.FA_FAC_SUBM_ID = NODE.FA_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_FA_COST_EST WH ON WH.FA_FAC_SUBM_ID = ETL.WH_FA_FAC_SUBM_ID
    AND WH.COST_ESTIMATE_SEQ_NUM = NODE.COST_ESTIMATE_SEQ_NUM
    )
GO

-- recompile view
ALTER VIEW ETL_CME_ENFRC_ACT_VW AS
(
SELECT WH.CME_ENFRC_ACT_ID WH_CME_ENFR_ACT_ID,
       ETL.WH_CME_FAC_SUBM_ID,
       ETL.CME_SUBM_ID,
       NODE.*
FROM NODE_RCRA_CME_ENFRC_ACT NODE
         INNER JOIN ETL_CME_FAC_SUBM_VW ETL ON ETL.CME_FAC_SUBM_ID = NODE.CME_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_CME_ENFRC_ACT WH ON WH.CME_FAC_SUBM_ID = ETL.WH_CME_FAC_SUBM_ID
    AND WH.ENFRC_ACT_IDEN = NODE.ENFRC_ACT_IDEN
    AND WH.ENFRC_ACT_DATE = NODE.ENFRC_ACT_DATE
    AND WH.ENFRC_AGN_NAME = NODE.ENFRC_AGN_NAME
    )
GO

-- recompile view
ALTER VIEW ETL_CME_EVAL_VW AS
(
SELECT WH.CME_EVAL_ID WH_CME_EVAL_ID,
       ETL.WH_CME_FAC_SUBM_ID,
       ETL.CME_SUBM_ID,
       NODE.*
FROM NODE_RCRA_CME_EVAL NODE
         JOIN ETL_CME_FAC_SUBM_VW ETL ON ETL.CME_FAC_SUBM_ID = NODE.CME_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_CME_EVAL WH ON WH.CME_FAC_SUBM_ID = ETL.WH_CME_FAC_SUBM_ID
    AND WH.EVAL_ACT_LOC = NODE.EVAL_ACT_LOC
    AND WH.EVAL_IDEN = NODE.EVAL_IDEN
    AND WH.EVAL_RESP_AGN = NODE.EVAL_RESP_AGN
    AND WH.EVAL_START_DATE = NODE.EVAL_START_DATE
    )
GO

-- recompile view
ALTER VIEW ETL_GIS_GEO_INFORMATION_VW AS
(
SELECT WH.GIS_GEO_INFORMATION_ID WH_GIS_GEO_INFORMATION_ID,
       ETL.WH_GIS_FAC_SUBM_ID,
       ETL.GIS_SUBM_ID,
       NODE.*
FROM NODE_RCRA_GIS_GEO_INFORMATION NODE
         JOIN ETL_GIS_FAC_SUBM_VW ETL ON ETL.GIS_FAC_SUBM_ID = NODE.GIS_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_GIS_GEO_INFORMATION WH ON WH.GIS_FAC_SUBM_ID = ETL.WH_GIS_FAC_SUBM_ID
    AND WH.GEO_INFO_SEQ_NUM = NODE.GEO_INFO_SEQ_NUM
    )
GO

-- recompile view
ALTER VIEW ETL_HD_HANDLER_VW AS
(
SELECT WH.HD_HANDLER_ID WH_HD_HANDLER_ID,
       ETL.WH_HD_HBASIC_ID,
       ETL.HD_SUBM_ID,
       NODE.*
FROM NODE_RCRA_HD_HANDLER NODE
         INNER JOIN ETL_HD_BASIC_VW ETL ON ETL.HD_HBASIC_ID = NODE.HD_HBASIC_ID
         LEFT OUTER JOIN RCRA_HD_HANDLER WH ON WH.HD_HBASIC_ID = ETL.WH_HD_HBASIC_ID
    AND WH.ACTIVITY_LOCATION = NODE.ACTIVITY_LOCATION
    AND WH.SEQ_NUMBER = NODE.SEQ_NUMBER
    AND WH.SOURCE_TYPE = NODE.SOURCE_TYPE
    )
GO

ALTER VIEW ETL_FA_MECHANISM_VW AS
(
SELECT WH.FA_MECHANISM_ID WH_FA_MECHANISM_ID,
       ETL.WH_FA_FAC_SUBM_ID,
       ETL.FA_SUBM_ID,
       NODE.*
FROM NODE_RCRA_FA_MECHANISM NODE
         INNER JOIN ETL_FA_FAC_SUBM_VW ETL ON ETL.FA_FAC_SUBM_ID = NODE.FA_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_FA_MECHANISM WH ON WH.FA_FAC_SUBM_ID = ETL.WH_FA_FAC_SUBM_ID
    AND WH.MECHANISM_SEQ_NUM = NODE.MECHANISM_SEQ_NUM
    AND WH.MECHANISM_AGN_CODE = NODE.MECHANISM_AGN_CODE
    )
GO

-- recompile view
ALTER VIEW ETL_FA_MECHANISM_DETAIL_VW AS
(
SELECT WH.FA_MECHANISM_DETAIL_ID WH_FA_MECHANISM_DETAIL_ID,
       ETL.WH_FA_MECHANISM_ID,
       ETL.FA_SUBM_ID,
       NODE.*
FROM NODE_RCRA_FA_MECHANISM_DETAIL NODE
         INNER JOIN ETL_FA_MECHANISM_VW ETL ON ETL.FA_MECHANISM_ID = NODE.FA_MECHANISM_ID
         LEFT OUTER JOIN RCRA_FA_MECHANISM_DETAIL WH ON WH.FA_MECHANISM_ID = ETL.WH_FA_MECHANISM_ID
    AND WH.MECHANISM_DETAIL_SEQ_NUM = NODE.MECHANISM_DETAIL_SEQ_NUM
    )
GO

-- recompile view
ALTER VIEW ETL_CME_VIOL_VW AS
(
SELECT WH.CME_VIOL_ID WH_CME_VIOL_ID,
       ETL.WH_CME_FAC_SUBM_ID,
       ETL.CME_SUBM_ID,
       NODE.*
FROM NODE_RCRA_CME_VIOL NODE
         JOIN ETL_CME_FAC_SUBM_VW ETL ON ETL.CME_FAC_SUBM_ID = NODE.CME_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_CME_VIOL WH ON WH.CME_FAC_SUBM_ID = ETL.WH_CME_FAC_SUBM_ID
    AND WH.VIOL_SEQ_NUM = NODE.VIOL_SEQ_NUM
    AND WH.VIOL_ACT_LOC = NODE.VIOL_ACT_LOC
    AND WH.AGN_WHICH_DTRM_VIOL = NODE.AGN_WHICH_DTRM_VIOL
    )
GO

-- recompile the view
ALTER VIEW ETL_PRM_SERIES_VW AS
(
SELECT WH.PRM_SERIES_ID WH_PRM_SERIES_ID,
       ETL.WH_PRM_FAC_SUBM_ID,
       ETL.PRM_SUBM_ID,
       NODE.*
FROM NODE_RCRA_PRM_SERIES NODE
         INNER JOIN ETL_PRM_FAC_SUBM_VW ETL ON ETL.PRM_FAC_SUBM_ID = NODE.PRM_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_PRM_SERIES WH ON WH.PRM_FAC_SUBM_ID = ETL.WH_PRM_FAC_SUBM_ID
    AND WH.PERMIT_SERIES_SEQ_NUM = NODE.PERMIT_SERIES_SEQ_NUM
    )
GO

-- recompile the view
ALTER VIEW ETL_PRM_EVENT_VW AS
(
SELECT WH.PRM_EVENT_ID WH_PRM_EVENT_ID,
       ETL.WH_PRM_SERIES_ID,
       ETL.PRM_SUBM_ID,
       NODE.*
FROM NODE_RCRA_PRM_EVENT NODE
         INNER JOIN ETL_PRM_SERIES_VW ETL ON ETL.PRM_SERIES_ID = NODE.PRM_SERIES_ID
         LEFT OUTER JOIN RCRA_PRM_EVENT WH ON WH.PRM_SERIES_ID = ETL.WH_PRM_SERIES_ID
    AND WH.EVENT_SEQ_NUM = NODE.EVENT_SEQ_NUM
    AND WH.PERMIT_EVENT_CODE = NODE.PERMIT_EVENT_CODE
    )
GO

-- recompile the view
ALTER VIEW ETL_PRM_MOD_EVENT_VW AS
(
SELECT WH.PRM_MOD_EVENT_ID WH_PRM_MOD_EVENT_ID,
       ETL.WH_PRM_EVENT_ID,
       ETL.PRM_SUBM_ID,
       NODE.*
FROM NODE_RCRA_PRM_MOD_EVENT NODE
         INNER JOIN ETL_PRM_EVENT_VW ETL ON ETL.PRM_EVENT_ID = NODE.PRM_EVENT_ID
         LEFT OUTER JOIN RCRA_PRM_MOD_EVENT WH ON WH.PRM_EVENT_ID = ETL.WH_PRM_EVENT_ID
    AND WH.MOD_EVENT_SEQ_NUM = NODE.MOD_EVENT_SEQ_NUM
    )
GO

-- recompile the view
ALTER VIEW ETL_PRM_UNIT_VW AS
(
SELECT WH.PRM_UNIT_ID WH_PRM_UNIT_ID,
       ETL.WH_PRM_FAC_SUBM_ID,
       ETL.PRM_SUBM_ID,
       NODE.*
FROM NODE_RCRA_PRM_UNIT NODE
         INNER JOIN ETL_PRM_FAC_SUBM_VW ETL ON ETL.PRM_FAC_SUBM_ID = NODE.PRM_FAC_SUBM_ID
         LEFT OUTER JOIN RCRA_PRM_UNIT WH ON WH.PRM_FAC_SUBM_ID = ETL.WH_PRM_FAC_SUBM_ID
    AND WH.PERMIT_UNIT_SEQ_NUM = NODE.PERMIT_UNIT_SEQ_NUM
    )
GO

-- recompile view
ALTER VIEW ETL_PRM_UNIT_DETAIL_VW AS
(
SELECT WH.PRM_UNIT_DETAIL_ID WH_PRM_UNIT_DETAIL_ID,
       ETL.WH_PRM_UNIT_ID,
       ETL.PRM_SUBM_ID,
       NODE.*
FROM NODE_RCRA_PRM_UNIT_DETAIL NODE
         INNER JOIN ETL_PRM_UNIT_VW ETL ON ETL.PRM_UNIT_ID = NODE.PRM_UNIT_ID
         LEFT OUTER JOIN RCRA_PRM_UNIT_DETAIL WH ON WH.PRM_UNIT_ID = ETL.WH_PRM_UNIT_ID
    AND WH.PERMIT_UNIT_DETAIL_SEQ_NUM = NODE.PERMIT_UNIT_DETAIL_SEQ_NUM
    )
GO

/* 
 * source: 03-reporting_db-cme_merge_viol-sp.sql 
 */
/*************************************************************************************************
** ObjectName: CME_MERGE_VIOL.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_VIOL table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USER_ID to CREATED_BY_USERID.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[CME_MERGE_VIOL] @CME_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_CME_VIOL D
        USING (SELECT *
               FROM ETL_CME_VIOL_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_VIOL_ID = S.WH_CME_VIOL_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.VIOL_ACT_LOC IS NOT NULL AND S.VIOL_ACT_LOC IS NOT NULL AND D.VIOL_ACT_LOC <> S.VIOL_ACT_LOC)
                    OR (D.VIOL_ACT_LOC IS NULL AND S.VIOL_ACT_LOC IS NOT NULL)
                    OR (D.VIOL_ACT_LOC IS NOT NULL AND S.VIOL_ACT_LOC IS NULL)
                    OR (D.VIOL_SEQ_NUM IS NOT NULL AND S.VIOL_SEQ_NUM IS NOT NULL AND D.VIOL_SEQ_NUM <> S.VIOL_SEQ_NUM)
                    OR (D.VIOL_SEQ_NUM IS NULL AND S.VIOL_SEQ_NUM IS NOT NULL)
                    OR (D.VIOL_SEQ_NUM IS NOT NULL AND S.VIOL_SEQ_NUM IS NULL)
                    OR (D.AGN_WHICH_DTRM_VIOL IS NOT NULL AND S.AGN_WHICH_DTRM_VIOL IS NOT NULL AND
                        D.AGN_WHICH_DTRM_VIOL <> S.AGN_WHICH_DTRM_VIOL)
                    OR (D.AGN_WHICH_DTRM_VIOL IS NULL AND S.AGN_WHICH_DTRM_VIOL IS NOT NULL)
                    OR (D.AGN_WHICH_DTRM_VIOL IS NOT NULL AND S.AGN_WHICH_DTRM_VIOL IS NULL)
                    OR (D.VIOL_TYPE_OWNER IS NOT NULL AND S.VIOL_TYPE_OWNER IS NOT NULL AND
                        D.VIOL_TYPE_OWNER <> S.VIOL_TYPE_OWNER)
                    OR (D.VIOL_TYPE_OWNER IS NULL AND S.VIOL_TYPE_OWNER IS NOT NULL)
                    OR (D.VIOL_TYPE_OWNER IS NOT NULL AND S.VIOL_TYPE_OWNER IS NULL)
                    OR (D.VIOL_TYPE IS NOT NULL AND S.VIOL_TYPE IS NOT NULL AND D.VIOL_TYPE <> S.VIOL_TYPE)
                    OR (D.VIOL_TYPE IS NULL AND S.VIOL_TYPE IS NOT NULL)
                    OR (D.VIOL_TYPE IS NOT NULL AND S.VIOL_TYPE IS NULL)
                    OR (D.FORMER_CITATION_NAME IS NOT NULL AND S.FORMER_CITATION_NAME IS NOT NULL AND
                        D.FORMER_CITATION_NAME <> S.FORMER_CITATION_NAME)
                    OR (D.FORMER_CITATION_NAME IS NULL AND S.FORMER_CITATION_NAME IS NOT NULL)
                    OR (D.FORMER_CITATION_NAME IS NOT NULL AND S.FORMER_CITATION_NAME IS NULL)
                    OR
                    (D.VIOL_DTRM_DATE IS NOT NULL AND S.VIOL_DTRM_DATE IS NOT NULL AND
                     D.VIOL_DTRM_DATE <> S.VIOL_DTRM_DATE)
                    OR (D.VIOL_DTRM_DATE IS NULL AND S.VIOL_DTRM_DATE IS NOT NULL)
                    OR (D.VIOL_DTRM_DATE IS NOT NULL AND S.VIOL_DTRM_DATE IS NULL)
                    OR (D.RTN_COMPL_ACTL_DATE IS NOT NULL AND S.RTN_COMPL_ACTL_DATE IS NOT NULL AND
                        D.RTN_COMPL_ACTL_DATE <> S.RTN_COMPL_ACTL_DATE)
                    OR (D.RTN_COMPL_ACTL_DATE IS NULL AND S.RTN_COMPL_ACTL_DATE IS NOT NULL)
                    OR (D.RTN_COMPL_ACTL_DATE IS NOT NULL AND S.RTN_COMPL_ACTL_DATE IS NULL)
                    OR (D.RTN_TO_COMPL_QUAL IS NOT NULL AND S.RTN_TO_COMPL_QUAL IS NOT NULL AND
                        D.RTN_TO_COMPL_QUAL <> S.RTN_TO_COMPL_QUAL)
                    OR (D.RTN_TO_COMPL_QUAL IS NULL AND S.RTN_TO_COMPL_QUAL IS NOT NULL)
                    OR (D.RTN_TO_COMPL_QUAL IS NOT NULL AND S.RTN_TO_COMPL_QUAL IS NULL)
                    OR
                    (D.VIOL_RESP_AGN IS NOT NULL AND S.VIOL_RESP_AGN IS NOT NULL AND D.VIOL_RESP_AGN <> S.VIOL_RESP_AGN)
                    OR (D.VIOL_RESP_AGN IS NULL AND S.VIOL_RESP_AGN IS NOT NULL)
                    OR (D.VIOL_RESP_AGN IS NOT NULL AND S.VIOL_RESP_AGN IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NOT NULL AND
                        D.CREATED_BY_USERID <> S.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR (D.C_CREATED_DATE IS NOT NULL AND S.C_CREATED_DATE IS NOT NULL AND
                        D.C_CREATED_DATE <> S.C_CREATED_DATE)
                    OR (D.C_CREATED_DATE IS NULL AND S.C_CREATED_DATE IS NOT NULL)
                    OR (D.C_CREATED_DATE IS NOT NULL AND S.C_CREATED_DATE IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE           = S.TRANS_CODE,
                D.VIOL_ACT_LOC         = S.VIOL_ACT_LOC,
                D.VIOL_SEQ_NUM         = S.VIOL_SEQ_NUM,
                D.AGN_WHICH_DTRM_VIOL  = S.AGN_WHICH_DTRM_VIOL,
                D.VIOL_TYPE_OWNER      = S.VIOL_TYPE_OWNER,
                D.VIOL_TYPE            = S.VIOL_TYPE,
                D.FORMER_CITATION_NAME = S.FORMER_CITATION_NAME,
                D.VIOL_DTRM_DATE       = S.VIOL_DTRM_DATE,
                D.RTN_COMPL_ACTL_DATE  = S.RTN_COMPL_ACTL_DATE,
                D.RTN_TO_COMPL_QUAL    = S.RTN_TO_COMPL_QUAL,
                D.VIOL_RESP_AGN        = S.VIOL_RESP_AGN,
                D.NOTES                = S.NOTES,
                D.CREATED_BY_USERID    = S.CREATED_BY_USERID,
                D.C_CREATED_DATE       = S.C_CREATED_DATE
        WHEN NOT MATCHED THEN
            INSERT (CME_FAC_SUBM_ID,
                    TRANS_CODE,
                    VIOL_ACT_LOC,
                    VIOL_SEQ_NUM,
                    AGN_WHICH_DTRM_VIOL,
                    VIOL_TYPE_OWNER,
                    VIOL_TYPE,
                    FORMER_CITATION_NAME,
                    VIOL_DTRM_DATE,
                    RTN_COMPL_ACTL_DATE,
                    RTN_TO_COMPL_QUAL,
                    VIOL_RESP_AGN,
                    NOTES,
                    CREATED_BY_USERID,
                    C_CREATED_DATE)
            VALUES (S.WH_CME_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.VIOL_ACT_LOC,
                    S.VIOL_SEQ_NUM,
                    S.AGN_WHICH_DTRM_VIOL,
                    S.VIOL_TYPE_OWNER,
                    S.VIOL_TYPE,
                    S.FORMER_CITATION_NAME,
                    S.VIOL_DTRM_DATE,
                    S.RTN_COMPL_ACTL_DATE,
                    S.RTN_TO_COMPL_QUAL,
                    S.VIOL_RESP_AGN,
                    S.NOTES,
                    S.CREATED_BY_USERID,
                    S.C_CREATED_DATE);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 04-reporting_db-fa_merge_mechanism-sp.sql 
 */
/*************************************************************************************************
** ObjectName: FA_MERGE_MECHANISM.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_FA_MECHANISM table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USER_ID to CREATED_BY_USERID.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[FA_MERGE_MECHANISM] @FA_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_FA_MECHANISM D
        USING (SELECT *
               FROM ETL_FA_MECHANISM_VW
               WHERE FA_SUBM_ID = @FA_SUBM_ID) S
        ON (D.FA_MECHANISM_ID = S.WH_FA_MECHANISM_ID)
        WHEN MATCHED
            AND (
                    D.TRANS_CODE <> S.TRANS_CODE
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR D.ACT_LOC_CODE <> S.ACT_LOC_CODE
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NULL)
                    OR D.MECHANISM_AGN_CODE <> S.MECHANISM_AGN_CODE
                    OR (D.MECHANISM_AGN_CODE IS NULL AND S.MECHANISM_AGN_CODE IS NOT NULL)
                    OR (D.MECHANISM_AGN_CODE IS NOT NULL AND S.MECHANISM_AGN_CODE IS NULL)
                    OR D.MECHANISM_SEQ_NUM <> S.MECHANISM_SEQ_NUM
                    OR (D.MECHANISM_SEQ_NUM IS NULL AND S.MECHANISM_SEQ_NUM IS NOT NULL)
                    OR (D.MECHANISM_SEQ_NUM IS NOT NULL AND S.MECHANISM_SEQ_NUM IS NULL)
                    OR D.MECHANISM_TYPE_DATA_OWNER_CODE <> S.MECHANISM_TYPE_DATA_OWNER_CODE
                    OR (D.MECHANISM_TYPE_DATA_OWNER_CODE IS NULL AND S.MECHANISM_TYPE_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.MECHANISM_TYPE_DATA_OWNER_CODE IS NOT NULL AND S.MECHANISM_TYPE_DATA_OWNER_CODE IS NULL)
                    OR D.MECHANISM_TYPE_CODE <> S.MECHANISM_TYPE_CODE
                    OR (D.MECHANISM_TYPE_CODE IS NULL AND S.MECHANISM_TYPE_CODE IS NOT NULL)
                    OR (D.MECHANISM_TYPE_CODE IS NOT NULL AND S.MECHANISM_TYPE_CODE IS NULL)
                    OR D.PROVIDER_TXT <> S.PROVIDER_TXT
                    OR (D.PROVIDER_TXT IS NULL AND S.PROVIDER_TXT IS NOT NULL)
                    OR (D.PROVIDER_TXT IS NOT NULL AND S.PROVIDER_TXT IS NULL)
                    OR D.PROVIDER_FULL_CONTACT_NAME <> S.PROVIDER_FULL_CONTACT_NAME
                    OR (D.PROVIDER_FULL_CONTACT_NAME IS NULL AND S.PROVIDER_FULL_CONTACT_NAME IS NOT NULL)
                    OR (D.PROVIDER_FULL_CONTACT_NAME IS NOT NULL AND S.PROVIDER_FULL_CONTACT_NAME IS NULL)
                    OR D.TELE_NUM_TXT <> S.TELE_NUM_TXT
                    OR (D.TELE_NUM_TXT IS NULL AND S.TELE_NUM_TXT IS NOT NULL)
                    OR (D.TELE_NUM_TXT IS NOT NULL AND S.TELE_NUM_TXT IS NULL)
                    OR D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR D.CREATED_BY_USERID <> S.CREATED_BY_USERID
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR D.F_CREATED_DATE <> S.F_CREATED_DATE
                    OR (D.F_CREATED_DATE IS NULL AND S.F_CREATED_DATE IS NOT NULL)
                    OR (D.F_CREATED_DATE IS NOT NULL AND S.F_CREATED_DATE IS NULL)
                    OR D.DATA_ORIG <> S.DATA_ORIG
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.ACT_LOC_CODE                   = S.ACT_LOC_CODE,
                D.MECHANISM_AGN_CODE             = S.MECHANISM_AGN_CODE,
                D.MECHANISM_SEQ_NUM              = S.MECHANISM_SEQ_NUM,
                D.MECHANISM_TYPE_DATA_OWNER_CODE = S.MECHANISM_TYPE_DATA_OWNER_CODE,
                D.MECHANISM_TYPE_CODE            = S.MECHANISM_TYPE_CODE,
                D.PROVIDER_TXT                   = S.PROVIDER_TXT,
                D.PROVIDER_FULL_CONTACT_NAME     = S.PROVIDER_FULL_CONTACT_NAME,
                D.TELE_NUM_TXT                   = S.TELE_NUM_TXT,
                D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT,
                D.CREATED_BY_USERID             = S.CREATED_BY_USERID,
                D.F_CREATED_DATE                 = S.F_CREATED_DATE,
                D.DATA_ORIG                      = S.DATA_ORIG

        WHEN NOT MATCHED THEN
            INSERT (FA_FAC_SUBM_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    MECHANISM_AGN_CODE,
                    MECHANISM_SEQ_NUM,
                    MECHANISM_TYPE_DATA_OWNER_CODE,
                    MECHANISM_TYPE_CODE,
                    PROVIDER_TXT,
                    PROVIDER_FULL_CONTACT_NAME,
                    TELE_NUM_TXT,
                    SUPP_INFO_TXT,
                    CREATED_BY_USERID,
                    F_CREATED_DATE,
                    DATA_ORIG)
            VALUES (S.WH_FA_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.MECHANISM_AGN_CODE,
                    S.MECHANISM_SEQ_NUM,
                    S.MECHANISM_TYPE_DATA_OWNER_CODE,
                    S.MECHANISM_TYPE_CODE,
                    S.PROVIDER_TXT,
                    S.PROVIDER_FULL_CONTACT_NAME,
                    S.TELE_NUM_TXT,
                    S.SUPP_INFO_TXT,
                    S.CREATED_BY_USERID,
                    S.F_CREATED_DATE,
                    S.DATA_ORIG);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 05-reporting_db-fa_merge_mechanism_detail-sp.sql 
 */
/*************************************************************************************************
** ObjectName: FA_MERGE_MECHANISM_DETAIL.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_FA_MECHANISM_DETAIL table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USER_ID to CREATED_BY_USERID.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[FA_MERGE_MECHANISM_DETAIL] @FA_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_FA_MECHANISM_DETAIL D
        USING (SELECT *
               FROM ETL_FA_MECHANISM_DETAIL_VW
               WHERE FA_SUBM_ID = @FA_SUBM_ID) S
        ON (D.FA_MECHANISM_DETAIL_ID = S.WH_FA_MECHANISM_DETAIL_ID)
        WHEN MATCHED
            AND
                (D.TRANS_CODE <> S.TRANS_CODE
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR D.MECHANISM_DETAIL_SEQ_NUM <> S.MECHANISM_DETAIL_SEQ_NUM
                    OR (D.MECHANISM_DETAIL_SEQ_NUM IS NULL AND S.MECHANISM_DETAIL_SEQ_NUM IS NOT NULL)
                    OR (D.MECHANISM_DETAIL_SEQ_NUM IS NOT NULL AND S.MECHANISM_DETAIL_SEQ_NUM IS NULL)
                    OR D.MECHANISM_IDEN_TXT <> S.MECHANISM_IDEN_TXT
                    OR (D.MECHANISM_IDEN_TXT IS NULL AND S.MECHANISM_IDEN_TXT IS NOT NULL)
                    OR (D.MECHANISM_IDEN_TXT IS NOT NULL AND S.MECHANISM_IDEN_TXT IS NULL)
                    OR D.FACE_VAL_AMOUNT <> S.FACE_VAL_AMOUNT
                    OR (D.FACE_VAL_AMOUNT IS NULL AND S.FACE_VAL_AMOUNT IS NOT NULL)
                    OR (D.FACE_VAL_AMOUNT IS NOT NULL AND S.FACE_VAL_AMOUNT IS NULL)
                    OR D.EFFC_DATE <> S.EFFC_DATE
                    OR (D.EFFC_DATE IS NULL AND S.EFFC_DATE IS NOT NULL)
                    OR (D.EFFC_DATE IS NOT NULL AND S.EFFC_DATE IS NULL)
                    OR D.EXPIRATION_DATE <> S.EXPIRATION_DATE
                    OR (D.EXPIRATION_DATE IS NULL AND S.EXPIRATION_DATE IS NOT NULL)
                    OR (D.EXPIRATION_DATE IS NOT NULL AND S.EXPIRATION_DATE IS NULL)
                    OR D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR D.CURRENT_MECHANISM_DETAIL_IND <> S.CURRENT_MECHANISM_DETAIL_IND
                    OR (D.CURRENT_MECHANISM_DETAIL_IND IS NULL AND S.CURRENT_MECHANISM_DETAIL_IND IS NOT NULL)
                    OR (D.CURRENT_MECHANISM_DETAIL_IND IS NOT NULL AND S.CURRENT_MECHANISM_DETAIL_IND IS NULL)
                    OR D.CREATED_BY_USERID <> S.CREATED_BY_USERID
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR D.F_CREATED_DATE <> S.F_CREATED_DATE
                    OR (D.F_CREATED_DATE IS NULL AND S.F_CREATED_DATE IS NOT NULL)
                    OR (D.F_CREATED_DATE IS NOT NULL AND S.F_CREATED_DATE IS NULL)
                    OR D.DATA_ORIG <> S.DATA_ORIG
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL))
            THEN
            UPDATE
            SET D.TRANS_CODE               = S.TRANS_CODE,
                D.MECHANISM_DETAIL_SEQ_NUM = S.MECHANISM_DETAIL_SEQ_NUM,
                D.MECHANISM_IDEN_TXT       = S.MECHANISM_IDEN_TXT,
                D.FACE_VAL_AMOUNT          = S.FACE_VAL_AMOUNT,
                D.EFFC_DATE                = S.EFFC_DATE,
                D.EXPIRATION_DATE          = S.EXPIRATION_DATE,
                D.SUPP_INFO_TXT            = S.SUPP_INFO_TXT,
                D.CURRENT_MECHANISM_DETAIL_IND        = S.CURRENT_MECHANISM_DETAIL_IND,
                D.CREATED_BY_USERID       = S.CREATED_BY_USERID,
                D.F_CREATED_DATE           = S.F_CREATED_DATE,
                D.DATA_ORIG                = S.DATA_ORIG

        WHEN NOT MATCHED THEN
            INSERT (FA_MECHANISM_ID,
                    TRANS_CODE,
                    MECHANISM_DETAIL_SEQ_NUM,
                    MECHANISM_IDEN_TXT,
                    FACE_VAL_AMOUNT,
                    EFFC_DATE,
                    EXPIRATION_DATE,
                    SUPP_INFO_TXT,
                    CURRENT_MECHANISM_DETAIL_IND,
                    CREATED_BY_USERID,
                    F_CREATED_DATE,
                    DATA_ORIG)
            VALUES (S.WH_FA_MECHANISM_ID,
                    S.TRANS_CODE,
                    S.MECHANISM_DETAIL_SEQ_NUM,
                    S.MECHANISM_IDEN_TXT,
                    S.FACE_VAL_AMOUNT,
                    S.EFFC_DATE,
                    S.EXPIRATION_DATE,
                    S.SUPP_INFO_TXT,
                    S.CURRENT_MECHANISM_DETAIL_IND,
                    S.CREATED_BY_USERID,
                    S.F_CREATED_DATE,
                    S.DATA_ORIG);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 06-reporting_db-gis_merge_rcra_gis_geo_info-sp.sql 
 */
/*************************************************************************************************
** ObjectName: GIS_MERGE_RCRA_GIS_GEO_INFO.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_GIS_GEO_INFORMATION table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USER_ID to CREATED_BY_USERID.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[GIS_MERGE_RCRA_GIS_GEO_INFO] @GIS_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_GIS_GEO_INFORMATION D
        USING (SELECT *
               FROM ETL_GIS_GEO_INFORMATION_VW
               WHERE GIS_SUBM_ID = @GIS_SUBM_ID) S
        ON (D.GIS_GEO_INFORMATION_ID = S.WH_GIS_GEO_INFORMATION_ID)
        WHEN MATCHED
            AND
                (D.TRANS_CODE <> S.TRANS_CODE
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR D.GEO_INFO_OWNER <> S.GEO_INFO_OWNER
                    OR (D.GEO_INFO_OWNER IS NULL AND S.GEO_INFO_OWNER IS NOT NULL)
                    OR (D.GEO_INFO_OWNER IS NOT NULL AND S.GEO_INFO_OWNER IS NULL)
                    OR D.GEO_INFO_SEQ_NUM <> S.GEO_INFO_SEQ_NUM
                    OR (D.GEO_INFO_SEQ_NUM IS NULL AND S.GEO_INFO_SEQ_NUM IS NOT NULL)
                    OR (D.GEO_INFO_SEQ_NUM IS NOT NULL AND S.GEO_INFO_SEQ_NUM IS NULL)
                    OR D.PERMIT_UNIT_SEQ_NUM <> S.PERMIT_UNIT_SEQ_NUM
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NULL AND S.PERMIT_UNIT_SEQ_NUM IS NOT NULL)
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NOT NULL AND S.PERMIT_UNIT_SEQ_NUM IS NULL)
                    OR D.AREA_SEQ_NUM <> S.AREA_SEQ_NUM
                    OR (D.AREA_SEQ_NUM IS NULL AND S.AREA_SEQ_NUM IS NOT NULL)
                    OR (D.AREA_SEQ_NUM IS NOT NULL AND S.AREA_SEQ_NUM IS NULL)
                    OR D.LOC_COMM_TXT <> S.LOC_COMM_TXT
                    OR (D.LOC_COMM_TXT IS NULL AND S.LOC_COMM_TXT IS NOT NULL)
                    OR (D.LOC_COMM_TXT IS NOT NULL AND S.LOC_COMM_TXT IS NULL)
                    OR D.AREA_ACREAGE_MEAS <> S.AREA_ACREAGE_MEAS
                    OR (D.AREA_ACREAGE_MEAS IS NULL AND S.AREA_ACREAGE_MEAS IS NOT NULL)
                    OR (D.AREA_ACREAGE_MEAS IS NOT NULL AND S.AREA_ACREAGE_MEAS IS NULL)
                    OR D.AREA_MEAS_SRC_DATA_OWNER_CODE <> S.AREA_MEAS_SRC_DATA_OWNER_CODE
                    OR (D.AREA_MEAS_SRC_DATA_OWNER_CODE IS NULL AND S.AREA_MEAS_SRC_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.AREA_MEAS_SRC_DATA_OWNER_CODE IS NOT NULL AND S.AREA_MEAS_SRC_DATA_OWNER_CODE IS NULL)
                    OR D.AREA_MEAS_SRC_CODE <> S.AREA_MEAS_SRC_CODE
                    OR (D.AREA_MEAS_SRC_CODE IS NULL AND S.AREA_MEAS_SRC_CODE IS NOT NULL)
                    OR (D.AREA_MEAS_SRC_CODE IS NOT NULL AND S.AREA_MEAS_SRC_CODE IS NULL)
                    OR D.AREA_MEAS_DATE <> S.AREA_MEAS_DATE
                    OR (D.AREA_MEAS_DATE IS NULL AND S.AREA_MEAS_DATE IS NOT NULL)
                    OR (D.AREA_MEAS_DATE IS NOT NULL AND S.AREA_MEAS_DATE IS NULL)
                    OR D.DATA_COLL_DATE <> S.DATA_COLL_DATE
                    OR (D.DATA_COLL_DATE IS NULL AND S.DATA_COLL_DATE IS NOT NULL)
                    OR (D.DATA_COLL_DATE IS NOT NULL AND S.DATA_COLL_DATE IS NULL)
                    OR D.HORZ_ACC_MEAS <> S.HORZ_ACC_MEAS
                    OR (D.HORZ_ACC_MEAS IS NULL AND S.HORZ_ACC_MEAS IS NOT NULL)
                    OR (D.HORZ_ACC_MEAS IS NOT NULL AND S.HORZ_ACC_MEAS IS NULL)
                    OR D.SRC_MAP_SCALE_NUM <> S.SRC_MAP_SCALE_NUM
                    OR (D.SRC_MAP_SCALE_NUM IS NULL AND S.SRC_MAP_SCALE_NUM IS NOT NULL)
                    OR (D.SRC_MAP_SCALE_NUM IS NOT NULL AND S.SRC_MAP_SCALE_NUM IS NULL)
                    OR D.COORD_DATA_SRC_DATA_OWNER_CODE <> S.COORD_DATA_SRC_DATA_OWNER_CODE
                    OR (D.COORD_DATA_SRC_DATA_OWNER_CODE IS NULL AND S.COORD_DATA_SRC_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.COORD_DATA_SRC_DATA_OWNER_CODE IS NOT NULL AND S.COORD_DATA_SRC_DATA_OWNER_CODE IS NULL)
                    OR D.COORD_DATA_SRC_CODE <> S.COORD_DATA_SRC_CODE
                    OR (D.COORD_DATA_SRC_CODE IS NULL AND S.COORD_DATA_SRC_CODE IS NOT NULL)
                    OR (D.COORD_DATA_SRC_CODE IS NOT NULL AND S.COORD_DATA_SRC_CODE IS NULL)
                    OR D.GEO_REF_PT_DATA_OWNER_CODE <> S.GEO_REF_PT_DATA_OWNER_CODE
                    OR (D.GEO_REF_PT_DATA_OWNER_CODE IS NULL AND S.GEO_REF_PT_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.GEO_REF_PT_DATA_OWNER_CODE IS NOT NULL AND S.GEO_REF_PT_DATA_OWNER_CODE IS NULL)
                    OR D.GEO_REF_PT_CODE <> S.GEO_REF_PT_CODE
                    OR (D.GEO_REF_PT_CODE IS NULL AND S.GEO_REF_PT_CODE IS NOT NULL)
                    OR (D.GEO_REF_PT_CODE IS NOT NULL AND S.GEO_REF_PT_CODE IS NULL)
                    OR D.GEOM_TYPE_DATA_OWNER_CODE <> S.GEOM_TYPE_DATA_OWNER_CODE
                    OR (D.GEOM_TYPE_DATA_OWNER_CODE IS NULL AND S.GEOM_TYPE_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.GEOM_TYPE_DATA_OWNER_CODE IS NOT NULL AND S.GEOM_TYPE_DATA_OWNER_CODE IS NULL)
                    OR D.GEOM_TYPE_CODE <> S.GEOM_TYPE_CODE
                    OR (D.GEOM_TYPE_CODE IS NULL AND S.GEOM_TYPE_CODE IS NOT NULL)
                    OR (D.GEOM_TYPE_CODE IS NOT NULL AND S.GEOM_TYPE_CODE IS NULL)
                    OR D.HORZ_COLL_METH_DATA_OWNER_CODE <> S.HORZ_COLL_METH_DATA_OWNER_CODE
                    OR (D.HORZ_COLL_METH_DATA_OWNER_CODE IS NULL AND S.HORZ_COLL_METH_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.HORZ_COLL_METH_DATA_OWNER_CODE IS NOT NULL AND S.HORZ_COLL_METH_DATA_OWNER_CODE IS NULL)
                    OR D.HORZ_COLL_METH_CODE <> S.HORZ_COLL_METH_CODE
                    OR (D.HORZ_COLL_METH_CODE IS NULL AND S.HORZ_COLL_METH_CODE IS NOT NULL)
                    OR (D.HORZ_COLL_METH_CODE IS NOT NULL AND S.HORZ_COLL_METH_CODE IS NULL)
                    OR D.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE <> S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE
                    OR (D.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE IS NULL AND S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE IS NOT NULL)
                    OR (D.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE IS NOT NULL AND S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE IS NULL)
                    OR D.HORZ_COORD_REF_SYS_DATUM_CODE <> S.HORZ_COORD_REF_SYS_DATUM_CODE
                    OR (D.HORZ_COORD_REF_SYS_DATUM_CODE IS NULL AND S.HORZ_COORD_REF_SYS_DATUM_CODE IS NOT NULL)
                    OR (D.HORZ_COORD_REF_SYS_DATUM_CODE IS NOT NULL AND S.HORZ_COORD_REF_SYS_DATUM_CODE IS NULL)
                    OR D.VERF_METH_DATA_OWNER_CODE <> S.VERF_METH_DATA_OWNER_CODE
                    OR (D.VERF_METH_DATA_OWNER_CODE IS NULL AND S.VERF_METH_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.VERF_METH_DATA_OWNER_CODE IS NOT NULL AND S.VERF_METH_DATA_OWNER_CODE IS NULL)
                    OR D.VERF_METH_CODE <> S.VERF_METH_CODE
                    OR (D.VERF_METH_CODE IS NULL AND S.VERF_METH_CODE IS NOT NULL)
                    OR (D.VERF_METH_CODE IS NOT NULL AND S.VERF_METH_CODE IS NULL)
                    OR D.LATITUDE <> S.LATITUDE
                    OR (D.LATITUDE IS NULL AND S.LATITUDE IS NOT NULL)
                    OR (D.LATITUDE IS NOT NULL AND S.LATITUDE IS NULL)
                    OR D.LONGITUDE <> S.LONGITUDE
                    OR (D.LONGITUDE IS NULL AND S.LONGITUDE IS NOT NULL)
                    OR (D.LONGITUDE IS NOT NULL AND S.LONGITUDE IS NULL)
                    OR D.ELEVATION <> S.ELEVATION
                    OR (D.ELEVATION IS NULL AND S.ELEVATION IS NOT NULL)
                    OR (D.ELEVATION IS NOT NULL AND S.ELEVATION IS NULL)
                    OR D.CREATED_BY_USERID <> S.CREATED_BY_USERID
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR D.G_CREATED_DATE <> S.G_CREATED_DATE
                    OR (D.G_CREATED_DATE IS NULL AND S.G_CREATED_DATE IS NOT NULL)
                    OR (D.G_CREATED_DATE IS NOT NULL AND S.G_CREATED_DATE IS NULL)
                    OR D.DATA_ORIG <> S.DATA_ORIG
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL))
            THEN
            UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.GEO_INFO_OWNER                 = S.GEO_INFO_OWNER,
                D.GEO_INFO_SEQ_NUM               = S.GEO_INFO_SEQ_NUM,
                D.PERMIT_UNIT_SEQ_NUM            = S.PERMIT_UNIT_SEQ_NUM,
                D.AREA_SEQ_NUM                   = S.AREA_SEQ_NUM,
                D.LOC_COMM_TXT                   = S.LOC_COMM_TXT,
                D.AREA_ACREAGE_MEAS              = S.AREA_ACREAGE_MEAS,
                D.AREA_MEAS_SRC_DATA_OWNER_CODE  = S.AREA_MEAS_SRC_DATA_OWNER_CODE,
                D.AREA_MEAS_SRC_CODE             = S.AREA_MEAS_SRC_CODE,
                D.AREA_MEAS_DATE                 = S.AREA_MEAS_DATE,
                D.DATA_COLL_DATE                 = S.DATA_COLL_DATE,
                D.HORZ_ACC_MEAS                  = S.HORZ_ACC_MEAS,
                D.SRC_MAP_SCALE_NUM              = S.SRC_MAP_SCALE_NUM,
                D.COORD_DATA_SRC_DATA_OWNER_CODE = S.COORD_DATA_SRC_DATA_OWNER_CODE,
                D.COORD_DATA_SRC_CODE            = S.COORD_DATA_SRC_CODE,
                D.GEO_REF_PT_DATA_OWNER_CODE     = S.GEO_REF_PT_DATA_OWNER_CODE,
                D.GEO_REF_PT_CODE                = S.GEO_REF_PT_CODE,
                D.GEOM_TYPE_DATA_OWNER_CODE      = S.GEOM_TYPE_DATA_OWNER_CODE,
                D.GEOM_TYPE_CODE                 = S.GEOM_TYPE_CODE,
                D.HORZ_COLL_METH_DATA_OWNER_CODE = S.HORZ_COLL_METH_DATA_OWNER_CODE,
                D.HORZ_COLL_METH_CODE            = S.HORZ_COLL_METH_CODE,
                D.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE = S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE,
                D.HORZ_COORD_REF_SYS_DATUM_CODE  = S.HORZ_COORD_REF_SYS_DATUM_CODE,
                D.VERF_METH_DATA_OWNER_CODE      = S.VERF_METH_DATA_OWNER_CODE,
                D.VERF_METH_CODE                 = S.VERF_METH_CODE,
                D.LATITUDE                       = S.LATITUDE,
                D.LONGITUDE                      = S.LONGITUDE,
                D.ELEVATION                      = S.ELEVATION,
                D.CREATED_BY_USERID             = S.CREATED_BY_USERID,
                D.G_CREATED_DATE                 = S.G_CREATED_DATE,
                D.DATA_ORIG                      = S.DATA_ORIG
        WHEN NOT MATCHED THEN
            INSERT (GIS_FAC_SUBM_ID,
                    TRANS_CODE,
                    GEO_INFO_OWNER,
                    GEO_INFO_SEQ_NUM,
                    PERMIT_UNIT_SEQ_NUM,
                    AREA_SEQ_NUM,
                    LOC_COMM_TXT,
                    AREA_ACREAGE_MEAS,
                    AREA_MEAS_SRC_DATA_OWNER_CODE,
                    AREA_MEAS_SRC_CODE,
                    AREA_MEAS_DATE,
                    DATA_COLL_DATE,
                    HORZ_ACC_MEAS,
                    SRC_MAP_SCALE_NUM,
                    COORD_DATA_SRC_DATA_OWNER_CODE,
                    COORD_DATA_SRC_CODE,
                    GEO_REF_PT_DATA_OWNER_CODE,
                    GEO_REF_PT_CODE,
                    GEOM_TYPE_DATA_OWNER_CODE,
                    GEOM_TYPE_CODE,
                    HORZ_COLL_METH_DATA_OWNER_CODE,
                    HORZ_COLL_METH_CODE,
                    HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE,
                    HORZ_COORD_REF_SYS_DATUM_CODE,
                    VERF_METH_DATA_OWNER_CODE,
                    VERF_METH_CODE,
                    LATITUDE,
                    LONGITUDE,
                    ELEVATION,
                    CREATED_BY_USERID,
                    G_CREATED_DATE,
                    DATA_ORIG)
            VALUES (S.WH_GIS_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.GEO_INFO_OWNER,
                    S.GEO_INFO_SEQ_NUM,
                    S.PERMIT_UNIT_SEQ_NUM,
                    S.AREA_SEQ_NUM,
                    S.LOC_COMM_TXT,
                    S.AREA_ACREAGE_MEAS,
                    S.AREA_MEAS_SRC_DATA_OWNER_CODE,
                    S.AREA_MEAS_SRC_CODE,
                    S.AREA_MEAS_DATE,
                    S.DATA_COLL_DATE,
                    S.HORZ_ACC_MEAS,
                    S.SRC_MAP_SCALE_NUM,
                    S.COORD_DATA_SRC_DATA_OWNER_CODE,
                    S.COORD_DATA_SRC_CODE,
                    S.GEO_REF_PT_DATA_OWNER_CODE,
                    S.GEO_REF_PT_CODE,
                    S.GEOM_TYPE_DATA_OWNER_CODE,
                    S.GEOM_TYPE_CODE,
                    S.HORZ_COLL_METH_DATA_OWNER_CODE,
                    S.HORZ_COLL_METH_CODE,
                    S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE,
                    S.HORZ_COORD_REF_SYS_DATUM_CODE,
                    S.VERF_METH_DATA_OWNER_CODE,
                    S.VERF_METH_CODE,
                    S.LATITUDE,
                    S.LONGITUDE,
                    S.ELEVATION,
                    S.CREATED_BY_USERID,
                    S.G_CREATED_DATE,
                    S.DATA_ORIG);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 07-reporting_db-cme_merge_eval-sp.sql 
 */
/*************************************************************************************************
** ObjectName: CME_MERGE_EVAL.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_EVAL table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USER_ID to CREATED_BY_USERID.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[CME_MERGE_EVAL] @CME_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_CME_EVAL D
        USING (SELECT *
               FROM ETL_CME_EVAL_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_EVAL_ID = S.WH_CME_EVAL_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.EVAL_ACT_LOC IS NOT NULL AND S.EVAL_ACT_LOC IS NOT NULL AND D.EVAL_ACT_LOC <> S.EVAL_ACT_LOC)
                    OR (D.EVAL_ACT_LOC IS NULL AND S.EVAL_ACT_LOC IS NOT NULL)
                    OR (D.EVAL_ACT_LOC IS NOT NULL AND S.EVAL_ACT_LOC IS NULL)
                    OR (D.EVAL_IDEN IS NOT NULL AND S.EVAL_IDEN IS NOT NULL AND D.EVAL_IDEN <> S.EVAL_IDEN)
                    OR (D.EVAL_IDEN IS NULL AND S.EVAL_IDEN IS NOT NULL)
                    OR (D.EVAL_IDEN IS NOT NULL AND S.EVAL_IDEN IS NULL)
                    OR (D.EVAL_START_DATE IS NOT NULL AND S.EVAL_START_DATE IS NOT NULL AND
                        D.EVAL_START_DATE <> S.EVAL_START_DATE)
                    OR (D.EVAL_START_DATE IS NULL AND S.EVAL_START_DATE IS NOT NULL)
                    OR (D.EVAL_START_DATE IS NOT NULL AND S.EVAL_START_DATE IS NULL)
                    OR
                    (D.EVAL_RESP_AGN IS NOT NULL AND S.EVAL_RESP_AGN IS NOT NULL AND D.EVAL_RESP_AGN <> S.EVAL_RESP_AGN)
                    OR (D.EVAL_RESP_AGN IS NULL AND S.EVAL_RESP_AGN IS NOT NULL)
                    OR (D.EVAL_RESP_AGN IS NOT NULL AND S.EVAL_RESP_AGN IS NULL)
                    OR (D.DAY_ZERO IS NOT NULL AND S.DAY_ZERO IS NOT NULL AND D.DAY_ZERO <> S.DAY_ZERO)
                    OR (D.DAY_ZERO IS NULL AND S.DAY_ZERO IS NOT NULL)
                    OR (D.DAY_ZERO IS NOT NULL AND S.DAY_ZERO IS NULL)
                    OR (D.FOUND_VIOL IS NOT NULL AND S.FOUND_VIOL IS NOT NULL AND D.FOUND_VIOL <> S.FOUND_VIOL)
                    OR (D.FOUND_VIOL IS NULL AND S.FOUND_VIOL IS NOT NULL)
                    OR (D.FOUND_VIOL IS NOT NULL AND S.FOUND_VIOL IS NULL)
                    OR
                    (D.CTZN_CPLT_IND IS NOT NULL AND S.CTZN_CPLT_IND IS NOT NULL AND D.CTZN_CPLT_IND <> S.CTZN_CPLT_IND)
                    OR (D.CTZN_CPLT_IND IS NULL AND S.CTZN_CPLT_IND IS NOT NULL)
                    OR (D.CTZN_CPLT_IND IS NOT NULL AND S.CTZN_CPLT_IND IS NULL)
                    OR
                    (D.MULTIMEDIA_IND IS NOT NULL AND S.MULTIMEDIA_IND IS NOT NULL AND
                     D.MULTIMEDIA_IND <> S.MULTIMEDIA_IND)
                    OR (D.MULTIMEDIA_IND IS NULL AND S.MULTIMEDIA_IND IS NOT NULL)
                    OR (D.MULTIMEDIA_IND IS NOT NULL AND S.MULTIMEDIA_IND IS NULL)
                    OR (D.SAMPL_IND IS NOT NULL AND S.SAMPL_IND IS NOT NULL AND D.SAMPL_IND <> S.SAMPL_IND)
                    OR (D.SAMPL_IND IS NULL AND S.SAMPL_IND IS NOT NULL)
                    OR (D.SAMPL_IND IS NOT NULL AND S.SAMPL_IND IS NULL)
                    OR (D.NOT_SUBTL_C_IND IS NOT NULL AND S.NOT_SUBTL_C_IND IS NOT NULL AND
                        D.NOT_SUBTL_C_IND <> S.NOT_SUBTL_C_IND)
                    OR (D.NOT_SUBTL_C_IND IS NULL AND S.NOT_SUBTL_C_IND IS NOT NULL)
                    OR (D.NOT_SUBTL_C_IND IS NOT NULL AND S.NOT_SUBTL_C_IND IS NULL)
                    OR (D.EVAL_TYPE_OWNER IS NOT NULL AND S.EVAL_TYPE_OWNER IS NOT NULL AND
                        D.EVAL_TYPE_OWNER <> S.EVAL_TYPE_OWNER)
                    OR (D.EVAL_TYPE_OWNER IS NULL AND S.EVAL_TYPE_OWNER IS NOT NULL)
                    OR (D.EVAL_TYPE_OWNER IS NOT NULL AND S.EVAL_TYPE_OWNER IS NULL)
                    OR (D.EVAL_TYPE IS NOT NULL AND S.EVAL_TYPE IS NOT NULL AND D.EVAL_TYPE <> S.EVAL_TYPE)
                    OR (D.EVAL_TYPE IS NULL AND S.EVAL_TYPE IS NOT NULL)
                    OR (D.EVAL_TYPE IS NOT NULL AND S.EVAL_TYPE IS NULL)
                    OR
                    (D.FOCUS_AREA_OWNER IS NOT NULL AND S.FOCUS_AREA_OWNER IS NOT NULL AND
                     D.FOCUS_AREA_OWNER <> S.FOCUS_AREA_OWNER)
                    OR (D.FOCUS_AREA_OWNER IS NULL AND S.FOCUS_AREA_OWNER IS NOT NULL)
                    OR (D.FOCUS_AREA_OWNER IS NOT NULL AND S.FOCUS_AREA_OWNER IS NULL)
                    OR (D.FOCUS_AREA IS NOT NULL AND S.FOCUS_AREA IS NOT NULL AND D.FOCUS_AREA <> S.FOCUS_AREA)
                    OR (D.FOCUS_AREA IS NULL AND S.FOCUS_AREA IS NOT NULL)
                    OR (D.FOCUS_AREA IS NOT NULL AND S.FOCUS_AREA IS NULL)
                    OR (D.EVAL_RESP_PERSON_IDEN_OWNER IS NOT NULL AND S.EVAL_RESP_PERSON_IDEN_OWNER IS NOT NULL AND
                        D.EVAL_RESP_PERSON_IDEN_OWNER <> S.EVAL_RESP_PERSON_IDEN_OWNER)
                    OR (D.EVAL_RESP_PERSON_IDEN_OWNER IS NULL AND S.EVAL_RESP_PERSON_IDEN_OWNER IS NOT NULL)
                    OR (D.EVAL_RESP_PERSON_IDEN_OWNER IS NOT NULL AND S.EVAL_RESP_PERSON_IDEN_OWNER IS NULL)
                    OR (D.EVAL_RESP_PERSON_IDEN IS NOT NULL AND S.EVAL_RESP_PERSON_IDEN IS NOT NULL AND
                        D.EVAL_RESP_PERSON_IDEN <> S.EVAL_RESP_PERSON_IDEN)
                    OR (D.EVAL_RESP_PERSON_IDEN IS NULL AND S.EVAL_RESP_PERSON_IDEN IS NOT NULL)
                    OR (D.EVAL_RESP_PERSON_IDEN IS NOT NULL AND S.EVAL_RESP_PERSON_IDEN IS NULL)
                    OR (D.EVAL_RESP_SUBORG_OWNER IS NOT NULL AND S.EVAL_RESP_SUBORG_OWNER IS NOT NULL AND
                        D.EVAL_RESP_SUBORG_OWNER <> S.EVAL_RESP_SUBORG_OWNER)
                    OR (D.EVAL_RESP_SUBORG_OWNER IS NULL AND S.EVAL_RESP_SUBORG_OWNER IS NOT NULL)
                    OR (D.EVAL_RESP_SUBORG_OWNER IS NOT NULL AND S.EVAL_RESP_SUBORG_OWNER IS NULL)
                    OR
                    (D.EVAL_RESP_SUBORG IS NOT NULL AND S.EVAL_RESP_SUBORG IS NOT NULL AND
                     D.EVAL_RESP_SUBORG <> S.EVAL_RESP_SUBORG)
                    OR (D.EVAL_RESP_SUBORG IS NULL AND S.EVAL_RESP_SUBORG IS NOT NULL)
                    OR (D.EVAL_RESP_SUBORG IS NOT NULL AND S.EVAL_RESP_SUBORG IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                    OR (D.NOC_DATE IS NOT NULL AND S.NOC_DATE IS NOT NULL AND D.NOC_DATE <> S.NOC_DATE)
                    OR (D.NOC_DATE IS NULL AND S.NOC_DATE IS NOT NULL)
                    OR (D.NOC_DATE IS NOT NULL AND S.NOC_DATE IS NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NOT NULL AND
                        D.CREATED_BY_USERID <> S.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR (D.C_CREATED_DATE IS NOT NULL AND S.C_CREATED_DATE IS NOT NULL AND
                        D.C_CREATED_DATE <> S.C_CREATED_DATE)
                    OR (D.C_CREATED_DATE IS NULL AND S.C_CREATED_DATE IS NOT NULL)
                    OR (D.C_CREATED_DATE IS NOT NULL AND S.C_CREATED_DATE IS NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NOT NULL AND D.DATA_ORIG <> S.DATA_ORIG)
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE                  = S.TRANS_CODE,
                D.EVAL_ACT_LOC                = S.EVAL_ACT_LOC,
                D.EVAL_IDEN                   = S.EVAL_IDEN,
                D.EVAL_START_DATE             = S.EVAL_START_DATE,
                D.EVAL_RESP_AGN               = S.EVAL_RESP_AGN,
                D.DAY_ZERO                    = S.DAY_ZERO,
                D.FOUND_VIOL                  = S.FOUND_VIOL,
                D.CTZN_CPLT_IND               = S.CTZN_CPLT_IND,
                D.MULTIMEDIA_IND              = S.MULTIMEDIA_IND,
                D.SAMPL_IND                   = S.SAMPL_IND,
                D.NOT_SUBTL_C_IND             = S.NOT_SUBTL_C_IND,
                D.EVAL_TYPE_OWNER             = S.EVAL_TYPE_OWNER,
                D.EVAL_TYPE                   = S.EVAL_TYPE,
                D.FOCUS_AREA_OWNER            = S.FOCUS_AREA_OWNER,
                D.FOCUS_AREA                  = S.FOCUS_AREA,
                D.EVAL_RESP_PERSON_IDEN_OWNER = S.EVAL_RESP_PERSON_IDEN_OWNER,
                D.EVAL_RESP_PERSON_IDEN       = S.EVAL_RESP_PERSON_IDEN,
                D.EVAL_RESP_SUBORG_OWNER      = S.EVAL_RESP_SUBORG_OWNER,
                D.EVAL_RESP_SUBORG            = S.EVAL_RESP_SUBORG,
                D.NOTES                       = S.NOTES,
                D.NOC_DATE                    = S.NOC_DATE,
                D.CREATED_BY_USERID          = S.CREATED_BY_USERID,
                D.C_CREATED_DATE              = S.C_CREATED_DATE,
                D.DATA_ORIG                   = S.DATA_ORIG

        WHEN NOT MATCHED THEN
            INSERT (CME_FAC_SUBM_ID,
                    TRANS_CODE,
                    EVAL_ACT_LOC,
                    EVAL_IDEN,
                    EVAL_START_DATE,
                    EVAL_RESP_AGN,
                    DAY_ZERO,
                    FOUND_VIOL,
                    CTZN_CPLT_IND,
                    MULTIMEDIA_IND,
                    SAMPL_IND,
                    NOT_SUBTL_C_IND,
                    EVAL_TYPE_OWNER,
                    EVAL_TYPE,
                    FOCUS_AREA_OWNER,
                    FOCUS_AREA,
                    EVAL_RESP_PERSON_IDEN_OWNER,
                    EVAL_RESP_PERSON_IDEN,
                    EVAL_RESP_SUBORG_OWNER,
                    EVAL_RESP_SUBORG,
                    NOTES,
                    NOC_DATE,
                    CREATED_BY_USERID,
                    C_CREATED_DATE,
                    DATA_ORIG)
            VALUES (S.WH_CME_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.EVAL_ACT_LOC,
                    S.EVAL_IDEN,
                    S.EVAL_START_DATE,
                    S.EVAL_RESP_AGN,
                    S.DAY_ZERO,
                    S.FOUND_VIOL,
                    S.CTZN_CPLT_IND,
                    S.MULTIMEDIA_IND,
                    S.SAMPL_IND,
                    S.NOT_SUBTL_C_IND,
                    S.EVAL_TYPE_OWNER,
                    S.EVAL_TYPE,
                    S.FOCUS_AREA_OWNER,
                    S.FOCUS_AREA,
                    S.EVAL_RESP_PERSON_IDEN_OWNER,
                    S.EVAL_RESP_PERSON_IDEN,
                    S.EVAL_RESP_SUBORG_OWNER,
                    S.EVAL_RESP_SUBORG,
                    S.NOTES,
                    S.NOC_DATE,
                    S.CREATED_BY_USERID,
                    S.C_CREATED_DATE,
                    S.DATA_ORIG);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 08-reporting_db-cme_merge_enfrc_act-sp.sql 
 */
/*************************************************************************************************
** ObjectName: CME_MERGE_ENFRC_ACT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_ENFRC_ACT table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USER_ID to CREATED_BY_USERID.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[CME_MERGE_ENFRC_ACT] @CME_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_CME_ENFRC_ACT D
        USING (SELECT *
               FROM ETL_CME_ENFRC_ACT_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_ENFRC_ACT_ID = S.WH_CME_ENFR_ACT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.ENFRC_AGN_LOC_NAME IS NOT NULL AND S.ENFRC_AGN_LOC_NAME IS NOT NULL AND
                        D.ENFRC_AGN_LOC_NAME <> S.ENFRC_AGN_LOC_NAME)
                    OR (D.ENFRC_AGN_LOC_NAME IS NULL AND S.ENFRC_AGN_LOC_NAME IS NOT NULL)
                    OR (D.ENFRC_AGN_LOC_NAME IS NOT NULL AND S.ENFRC_AGN_LOC_NAME IS NULL)
                    OR
                    (D.ENFRC_ACT_IDEN IS NOT NULL AND S.ENFRC_ACT_IDEN IS NOT NULL AND
                     D.ENFRC_ACT_IDEN <> S.ENFRC_ACT_IDEN)
                    OR (D.ENFRC_ACT_IDEN IS NULL AND S.ENFRC_ACT_IDEN IS NOT NULL)
                    OR (D.ENFRC_ACT_IDEN IS NOT NULL AND S.ENFRC_ACT_IDEN IS NULL)
                    OR
                    (D.ENFRC_ACT_DATE IS NOT NULL AND S.ENFRC_ACT_DATE IS NOT NULL AND
                     D.ENFRC_ACT_DATE <> S.ENFRC_ACT_DATE)
                    OR (D.ENFRC_ACT_DATE IS NULL AND S.ENFRC_ACT_DATE IS NOT NULL)
                    OR (D.ENFRC_ACT_DATE IS NOT NULL AND S.ENFRC_ACT_DATE IS NULL)
                    OR
                    (D.ENFRC_AGN_NAME IS NOT NULL AND S.ENFRC_AGN_NAME IS NOT NULL AND
                     D.ENFRC_AGN_NAME <> S.ENFRC_AGN_NAME)
                    OR (D.ENFRC_AGN_NAME IS NULL AND S.ENFRC_AGN_NAME IS NOT NULL)
                    OR (D.ENFRC_AGN_NAME IS NOT NULL AND S.ENFRC_AGN_NAME IS NULL)
                    OR
                    (D.ENFRC_DOCKET_NUM IS NOT NULL AND S.ENFRC_DOCKET_NUM IS NOT NULL AND
                     D.ENFRC_DOCKET_NUM <> S.ENFRC_DOCKET_NUM)
                    OR (D.ENFRC_DOCKET_NUM IS NULL AND S.ENFRC_DOCKET_NUM IS NOT NULL)
                    OR (D.ENFRC_DOCKET_NUM IS NOT NULL AND S.ENFRC_DOCKET_NUM IS NULL)
                    OR (D.ENFRC_ATTRY IS NOT NULL AND S.ENFRC_ATTRY IS NOT NULL AND D.ENFRC_ATTRY <> S.ENFRC_ATTRY)
                    OR (D.ENFRC_ATTRY IS NULL AND S.ENFRC_ATTRY IS NOT NULL)
                    OR (D.ENFRC_ATTRY IS NOT NULL AND S.ENFRC_ATTRY IS NULL)
                    OR (D.CORCT_ACT_COMPT IS NOT NULL AND S.CORCT_ACT_COMPT IS NOT NULL AND
                        D.CORCT_ACT_COMPT <> S.CORCT_ACT_COMPT)
                    OR (D.CORCT_ACT_COMPT IS NULL AND S.CORCT_ACT_COMPT IS NOT NULL)
                    OR (D.CORCT_ACT_COMPT IS NOT NULL AND S.CORCT_ACT_COMPT IS NULL)
                    OR (D.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NOT NULL AND S.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NOT NULL AND
                        D.CNST_AGMT_FINAL_ORDER_SEQ_NUM <> S.CNST_AGMT_FINAL_ORDER_SEQ_NUM)
                    OR (D.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NULL AND S.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NOT NULL)
                    OR (D.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NOT NULL AND S.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NULL)
                    OR
                    (D.APPEAL_INIT_DATE IS NOT NULL AND S.APPEAL_INIT_DATE IS NOT NULL AND
                     D.APPEAL_INIT_DATE <> S.APPEAL_INIT_DATE)
                    OR (D.APPEAL_INIT_DATE IS NULL AND S.APPEAL_INIT_DATE IS NOT NULL)
                    OR (D.APPEAL_INIT_DATE IS NOT NULL AND S.APPEAL_INIT_DATE IS NULL)
                    OR
                    (D.APPEAL_RSLN_DATE IS NOT NULL AND S.APPEAL_RSLN_DATE IS NOT NULL AND
                     D.APPEAL_RSLN_DATE <> S.APPEAL_RSLN_DATE)
                    OR (D.APPEAL_RSLN_DATE IS NULL AND S.APPEAL_RSLN_DATE IS NOT NULL)
                    OR (D.APPEAL_RSLN_DATE IS NOT NULL AND S.APPEAL_RSLN_DATE IS NULL)
                    OR
                    (D.DISP_STAT_DATE IS NOT NULL AND S.DISP_STAT_DATE IS NOT NULL AND
                     D.DISP_STAT_DATE <> S.DISP_STAT_DATE)
                    OR (D.DISP_STAT_DATE IS NULL AND S.DISP_STAT_DATE IS NOT NULL)
                    OR (D.DISP_STAT_DATE IS NOT NULL AND S.DISP_STAT_DATE IS NULL)
                    OR (D.DISP_STAT_OWNER IS NOT NULL AND S.DISP_STAT_OWNER IS NOT NULL AND
                        D.DISP_STAT_OWNER <> S.DISP_STAT_OWNER)
                    OR (D.DISP_STAT_OWNER IS NULL AND S.DISP_STAT_OWNER IS NOT NULL)
                    OR (D.DISP_STAT_OWNER IS NOT NULL AND S.DISP_STAT_OWNER IS NULL)
                    OR (D.DISP_STAT IS NOT NULL AND S.DISP_STAT IS NOT NULL AND D.DISP_STAT <> S.DISP_STAT)
                    OR (D.DISP_STAT IS NULL AND S.DISP_STAT IS NOT NULL)
                    OR (D.DISP_STAT IS NOT NULL AND S.DISP_STAT IS NULL)
                    OR (D.ENFRC_OWNER IS NOT NULL AND S.ENFRC_OWNER IS NOT NULL AND D.ENFRC_OWNER <> S.ENFRC_OWNER)
                    OR (D.ENFRC_OWNER IS NULL AND S.ENFRC_OWNER IS NOT NULL)
                    OR (D.ENFRC_OWNER IS NOT NULL AND S.ENFRC_OWNER IS NULL)
                    OR (D.ENFRC_TYPE IS NOT NULL AND S.ENFRC_TYPE IS NOT NULL AND D.ENFRC_TYPE <> S.ENFRC_TYPE)
                    OR (D.ENFRC_TYPE IS NULL AND S.ENFRC_TYPE IS NOT NULL)
                    OR (D.ENFRC_TYPE IS NOT NULL AND S.ENFRC_TYPE IS NULL)
                    OR (D.ENFRC_RESP_PERSON_OWNER IS NOT NULL AND S.ENFRC_RESP_PERSON_OWNER IS NOT NULL AND
                        D.ENFRC_RESP_PERSON_OWNER <> S.ENFRC_RESP_PERSON_OWNER)
                    OR (D.ENFRC_RESP_PERSON_OWNER IS NULL AND S.ENFRC_RESP_PERSON_OWNER IS NOT NULL)
                    OR (D.ENFRC_RESP_PERSON_OWNER IS NOT NULL AND S.ENFRC_RESP_PERSON_OWNER IS NULL)
                    OR (D.ENFRC_RESP_PERSON_IDEN IS NOT NULL AND S.ENFRC_RESP_PERSON_IDEN IS NOT NULL AND
                        D.ENFRC_RESP_PERSON_IDEN <> S.ENFRC_RESP_PERSON_IDEN)
                    OR (D.ENFRC_RESP_PERSON_IDEN IS NULL AND S.ENFRC_RESP_PERSON_IDEN IS NOT NULL)
                    OR (D.ENFRC_RESP_PERSON_IDEN IS NOT NULL AND S.ENFRC_RESP_PERSON_IDEN IS NULL)
                    OR (D.ENFRC_RESP_SUBORG_OWNER IS NOT NULL AND S.ENFRC_RESP_SUBORG_OWNER IS NOT NULL AND
                        D.ENFRC_RESP_SUBORG_OWNER <> S.ENFRC_RESP_SUBORG_OWNER)
                    OR (D.ENFRC_RESP_SUBORG_OWNER IS NULL AND S.ENFRC_RESP_SUBORG_OWNER IS NOT NULL)
                    OR (D.ENFRC_RESP_SUBORG_OWNER IS NOT NULL AND S.ENFRC_RESP_SUBORG_OWNER IS NULL)
                    OR (D.ENFRC_RESP_SUBORG IS NOT NULL AND S.ENFRC_RESP_SUBORG IS NOT NULL AND
                        D.ENFRC_RESP_SUBORG <> S.ENFRC_RESP_SUBORG)
                    OR (D.ENFRC_RESP_SUBORG IS NULL AND S.ENFRC_RESP_SUBORG IS NOT NULL)
                    OR (D.ENFRC_RESP_SUBORG IS NOT NULL AND S.ENFRC_RESP_SUBORG IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                    OR (D.FA_REQUIRED IS NOT NULL AND S.FA_REQUIRED IS NOT NULL AND D.FA_REQUIRED <> S.FA_REQUIRED)
                    OR (D.FA_REQUIRED IS NULL AND S.FA_REQUIRED IS NOT NULL)
                    OR (D.FA_REQUIRED IS NOT NULL AND S.FA_REQUIRED IS NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NOT NULL AND
                        D.CREATED_BY_USERID <> S.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR (D.C_CREATED_DATE IS NOT NULL AND S.C_CREATED_DATE IS NOT NULL AND
                        D.C_CREATED_DATE <> S.C_CREATED_DATE)
                    OR (D.C_CREATED_DATE IS NULL AND S.C_CREATED_DATE IS NOT NULL)
                    OR (D.C_CREATED_DATE IS NOT NULL AND S.C_CREATED_DATE IS NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NOT NULL AND D.DATA_ORIG <> S.DATA_ORIG)
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE                    = S.TRANS_CODE,
                D.ENFRC_AGN_LOC_NAME            = S.ENFRC_AGN_LOC_NAME,
                D.ENFRC_ACT_IDEN                = S.ENFRC_ACT_IDEN,
                D.ENFRC_ACT_DATE                = S.ENFRC_ACT_DATE,
                D.ENFRC_AGN_NAME                = S.ENFRC_AGN_NAME,
                D.ENFRC_DOCKET_NUM              = S.ENFRC_DOCKET_NUM,
                D.ENFRC_ATTRY                   = S.ENFRC_ATTRY,
                D.CORCT_ACT_COMPT               = S.CORCT_ACT_COMPT,
                D.CNST_AGMT_FINAL_ORDER_SEQ_NUM = S.CNST_AGMT_FINAL_ORDER_SEQ_NUM,
                D.APPEAL_INIT_DATE              = S.APPEAL_INIT_DATE,
                D.APPEAL_RSLN_DATE              = S.APPEAL_RSLN_DATE,
                D.DISP_STAT_DATE                = S.DISP_STAT_DATE,
                D.DISP_STAT_OWNER               = S.DISP_STAT_OWNER,
                D.DISP_STAT                     = S.DISP_STAT,
                D.ENFRC_OWNER                   = S.ENFRC_OWNER,
                D.ENFRC_TYPE                    = S.ENFRC_TYPE,
                D.ENFRC_RESP_PERSON_OWNER       = S.ENFRC_RESP_PERSON_OWNER,
                D.ENFRC_RESP_PERSON_IDEN        = S.ENFRC_RESP_PERSON_IDEN,
                D.ENFRC_RESP_SUBORG_OWNER       = S.ENFRC_RESP_SUBORG_OWNER,
                D.ENFRC_RESP_SUBORG             = S.ENFRC_RESP_SUBORG,
                D.NOTES                         = S.NOTES,
                D.FA_REQUIRED                   = S.FA_REQUIRED,
                D.CREATED_BY_USERID            = S.CREATED_BY_USERID,
                D.C_CREATED_DATE                = S.C_CREATED_DATE,
                D.DATA_ORIG                     = S.DATA_ORIG

        WHEN NOT MATCHED THEN
            INSERT (CME_FAC_SUBM_ID,
                    TRANS_CODE,
                    ENFRC_AGN_LOC_NAME,
                    ENFRC_ACT_IDEN,
                    ENFRC_ACT_DATE,
                    ENFRC_AGN_NAME,
                    ENFRC_DOCKET_NUM,
                    ENFRC_ATTRY,
                    CORCT_ACT_COMPT,
                    CNST_AGMT_FINAL_ORDER_SEQ_NUM,
                    APPEAL_INIT_DATE,
                    APPEAL_RSLN_DATE,
                    DISP_STAT_DATE,
                    DISP_STAT_OWNER,
                    DISP_STAT,
                    ENFRC_OWNER,
                    ENFRC_TYPE,
                    ENFRC_RESP_PERSON_OWNER,
                    ENFRC_RESP_PERSON_IDEN,
                    ENFRC_RESP_SUBORG_OWNER,
                    ENFRC_RESP_SUBORG,
                    NOTES,
                    FA_REQUIRED,
                    CREATED_BY_USERID,
                    C_CREATED_DATE,
                    DATA_ORIG
                    )
            VALUES (S.WH_CME_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.ENFRC_AGN_LOC_NAME,
                    S.ENFRC_ACT_IDEN,
                    S.ENFRC_ACT_DATE,
                    S.ENFRC_AGN_NAME,
                    S.ENFRC_DOCKET_NUM,
                    S.ENFRC_ATTRY,
                    S.CORCT_ACT_COMPT,
                    S.CNST_AGMT_FINAL_ORDER_SEQ_NUM,
                    S.APPEAL_INIT_DATE,
                    S.APPEAL_RSLN_DATE,
                    S.DISP_STAT_DATE,
                    S.DISP_STAT_OWNER,
                    S.DISP_STAT,
                    S.ENFRC_OWNER,
                    S.ENFRC_TYPE,
                    S.ENFRC_RESP_PERSON_OWNER,
                    S.ENFRC_RESP_PERSON_IDEN,
                    S.ENFRC_RESP_SUBORG_OWNER,
                    S.ENFRC_RESP_SUBORG,
                    S.NOTES,
                    S.FA_REQUIRED,
                    S.CREATED_BY_USERID,
                    S.C_CREATED_DATE,
                    S.DATA_ORIG);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 09-reporting_db-fa_merge_cost_est-sp.sql 
 */
/*************************************************************************************************
** ObjectName: FA_MERGE_COST_EST.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_FA_COST_EST table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USER_ID to CREATED_BY_USERID.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[FA_MERGE_COST_EST] @FA_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_FA_COST_EST D
        USING (SELECT *
               FROM ETL_FA_COST_EST_VW
               WHERE FA_SUBM_ID = @FA_SUBM_ID) S
        ON (D.FA_COST_EST_ID = S.WH_FA_COST_EST_ID)
        WHEN MATCHED
            AND (
                    D.TRANS_CODE <> S.TRANS_CODE
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR D.ACT_LOC_CODE <> S.ACT_LOC_CODE
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NULL)
                    OR D.COST_ESTIMATE_TYPE_CODE <> S.COST_ESTIMATE_TYPE_CODE
                    OR (D.COST_ESTIMATE_TYPE_CODE IS NULL AND S.COST_ESTIMATE_TYPE_CODE IS NOT NULL)
                    OR (D.COST_ESTIMATE_TYPE_CODE IS NOT NULL AND S.COST_ESTIMATE_TYPE_CODE IS NULL)
                    OR D.COST_ESTIMATE_AGN_CODE <> S.COST_ESTIMATE_AGN_CODE
                    OR (D.COST_ESTIMATE_AGN_CODE IS NULL AND S.COST_ESTIMATE_AGN_CODE IS NOT NULL)
                    OR (D.COST_ESTIMATE_AGN_CODE IS NOT NULL AND S.COST_ESTIMATE_AGN_CODE IS NULL)
                    OR D.COST_ESTIMATE_SEQ_NUM <> S.COST_ESTIMATE_SEQ_NUM
                    OR (D.COST_ESTIMATE_SEQ_NUM IS NULL AND S.COST_ESTIMATE_SEQ_NUM IS NOT NULL)
                    OR (D.COST_ESTIMATE_SEQ_NUM IS NOT NULL AND S.COST_ESTIMATE_SEQ_NUM IS NULL)
                    OR D.RESP_PERSON_DATA_OWNER_CODE <> S.RESP_PERSON_DATA_OWNER_CODE
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NULL)
                    OR D.RESP_PERSON_ID <> S.RESP_PERSON_ID
                    OR (D.RESP_PERSON_ID IS NULL AND S.RESP_PERSON_ID IS NOT NULL)
                    OR (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NULL)
                    OR D.COST_ESTIMATE_AMOUNT <> S.COST_ESTIMATE_AMOUNT
                    OR (D.COST_ESTIMATE_AMOUNT IS NULL AND S.COST_ESTIMATE_AMOUNT IS NOT NULL)
                    OR (D.COST_ESTIMATE_AMOUNT IS NOT NULL AND S.COST_ESTIMATE_AMOUNT IS NULL)
                    OR D.COST_ESTIMATE_DATE <> S.COST_ESTIMATE_DATE
                    OR (D.COST_ESTIMATE_DATE IS NULL AND S.COST_ESTIMATE_DATE IS NOT NULL)
                    OR (D.COST_ESTIMATE_DATE IS NOT NULL AND S.COST_ESTIMATE_DATE IS NULL)
                    OR D.COST_ESTIMATE_RSN_CODE <> S.COST_ESTIMATE_RSN_CODE
                    OR (D.COST_ESTIMATE_RSN_CODE IS NULL AND S.COST_ESTIMATE_RSN_CODE IS NOT NULL)
                    OR (D.COST_ESTIMATE_RSN_CODE IS NOT NULL AND S.COST_ESTIMATE_RSN_CODE IS NULL)
                    OR D.AREA_UNIT_NOTES_TXT <> S.AREA_UNIT_NOTES_TXT
                    OR (D.AREA_UNIT_NOTES_TXT IS NULL AND S.AREA_UNIT_NOTES_TXT IS NOT NULL)
                    OR (D.AREA_UNIT_NOTES_TXT IS NOT NULL AND S.AREA_UNIT_NOTES_TXT IS NULL)
                    OR D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR D.CREATED_BY_USERID <> S.CREATED_BY_USERID
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR D.F_CREATED_DATE <> S.F_CREATED_DATE
                    OR (D.F_CREATED_DATE IS NULL AND S.F_CREATED_DATE IS NOT NULL)
                    OR (D.F_CREATED_DATE IS NOT NULL AND S.F_CREATED_DATE IS NULL)
                    OR D.DATA_ORIG <> S.DATA_ORIG
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANS_CODE                  = S.TRANS_CODE,
                D.ACT_LOC_CODE                = S.ACT_LOC_CODE,
                D.COST_ESTIMATE_TYPE_CODE     = S.COST_ESTIMATE_TYPE_CODE,
                D.COST_ESTIMATE_AGN_CODE      = S.COST_ESTIMATE_AGN_CODE,
                D.COST_ESTIMATE_SEQ_NUM       = S.COST_ESTIMATE_SEQ_NUM,
                D.RESP_PERSON_DATA_OWNER_CODE = S.RESP_PERSON_DATA_OWNER_CODE,
                D.RESP_PERSON_ID              = S.RESP_PERSON_ID,
                D.COST_ESTIMATE_AMOUNT        = S.COST_ESTIMATE_AMOUNT,
                D.COST_ESTIMATE_DATE          = S.COST_ESTIMATE_DATE,
                D.COST_ESTIMATE_RSN_CODE      = S.COST_ESTIMATE_RSN_CODE,
                D.AREA_UNIT_NOTES_TXT         = S.AREA_UNIT_NOTES_TXT,
                D.SUPP_INFO_TXT               = S.SUPP_INFO_TXT,
                D.CREATED_BY_USERID          = S.CREATED_BY_USERID,
                D.F_CREATED_DATE              = S.F_CREATED_DATE,
                D.DATA_ORIG                   = S.DATA_ORIG

        WHEN NOT MATCHED THEN
            INSERT (FA_FAC_SUBM_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    COST_ESTIMATE_TYPE_CODE,
                    COST_ESTIMATE_AGN_CODE,
                    COST_ESTIMATE_SEQ_NUM,
                    RESP_PERSON_DATA_OWNER_CODE,
                    RESP_PERSON_ID,
                    COST_ESTIMATE_AMOUNT,
                    COST_ESTIMATE_DATE,
                    COST_ESTIMATE_RSN_CODE,
                    AREA_UNIT_NOTES_TXT,
                    SUPP_INFO_TXT,
                    CREATED_BY_USERID,
                    F_CREATED_DATE,
                    DATA_ORIG
                    )
            VALUES (S.WH_FA_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.COST_ESTIMATE_TYPE_CODE,
                    S.COST_ESTIMATE_AGN_CODE,
                    S.COST_ESTIMATE_SEQ_NUM,
                    S.RESP_PERSON_DATA_OWNER_CODE,
                    S.RESP_PERSON_ID,
                    S.COST_ESTIMATE_AMOUNT,
                    S.COST_ESTIMATE_DATE,
                    S.COST_ESTIMATE_RSN_CODE,
                    S.AREA_UNIT_NOTES_TXT,
                    S.SUPP_INFO_TXT,
                    S.CREATED_BY_USERID,
                    S.F_CREATED_DATE,
                    S.DATA_ORIG);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 10-reporting_db-ca_merge_area-sp.sql 
 */
/*************************************************************************************************
** ObjectName: CA_MERGE_AREA.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CA_AREA table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USER_ID to CREATED_BY_USERID.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[CA_MERGE_AREA] @CA_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_CA_AREA D
        USING (SELECT *
               FROM ETL_CA_AREA_VW
               WHERE CA_SUBM_ID = @CA_SUBM_ID) S
        ON (D.CA_AREA_ID = S.WH_CA_AREA_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.AREA_SEQ_NUM IS NOT NULL AND S.AREA_SEQ_NUM IS NOT NULL AND D.AREA_SEQ_NUM <> S.AREA_SEQ_NUM)
                    OR (D.AREA_SEQ_NUM IS NULL AND S.AREA_SEQ_NUM IS NOT NULL)
                    OR (D.AREA_SEQ_NUM IS NOT NULL AND S.AREA_SEQ_NUM IS NULL)
                    OR (D.FAC_WIDE_IND IS NOT NULL AND S.FAC_WIDE_IND IS NOT NULL AND D.FAC_WIDE_IND <> S.FAC_WIDE_IND)
                    OR (D.FAC_WIDE_IND IS NULL AND S.FAC_WIDE_IND IS NOT NULL)
                    OR (D.FAC_WIDE_IND IS NOT NULL AND S.FAC_WIDE_IND IS NULL)
                    OR (D.AREA_NAME IS NOT NULL AND S.AREA_NAME IS NOT NULL AND D.AREA_NAME <> S.AREA_NAME)
                    OR (D.AREA_NAME IS NULL AND S.AREA_NAME IS NOT NULL)
                    OR (D.AREA_NAME IS NOT NULL AND S.AREA_NAME IS NULL)
                    OR (D.AIR_REL_IND IS NOT NULL AND S.AIR_REL_IND IS NOT NULL AND D.AIR_REL_IND <> S.AIR_REL_IND)
                    OR (D.AIR_REL_IND IS NULL AND S.AIR_REL_IND IS NOT NULL)
                    OR (D.AIR_REL_IND IS NOT NULL AND S.AIR_REL_IND IS NULL)
                    OR (D.GROUNDWATER_REL_IND IS NOT NULL AND S.GROUNDWATER_REL_IND IS NOT NULL AND
                        D.GROUNDWATER_REL_IND <> S.GROUNDWATER_REL_IND)
                    OR (D.GROUNDWATER_REL_IND IS NULL AND S.GROUNDWATER_REL_IND IS NOT NULL)
                    OR (D.GROUNDWATER_REL_IND IS NOT NULL AND S.GROUNDWATER_REL_IND IS NULL)
                    OR (D.SOIL_REL_IND IS NOT NULL AND S.SOIL_REL_IND IS NOT NULL AND D.SOIL_REL_IND <> S.SOIL_REL_IND)
                    OR (D.SOIL_REL_IND IS NULL AND S.SOIL_REL_IND IS NOT NULL)
                    OR (D.SOIL_REL_IND IS NOT NULL AND S.SOIL_REL_IND IS NULL)
                    OR (D.SURFACE_WATER_REL_IND IS NOT NULL AND S.SURFACE_WATER_REL_IND IS NOT NULL AND
                        D.SURFACE_WATER_REL_IND <> S.SURFACE_WATER_REL_IND)
                    OR (D.SURFACE_WATER_REL_IND IS NULL AND S.SURFACE_WATER_REL_IND IS NOT NULL)
                    OR (D.SURFACE_WATER_REL_IND IS NOT NULL AND S.SURFACE_WATER_REL_IND IS NULL)
                    OR (D.REGULATED_UNIT_IND IS NOT NULL AND S.REGULATED_UNIT_IND IS NOT NULL AND
                        D.REGULATED_UNIT_IND <> S.REGULATED_UNIT_IND)
                    OR (D.REGULATED_UNIT_IND IS NULL AND S.REGULATED_UNIT_IND IS NOT NULL)
                    OR (D.REGULATED_UNIT_IND IS NOT NULL AND S.REGULATED_UNIT_IND IS NULL)
                    OR
                    (D.EPA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND S.EPA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND
                     D.EPA_RESP_PERSON_DATA_OWNER_CDE <> S.EPA_RESP_PERSON_DATA_OWNER_CDE)
                    OR (D.EPA_RESP_PERSON_DATA_OWNER_CDE IS NULL AND S.EPA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL)
                    OR (D.EPA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND S.EPA_RESP_PERSON_DATA_OWNER_CDE IS NULL)
                    OR (D.EPA_RESP_PERSON_ID IS NOT NULL AND S.EPA_RESP_PERSON_ID IS NOT NULL AND
                        D.EPA_RESP_PERSON_ID <> S.EPA_RESP_PERSON_ID)
                    OR (D.EPA_RESP_PERSON_ID IS NULL AND S.EPA_RESP_PERSON_ID IS NOT NULL)
                    OR (D.EPA_RESP_PERSON_ID IS NOT NULL AND S.EPA_RESP_PERSON_ID IS NULL)
                    OR
                    (D.STA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND S.STA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND
                     D.STA_RESP_PERSON_DATA_OWNER_CDE <> S.STA_RESP_PERSON_DATA_OWNER_CDE)
                    OR (D.STA_RESP_PERSON_DATA_OWNER_CDE IS NULL AND S.STA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL)
                    OR (D.STA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND S.STA_RESP_PERSON_DATA_OWNER_CDE IS NULL)
                    OR (D.STA_RESP_PERSON_ID IS NOT NULL AND S.STA_RESP_PERSON_ID IS NOT NULL AND
                        D.STA_RESP_PERSON_ID <> S.STA_RESP_PERSON_ID)
                    OR (D.STA_RESP_PERSON_ID IS NULL AND S.STA_RESP_PERSON_ID IS NOT NULL)
                    OR (D.STA_RESP_PERSON_ID IS NOT NULL AND S.STA_RESP_PERSON_ID IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR
                    (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NOT NULL AND
                     D.CREATED_BY_USERID <> S.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR
                    (D.A_CREATED_DATE IS NOT NULL AND S.A_CREATED_DATE IS NOT NULL AND
                     D.A_CREATED_DATE <> S.A_CREATED_DATE)
                    OR (D.A_CREATED_DATE IS NULL AND S.A_CREATED_DATE IS NOT NULL)
                    OR (D.A_CREATED_DATE IS NOT NULL AND S.A_CREATED_DATE IS NULL)
                    OR
                    (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NOT NULL AND D.DATA_ORIG <> S.DATA_ORIG)
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.AREA_SEQ_NUM                   = S.AREA_SEQ_NUM,
                D.FAC_WIDE_IND                   = S.FAC_WIDE_IND,
                D.AREA_NAME                      = S.AREA_NAME,
                D.AIR_REL_IND                    = S.AIR_REL_IND,
                D.GROUNDWATER_REL_IND            = S.GROUNDWATER_REL_IND,
                D.SOIL_REL_IND                   = S.SOIL_REL_IND,
                D.SURFACE_WATER_REL_IND          = S.SURFACE_WATER_REL_IND,
                D.REGULATED_UNIT_IND             = S.REGULATED_UNIT_IND,
                D.EPA_RESP_PERSON_DATA_OWNER_CDE = S.EPA_RESP_PERSON_DATA_OWNER_CDE,
                D.EPA_RESP_PERSON_ID             = S.EPA_RESP_PERSON_ID,
                D.STA_RESP_PERSON_DATA_OWNER_CDE = S.STA_RESP_PERSON_DATA_OWNER_CDE,
                D.STA_RESP_PERSON_ID             = S.STA_RESP_PERSON_ID,
                D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT,
                D.CREATED_BY_USERID             = S.CREATED_BY_USERID,
                D.A_CREATED_DATE                 = S.A_CREATED_DATE,
                D.DATA_ORIG                      = S.DATA_ORIG
        WHEN NOT MATCHED THEN
            INSERT (CA_FAC_SUBM_ID,
                    TRANS_CODE,
                    AREA_SEQ_NUM,
                    FAC_WIDE_IND,
                    AREA_NAME,
                    AIR_REL_IND,
                    GROUNDWATER_REL_IND,
                    SOIL_REL_IND,
                    SURFACE_WATER_REL_IND,
                    REGULATED_UNIT_IND,
                    EPA_RESP_PERSON_DATA_OWNER_CDE,
                    EPA_RESP_PERSON_ID,
                    STA_RESP_PERSON_DATA_OWNER_CDE,
                    STA_RESP_PERSON_ID,
                    SUPP_INFO_TXT,
                    CREATED_BY_USERID,
                    A_CREATED_DATE,
                    DATA_ORIG
                    )
            VALUES (S.WH_CA_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.AREA_SEQ_NUM,
                    S.FAC_WIDE_IND,
                    S.AREA_NAME,
                    S.AIR_REL_IND,
                    S.GROUNDWATER_REL_IND,
                    S.SOIL_REL_IND,
                    S.SURFACE_WATER_REL_IND,
                    S.REGULATED_UNIT_IND,
                    S.EPA_RESP_PERSON_DATA_OWNER_CDE,
                    S.EPA_RESP_PERSON_ID,
                    S.STA_RESP_PERSON_DATA_OWNER_CDE,
                    S.STA_RESP_PERSON_ID,
                    S.SUPP_INFO_TXT,
                    S.CREATED_BY_USERID,
                    S.A_CREATED_DATE,
                    S.DATA_ORIG);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 11-reporting_db-ca_merge_authority-sp.sql 
 */
/*************************************************************************************************
** ObjectName: CA_MERGE_AUTHORITY.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CA_AUTHORITY table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USER_ID to CREATED_BY_USERID.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[CA_MERGE_AUTHORITY] @CA_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_CA_AUTHORITY D
        USING (SELECT *
               FROM ETL_CA_AUTHORITY_VW
               WHERE CA_SUBM_ID = @CA_SUBM_ID) S
        ON (D.CA_AUTHORITY_ID = S.WH_CA_AUTHORITY_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NOT NULL AND D.ACT_LOC_CODE <> S.ACT_LOC_CODE)
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NULL)
                    OR (D.AUTHORITY_DATA_OWNER_CODE IS NOT NULL AND S.AUTHORITY_DATA_OWNER_CODE IS NOT NULL AND
                        D.AUTHORITY_DATA_OWNER_CODE <> S.AUTHORITY_DATA_OWNER_CODE)
                    OR (D.AUTHORITY_DATA_OWNER_CODE IS NULL AND S.AUTHORITY_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.AUTHORITY_DATA_OWNER_CODE IS NOT NULL AND S.AUTHORITY_DATA_OWNER_CODE IS NULL)
                    OR (D.AUTHORITY_TYPE_CODE IS NOT NULL AND S.AUTHORITY_TYPE_CODE IS NOT NULL AND
                        D.AUTHORITY_TYPE_CODE <> S.AUTHORITY_TYPE_CODE)
                    OR (D.AUTHORITY_TYPE_CODE IS NULL AND S.AUTHORITY_TYPE_CODE IS NOT NULL)
                    OR (D.AUTHORITY_TYPE_CODE IS NOT NULL AND S.AUTHORITY_TYPE_CODE IS NULL)
                    OR (D.AUTHORITY_AGN_CODE IS NOT NULL AND S.AUTHORITY_AGN_CODE IS NOT NULL AND
                        D.AUTHORITY_AGN_CODE <> S.AUTHORITY_AGN_CODE)
                    OR (D.AUTHORITY_AGN_CODE IS NULL AND S.AUTHORITY_AGN_CODE IS NOT NULL)
                    OR (D.AUTHORITY_AGN_CODE IS NOT NULL AND S.AUTHORITY_AGN_CODE IS NULL)
                    OR (D.AUTHORITY_EFFC_DATE IS NOT NULL AND S.AUTHORITY_EFFC_DATE IS NOT NULL AND
                        D.AUTHORITY_EFFC_DATE <> S.AUTHORITY_EFFC_DATE)
                    OR (D.AUTHORITY_EFFC_DATE IS NULL AND S.AUTHORITY_EFFC_DATE IS NOT NULL)
                    OR (D.AUTHORITY_EFFC_DATE IS NOT NULL AND S.AUTHORITY_EFFC_DATE IS NULL)
                    OR (D.ISSUE_DATE IS NOT NULL AND S.ISSUE_DATE IS NOT NULL AND D.ISSUE_DATE <> S.ISSUE_DATE)
                    OR (D.ISSUE_DATE IS NULL AND S.ISSUE_DATE IS NOT NULL)
                    OR (D.ISSUE_DATE IS NOT NULL AND S.ISSUE_DATE IS NULL)
                    OR (D.END_DATE IS NOT NULL AND S.END_DATE IS NOT NULL AND D.END_DATE <> S.END_DATE)
                    OR (D.END_DATE IS NULL AND S.END_DATE IS NOT NULL)
                    OR (D.END_DATE IS NOT NULL AND S.END_DATE IS NULL)
                    OR (D.ESTABLISHED_REPOSITORY_CODE IS NOT NULL AND S.ESTABLISHED_REPOSITORY_CODE IS NOT NULL AND
                        D.ESTABLISHED_REPOSITORY_CODE <> S.ESTABLISHED_REPOSITORY_CODE)
                    OR (D.ESTABLISHED_REPOSITORY_CODE IS NULL AND S.ESTABLISHED_REPOSITORY_CODE IS NOT NULL)
                    OR (D.ESTABLISHED_REPOSITORY_CODE IS NOT NULL AND S.ESTABLISHED_REPOSITORY_CODE IS NULL)
                    OR (D.RESP_LEAD_PROG_IDEN IS NOT NULL AND S.RESP_LEAD_PROG_IDEN IS NOT NULL AND
                        D.RESP_LEAD_PROG_IDEN <> S.RESP_LEAD_PROG_IDEN)
                    OR (D.RESP_LEAD_PROG_IDEN IS NULL AND S.RESP_LEAD_PROG_IDEN IS NOT NULL)
                    OR (D.RESP_LEAD_PROG_IDEN IS NOT NULL AND S.RESP_LEAD_PROG_IDEN IS NULL)
                    OR
                    (D.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NOT NULL AND S.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NOT NULL AND
                     D.AUTHORITY_SUBORG_DATA_OWNR_CDE <> S.AUTHORITY_SUBORG_DATA_OWNR_CDE)
                    OR (D.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NULL AND S.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NOT NULL)
                    OR (D.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NOT NULL AND S.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NULL)
                    OR (D.AUTHORITY_SUBORG_CODE IS NOT NULL AND S.AUTHORITY_SUBORG_CODE IS NOT NULL AND
                        D.AUTHORITY_SUBORG_CODE <> S.AUTHORITY_SUBORG_CODE)
                    OR (D.AUTHORITY_SUBORG_CODE IS NULL AND S.AUTHORITY_SUBORG_CODE IS NOT NULL)
                    OR (D.AUTHORITY_SUBORG_CODE IS NOT NULL AND S.AUTHORITY_SUBORG_CODE IS NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND
                        D.RESP_PERSON_DATA_OWNER_CODE <> S.RESP_PERSON_DATA_OWNER_CODE)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NULL)
                    OR
                    (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NOT NULL AND
                     D.RESP_PERSON_ID <> S.RESP_PERSON_ID)
                    OR (D.RESP_PERSON_ID IS NULL AND S.RESP_PERSON_ID IS NOT NULL)
                    OR (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR
                    (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NOT NULL AND
                     D.CREATED_BY_USERID <> S.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR
                    (D.A_CREATED_DATE IS NOT NULL AND S.A_CREATED_DATE IS NOT NULL AND
                     D.A_CREATED_DATE <> S.A_CREATED_DATE)
                    OR (D.A_CREATED_DATE IS NULL AND S.A_CREATED_DATE IS NOT NULL)
                    OR (D.A_CREATED_DATE IS NOT NULL AND S.A_CREATED_DATE IS NULL)
                    OR
                    (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NOT NULL AND D.DATA_ORIG <> S.DATA_ORIG)
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.ACT_LOC_CODE                   = S.ACT_LOC_CODE,
                D.AUTHORITY_DATA_OWNER_CODE      = S.AUTHORITY_DATA_OWNER_CODE,
                D.AUTHORITY_TYPE_CODE            = S.AUTHORITY_TYPE_CODE,
                D.AUTHORITY_AGN_CODE             = S.AUTHORITY_AGN_CODE,
                D.AUTHORITY_EFFC_DATE            = S.AUTHORITY_EFFC_DATE,
                D.ISSUE_DATE                     = S.ISSUE_DATE,
                D.END_DATE                       = S.END_DATE,
                D.ESTABLISHED_REPOSITORY_CODE    = S.ESTABLISHED_REPOSITORY_CODE,
                D.RESP_LEAD_PROG_IDEN            = S.RESP_LEAD_PROG_IDEN,
                D.AUTHORITY_SUBORG_DATA_OWNR_CDE = S.AUTHORITY_SUBORG_DATA_OWNR_CDE,
                D.AUTHORITY_SUBORG_CODE          = S.AUTHORITY_SUBORG_CODE,
                D.RESP_PERSON_DATA_OWNER_CODE    = S.RESP_PERSON_DATA_OWNER_CODE,
                D.RESP_PERSON_ID                 = S.RESP_PERSON_ID,
                D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT,
                D.CREATED_BY_USERID             = S.CREATED_BY_USERID,
                D.A_CREATED_DATE                 = S.A_CREATED_DATE,
                D.DATA_ORIG                      = S.DATA_ORIG
        WHEN NOT MATCHED THEN
            INSERT (CA_FAC_SUBM_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    AUTHORITY_DATA_OWNER_CODE,
                    AUTHORITY_TYPE_CODE,
                    AUTHORITY_AGN_CODE,
                    AUTHORITY_EFFC_DATE,
                    ISSUE_DATE,
                    END_DATE,
                    ESTABLISHED_REPOSITORY_CODE,
                    RESP_LEAD_PROG_IDEN,
                    AUTHORITY_SUBORG_DATA_OWNR_CDE,
                    AUTHORITY_SUBORG_CODE,
                    RESP_PERSON_DATA_OWNER_CODE,
                    RESP_PERSON_ID,
                    SUPP_INFO_TXT,
                    CREATED_BY_USERID,
                    A_CREATED_DATE,
                    DATA_ORIG)
            VALUES (S.WH_CA_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.AUTHORITY_DATA_OWNER_CODE,
                    S.AUTHORITY_TYPE_CODE,
                    S.AUTHORITY_AGN_CODE,
                    S.AUTHORITY_EFFC_DATE,
                    S.ISSUE_DATE,
                    S.END_DATE,
                    S.ESTABLISHED_REPOSITORY_CODE,
                    S.RESP_LEAD_PROG_IDEN,
                    S.AUTHORITY_SUBORG_DATA_OWNR_CDE,
                    S.AUTHORITY_SUBORG_CODE,
                    S.RESP_PERSON_DATA_OWNER_CODE,
                    S.RESP_PERSON_ID,
                    S.SUPP_INFO_TXT,
                    S.CREATED_BY_USERID,
                    S.A_CREATED_DATE,
                    S.DATA_ORIG);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 12-reporting_db-ca_merge_event-sp.sql 
 */
/*************************************************************************************************
** ObjectName: CA_MERGE_EVENT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CA_EVENT table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USER_ID to CREATED_BY_USERID.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[CA_MERGE_EVENT] @CA_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_CA_EVENT D
        USING (SELECT *
               FROM ETL_CA_EVENT_VW
               WHERE CA_SUBM_ID = @CA_SUBM_ID) S
        ON (D.CA_EVENT_ID = S.WH_CA_EVENT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NOT NULL AND D.ACT_LOC_CODE <> S.ACT_LOC_CODE)
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NULL)
                    OR
                    (D.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL AND S.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL AND
                     D.CORCT_ACT_EVENT_DATA_OWNER_CDE <> S.CORCT_ACT_EVENT_DATA_OWNER_CDE)
                    OR (D.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NULL AND S.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL)
                    OR (D.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL AND S.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NULL)
                    OR (D.CORCT_ACT_EVENT_CODE IS NOT NULL AND S.CORCT_ACT_EVENT_CODE IS NOT NULL AND
                        D.CORCT_ACT_EVENT_CODE <> S.CORCT_ACT_EVENT_CODE)
                    OR (D.CORCT_ACT_EVENT_CODE IS NULL AND S.CORCT_ACT_EVENT_CODE IS NOT NULL)
                    OR (D.CORCT_ACT_EVENT_CODE IS NOT NULL AND S.CORCT_ACT_EVENT_CODE IS NULL)
                    OR
                    (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NOT NULL AND
                     D.EVENT_AGN_CODE <> S.EVENT_AGN_CODE)
                    OR (D.EVENT_AGN_CODE IS NULL AND S.EVENT_AGN_CODE IS NOT NULL)
                    OR (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NULL)
                    OR
                    (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NOT NULL AND D.EVENT_SEQ_NUM <> S.EVENT_SEQ_NUM)
                    OR (D.EVENT_SEQ_NUM IS NULL AND S.EVENT_SEQ_NUM IS NOT NULL)
                    OR (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NULL)
                    OR (D.ACTL_DATE IS NOT NULL AND S.ACTL_DATE IS NOT NULL AND D.ACTL_DATE <> S.ACTL_DATE)
                    OR (D.ACTL_DATE IS NULL AND S.ACTL_DATE IS NOT NULL)
                    OR (D.ACTL_DATE IS NOT NULL AND S.ACTL_DATE IS NULL)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND S.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND
                        D.ORIGINAL_SCHEDULE_DATE <> S.ORIGINAL_SCHEDULE_DATE)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NULL AND S.ORIGINAL_SCHEDULE_DATE IS NOT NULL)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND S.ORIGINAL_SCHEDULE_DATE IS NULL)
                    OR (D.NEW_SCHEDULE_DATE IS NOT NULL AND S.NEW_SCHEDULE_DATE IS NOT NULL AND
                        D.NEW_SCHEDULE_DATE <> S.NEW_SCHEDULE_DATE)
                    OR (D.NEW_SCHEDULE_DATE IS NULL AND S.NEW_SCHEDULE_DATE IS NOT NULL)
                    OR (D.NEW_SCHEDULE_DATE IS NOT NULL AND S.NEW_SCHEDULE_DATE IS NULL)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND
                        D.EVENT_SUBORG_DATA_OWNER_CODE <> S.EVENT_SUBORG_DATA_OWNER_CODE)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NULL)
                    OR (D.EVENT_SUBORG_CODE IS NOT NULL AND S.EVENT_SUBORG_CODE IS NOT NULL AND
                        D.EVENT_SUBORG_CODE <> S.EVENT_SUBORG_CODE)
                    OR (D.EVENT_SUBORG_CODE IS NULL AND S.EVENT_SUBORG_CODE IS NOT NULL)
                    OR (D.EVENT_SUBORG_CODE IS NOT NULL AND S.EVENT_SUBORG_CODE IS NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND
                        D.RESP_PERSON_DATA_OWNER_CODE <> S.RESP_PERSON_DATA_OWNER_CODE)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NULL)
                    OR
                    (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NOT NULL AND
                     D.RESP_PERSON_ID <> S.RESP_PERSON_ID)
                    OR (D.RESP_PERSON_ID IS NULL AND S.RESP_PERSON_ID IS NOT NULL)
                    OR (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR
                    (D.PUBLIC_SUPP_INFO_TXT IS NOT NULL AND S.PUBLIC_SUPP_INFO_TXT IS NOT NULL AND
                     D.PUBLIC_SUPP_INFO_TXT <> S.PUBLIC_SUPP_INFO_TXT)
                    OR (D.PUBLIC_SUPP_INFO_TXT IS NULL AND S.PUBLIC_SUPP_INFO_TXT IS NOT NULL)
                    OR (D.PUBLIC_SUPP_INFO_TXT IS NOT NULL AND S.PUBLIC_SUPP_INFO_TXT IS NULL)
                    OR
                    (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NOT NULL AND
                     D.CREATED_BY_USERID <> S.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR
                    (D.A_CREATED_DATE IS NOT NULL AND S.A_CREATED_DATE IS NOT NULL AND
                     D.A_CREATED_DATE <> S.A_CREATED_DATE)
                    OR (D.A_CREATED_DATE IS NULL AND S.A_CREATED_DATE IS NOT NULL)
                    OR (D.A_CREATED_DATE IS NOT NULL AND S.A_CREATED_DATE IS NULL)
                    OR
                    (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NOT NULL AND D.DATA_ORIG <> S.DATA_ORIG)
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.ACT_LOC_CODE                   = S.ACT_LOC_CODE,
                D.CORCT_ACT_EVENT_DATA_OWNER_CDE = S.CORCT_ACT_EVENT_DATA_OWNER_CDE,
                D.CORCT_ACT_EVENT_CODE           = S.CORCT_ACT_EVENT_CODE,
                D.EVENT_AGN_CODE                 = S.EVENT_AGN_CODE,
                D.EVENT_SEQ_NUM                  = S.EVENT_SEQ_NUM,
                D.ACTL_DATE                      = S.ACTL_DATE,
                D.ORIGINAL_SCHEDULE_DATE         = S.ORIGINAL_SCHEDULE_DATE,
                D.NEW_SCHEDULE_DATE              = S.NEW_SCHEDULE_DATE,
                D.EVENT_SUBORG_DATA_OWNER_CODE   = S.EVENT_SUBORG_DATA_OWNER_CODE,
                D.EVENT_SUBORG_CODE              = S.EVENT_SUBORG_CODE,
                D.RESP_PERSON_DATA_OWNER_CODE    = S.RESP_PERSON_DATA_OWNER_CODE,
                D.RESP_PERSON_ID                 = S.RESP_PERSON_ID,
                D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT,
                D.PUBLIC_SUPP_INFO_TXT           = S.PUBLIC_SUPP_INFO_TXT,
                D.CREATED_BY_USERID             = S.CREATED_BY_USERID,
                D.A_CREATED_DATE                 = S.A_CREATED_DATE,
                D.DATA_ORIG                      = S.DATA_ORIG

        WHEN NOT MATCHED THEN
            INSERT (CA_FAC_SUBM_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    CORCT_ACT_EVENT_DATA_OWNER_CDE,
                    CORCT_ACT_EVENT_CODE,
                    EVENT_AGN_CODE,
                    EVENT_SEQ_NUM,
                    ACTL_DATE,
                    ORIGINAL_SCHEDULE_DATE,
                    NEW_SCHEDULE_DATE,
                    EVENT_SUBORG_DATA_OWNER_CODE,
                    EVENT_SUBORG_CODE,
                    RESP_PERSON_DATA_OWNER_CODE,
                    RESP_PERSON_ID,
                    SUPP_INFO_TXT,
                    PUBLIC_SUPP_INFO_TXT,
                    CREATED_BY_USERID,
                    A_CREATED_DATE,
                    DATA_ORIG)
            VALUES (S.WH_CA_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.CORCT_ACT_EVENT_DATA_OWNER_CDE,
                    S.CORCT_ACT_EVENT_CODE,
                    S.EVENT_AGN_CODE,
                    S.EVENT_SEQ_NUM,
                    S.ACTL_DATE,
                    S.ORIGINAL_SCHEDULE_DATE,
                    S.NEW_SCHEDULE_DATE,
                    S.EVENT_SUBORG_DATA_OWNER_CODE,
                    S.EVENT_SUBORG_CODE,
                    S.RESP_PERSON_DATA_OWNER_CODE,
                    S.RESP_PERSON_ID,
                    S.SUPP_INFO_TXT,
                    S.PUBLIC_SUPP_INFO_TXT,
                    S.CREATED_BY_USERID,
                    S.A_CREATED_DATE,
                    S.DATA_ORIG);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 13-reporting_db-prm_merge_series-sp.sql 
 */
/*************************************************************************************************
** ObjectName: PRM_MERGE_SERIES.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_PRM_SERIES table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  04/24/2020   Windsor     Upgraded to 5.8 -- added ACTIVE_SERIES_IND, CREATED_BY_USERID and
**                           P_CREATED_DATE.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USER_ID to CREATED_BY_USERID.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[PRM_MERGE_SERIES] @PRM_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_PRM_SERIES D
        USING (SELECT *
               FROM ETL_PRM_SERIES_VW
               WHERE PRM_SUBM_ID = @PRM_SUBM_ID) S
        ON (D.PRM_SERIES_ID = S.WH_PRM_SERIES_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.PERMIT_SERIES_SEQ_NUM IS NOT NULL AND S.PERMIT_SERIES_SEQ_NUM IS NOT NULL AND
                        D.PERMIT_SERIES_SEQ_NUM <> S.PERMIT_SERIES_SEQ_NUM)
                    OR (D.PERMIT_SERIES_SEQ_NUM IS NULL AND S.PERMIT_SERIES_SEQ_NUM IS NOT NULL)
                    OR (D.PERMIT_SERIES_SEQ_NUM IS NOT NULL AND S.PERMIT_SERIES_SEQ_NUM IS NULL)
                    OR (D.PERMIT_SERIES_NAME IS NOT NULL AND S.PERMIT_SERIES_NAME IS NOT NULL AND
                        D.PERMIT_SERIES_NAME <> S.PERMIT_SERIES_NAME)
                    OR (D.PERMIT_SERIES_NAME IS NULL AND S.PERMIT_SERIES_NAME IS NOT NULL)
                    OR (D.PERMIT_SERIES_NAME IS NOT NULL AND S.PERMIT_SERIES_NAME IS NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND
                        D.RESP_PERSON_DATA_OWNER_CODE <> S.RESP_PERSON_DATA_OWNER_CODE)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NULL)
                    OR
                    (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NOT NULL AND
                     D.RESP_PERSON_ID <> S.RESP_PERSON_ID)
                    OR (D.RESP_PERSON_ID IS NULL AND S.RESP_PERSON_ID IS NOT NULL)
                    OR (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR
                    (D.ACTIVE_SERIES_IND IS NOT NULL AND S.ACTIVE_SERIES_IND IS NOT NULL AND
                     D.ACTIVE_SERIES_IND <> S.ACTIVE_SERIES_IND)
                    OR (D.ACTIVE_SERIES_IND IS NULL AND S.ACTIVE_SERIES_IND IS NOT NULL)
                    OR (D.ACTIVE_SERIES_IND IS NOT NULL AND S.ACTIVE_SERIES_IND IS NULL)
                    OR
                    (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NOT NULL AND
                     D.CREATED_BY_USERID <> S.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR
                    (D.P_CREATED_DATE IS NOT NULL AND S.P_CREATED_DATE IS NOT NULL AND
                     D.P_CREATED_DATE <> S.P_CREATED_DATE)
                    OR (D.P_CREATED_DATE IS NULL AND S.P_CREATED_DATE IS NOT NULL)
                    OR (D.P_CREATED_DATE IS NOT NULL AND S.P_CREATED_DATE IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE                  = S.TRANS_CODE,
                D.PERMIT_SERIES_SEQ_NUM       = S.PERMIT_SERIES_SEQ_NUM,
                D.PERMIT_SERIES_NAME          = S.PERMIT_SERIES_NAME,
                D.RESP_PERSON_DATA_OWNER_CODE = S.RESP_PERSON_DATA_OWNER_CODE,
                D.RESP_PERSON_ID              = S.RESP_PERSON_ID,
                D.SUPP_INFO_TXT               = S.SUPP_INFO_TXT,
                D.ACTIVE_SERIES_IND           = S.ACTIVE_SERIES_IND,
                D.CREATED_BY_USERID          = S.CREATED_BY_USERID,
                D.P_CREATED_DATE              = S.P_CREATED_DATE
        WHEN NOT MATCHED THEN
            INSERT (PRM_FAC_SUBM_ID,
                    TRANS_CODE,
                    PERMIT_SERIES_SEQ_NUM,
                    PERMIT_SERIES_NAME,
                    RESP_PERSON_DATA_OWNER_CODE,
                    RESP_PERSON_ID,
                    SUPP_INFO_TXT,
                    ACTIVE_SERIES_IND,
                    CREATED_BY_USERID,
                    P_CREATED_DATE)
            VALUES (S.WH_PRM_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.PERMIT_SERIES_SEQ_NUM,
                    S.PERMIT_SERIES_NAME,
                    S.RESP_PERSON_DATA_OWNER_CODE,
                    S.RESP_PERSON_ID,
                    S.SUPP_INFO_TXT,
                    S.ACTIVE_SERIES_IND,
                    S.CREATED_BY_USERID,
                    S.P_CREATED_DATE);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 14-reporting_db-prm_merge_event-sp.sql 
 */
/*************************************************************************************************
** ObjectName: PRM_MERGE_EVENT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_PRM_EVENT table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  04/24/2020   Windsor     Upgraded to 5.8 -- added CREATED_BY_USERID and P_CREATED_DATE.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USER_ID to CREATED_BY_USERID.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[PRM_MERGE_EVENT] @PRM_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_PRM_EVENT D
        USING (SELECT *
               FROM ETL_PRM_EVENT_VW
               WHERE PRM_SUBM_ID = @PRM_SUBM_ID) S
        ON (D.PRM_EVENT_ID = S.WH_PRM_EVENT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NOT NULL AND D.ACT_LOC_CODE <> S.ACT_LOC_CODE)
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NULL)
                    OR (D.PERMIT_EVENT_DATA_OWNER_CODE IS NOT NULL AND S.PERMIT_EVENT_DATA_OWNER_CODE IS NOT NULL AND
                        D.PERMIT_EVENT_DATA_OWNER_CODE <> S.PERMIT_EVENT_DATA_OWNER_CODE)
                    OR (D.PERMIT_EVENT_DATA_OWNER_CODE IS NULL AND S.PERMIT_EVENT_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.PERMIT_EVENT_DATA_OWNER_CODE IS NOT NULL AND S.PERMIT_EVENT_DATA_OWNER_CODE IS NULL)
                    OR (D.PERMIT_EVENT_CODE IS NOT NULL AND S.PERMIT_EVENT_CODE IS NOT NULL AND
                        D.PERMIT_EVENT_CODE <> S.PERMIT_EVENT_CODE)
                    OR (D.PERMIT_EVENT_CODE IS NULL AND S.PERMIT_EVENT_CODE IS NOT NULL)
                    OR (D.PERMIT_EVENT_CODE IS NOT NULL AND S.PERMIT_EVENT_CODE IS NULL)
                    OR
                    (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NOT NULL AND
                     D.EVENT_AGN_CODE <> S.EVENT_AGN_CODE)
                    OR (D.EVENT_AGN_CODE IS NULL AND S.EVENT_AGN_CODE IS NOT NULL)
                    OR (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NULL)
                    OR
                    (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NOT NULL AND D.EVENT_SEQ_NUM <> S.EVENT_SEQ_NUM)
                    OR (D.EVENT_SEQ_NUM IS NULL AND S.EVENT_SEQ_NUM IS NOT NULL)
                    OR (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NULL)
                    OR (D.ACTL_DATE IS NOT NULL AND S.ACTL_DATE IS NOT NULL AND D.ACTL_DATE <> S.ACTL_DATE)
                    OR (D.ACTL_DATE IS NULL AND S.ACTL_DATE IS NOT NULL)
                    OR (D.ACTL_DATE IS NOT NULL AND S.ACTL_DATE IS NULL)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND S.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND
                        D.ORIGINAL_SCHEDULE_DATE <> S.ORIGINAL_SCHEDULE_DATE)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NULL AND S.ORIGINAL_SCHEDULE_DATE IS NOT NULL)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND S.ORIGINAL_SCHEDULE_DATE IS NULL)
                    OR (D.NEW_SCHEDULE_DATE IS NOT NULL AND S.NEW_SCHEDULE_DATE IS NOT NULL AND
                        D.NEW_SCHEDULE_DATE <> S.NEW_SCHEDULE_DATE)
                    OR (D.NEW_SCHEDULE_DATE IS NULL AND S.NEW_SCHEDULE_DATE IS NOT NULL)
                    OR (D.NEW_SCHEDULE_DATE IS NOT NULL AND S.NEW_SCHEDULE_DATE IS NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND
                        D.RESP_PERSON_DATA_OWNER_CODE <> S.RESP_PERSON_DATA_OWNER_CODE)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NULL)
                    OR
                    (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NOT NULL AND
                     D.RESP_PERSON_ID <> S.RESP_PERSON_ID)
                    OR (D.RESP_PERSON_ID IS NULL AND S.RESP_PERSON_ID IS NOT NULL)
                    OR (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NULL)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND
                        D.EVENT_SUBORG_DATA_OWNER_CODE <> S.EVENT_SUBORG_DATA_OWNER_CODE)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NULL)
                    OR (D.EVENT_SUBORG_CODE IS NOT NULL AND S.EVENT_SUBORG_CODE IS NOT NULL AND
                        D.EVENT_SUBORG_CODE <> S.EVENT_SUBORG_CODE)
                    OR (D.EVENT_SUBORG_CODE IS NULL AND S.EVENT_SUBORG_CODE IS NOT NULL)
                    OR (D.EVENT_SUBORG_CODE IS NOT NULL AND S.EVENT_SUBORG_CODE IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR
                    (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NOT NULL AND
                     D.CREATED_BY_USERID <> S.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR
                    (D.P_CREATED_DATE IS NOT NULL AND S.P_CREATED_DATE IS NOT NULL AND
                     D.P_CREATED_DATE <> S.P_CREATED_DATE)
                    OR (D.P_CREATED_DATE IS NULL AND S.P_CREATED_DATE IS NOT NULL)
                    OR (D.P_CREATED_DATE IS NOT NULL AND S.P_CREATED_DATE IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE                   = S.TRANS_CODE,
                D.ACT_LOC_CODE                 = S.ACT_LOC_CODE,
                D.PERMIT_EVENT_DATA_OWNER_CODE = S.PERMIT_EVENT_DATA_OWNER_CODE,
                D.PERMIT_EVENT_CODE            = S.PERMIT_EVENT_CODE,
                D.EVENT_AGN_CODE               = S.EVENT_AGN_CODE,
                D.EVENT_SEQ_NUM                = S.EVENT_SEQ_NUM,
                D.ACTL_DATE                    = S.ACTL_DATE,
                D.ORIGINAL_SCHEDULE_DATE       = S.ORIGINAL_SCHEDULE_DATE,
                D.NEW_SCHEDULE_DATE            = S.NEW_SCHEDULE_DATE,
                D.RESP_PERSON_DATA_OWNER_CODE  = S.RESP_PERSON_DATA_OWNER_CODE,
                D.RESP_PERSON_ID               = S.RESP_PERSON_ID,
                D.EVENT_SUBORG_DATA_OWNER_CODE = S.EVENT_SUBORG_DATA_OWNER_CODE,
                D.EVENT_SUBORG_CODE            = S.EVENT_SUBORG_CODE,
                D.SUPP_INFO_TXT                = S.SUPP_INFO_TXT,
                D.CREATED_BY_USERID           = S.CREATED_BY_USERID,
                D.P_CREATED_DATE               = S.P_CREATED_DATE
        WHEN NOT MATCHED THEN
            INSERT (PRM_SERIES_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    PERMIT_EVENT_DATA_OWNER_CODE,
                    PERMIT_EVENT_CODE,
                    EVENT_AGN_CODE,
                    EVENT_SEQ_NUM,
                    ACTL_DATE,
                    ORIGINAL_SCHEDULE_DATE,
                    NEW_SCHEDULE_DATE,
                    RESP_PERSON_DATA_OWNER_CODE,
                    RESP_PERSON_ID,
                    EVENT_SUBORG_DATA_OWNER_CODE,
                    EVENT_SUBORG_CODE,
                    SUPP_INFO_TXT,
                    CREATED_BY_USERID,
                    P_CREATED_DATE)
            VALUES (S.WH_PRM_SERIES_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.PERMIT_EVENT_DATA_OWNER_CODE,
                    S.PERMIT_EVENT_CODE,
                    S.EVENT_AGN_CODE,
                    S.EVENT_SEQ_NUM,
                    S.ACTL_DATE,
                    S.ORIGINAL_SCHEDULE_DATE,
                    S.NEW_SCHEDULE_DATE,
                    S.RESP_PERSON_DATA_OWNER_CODE,
                    S.RESP_PERSON_ID,
                    S.EVENT_SUBORG_DATA_OWNER_CODE,
                    S.EVENT_SUBORG_CODE,
                    S.SUPP_INFO_TXT,
                    S.CREATED_BY_USERID,
                    S.P_CREATED_DATE);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 15-reporting_db-prm_merge_mod_event-sp.sql 
 */
/*************************************************************************************************
** ObjectName: PRM_MERGE_MOD_EVENT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_PRM_MOD_EVENT table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  04/24/2020   Windsor     Created.
**  02/14/2021   Windsor     Renamed column MOD_EVENT_DATA_OWNER_CDE to MOD_EVENT_DATA_OWNER_CODE.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[PRM_MERGE_MOD_EVENT] @PRM_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END
    BEGIN TRY
        MERGE INTO RCRA_PRM_MOD_EVENT D
        USING (SELECT *
               FROM ETL_PRM_MOD_EVENT_VW
               WHERE PRM_SUBM_ID = @PRM_SUBM_ID) S
        ON (D.PRM_MOD_EVENT_ID = S.WH_PRM_MOD_EVENT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR
                    (D.MOD_HANDLER_ID IS NOT NULL AND S.MOD_HANDLER_ID IS NOT NULL AND
                     D.MOD_HANDLER_ID <> S.MOD_HANDLER_ID)
                    OR (D.MOD_HANDLER_ID IS NULL AND S.MOD_HANDLER_ID IS NOT NULL)
                    OR (D.MOD_HANDLER_ID IS NOT NULL AND S.MOD_HANDLER_ID IS NULL)
                    OR
                    (D.MOD_ACT_LOC_CODE IS NOT NULL AND S.MOD_ACT_LOC_CODE IS NOT NULL AND
                     D.MOD_ACT_LOC_CODE <> S.MOD_ACT_LOC_CODE)
                    OR (D.MOD_ACT_LOC_CODE IS NULL AND S.MOD_ACT_LOC_CODE IS NOT NULL)
                    OR (D.MOD_ACT_LOC_CODE IS NOT NULL AND S.MOD_ACT_LOC_CODE IS NULL)
                    OR
                    (D.MOD_SERIES_SEQ_NUM IS NOT NULL AND S.MOD_SERIES_SEQ_NUM IS NOT NULL AND
                     D.MOD_SERIES_SEQ_NUM <> S.MOD_SERIES_SEQ_NUM)
                    OR (D.MOD_SERIES_SEQ_NUM IS NULL AND S.MOD_SERIES_SEQ_NUM IS NOT NULL)
                    OR (D.MOD_SERIES_SEQ_NUM IS NOT NULL AND S.MOD_SERIES_SEQ_NUM IS NULL)
                    OR
                    (D.MOD_EVENT_SEQ_NUM IS NOT NULL AND S.MOD_EVENT_SEQ_NUM IS NOT NULL AND
                     D.MOD_EVENT_SEQ_NUM <> S.MOD_EVENT_SEQ_NUM)
                    OR (D.MOD_EVENT_SEQ_NUM IS NULL AND S.MOD_EVENT_SEQ_NUM IS NOT NULL)
                    OR (D.MOD_EVENT_SEQ_NUM IS NOT NULL AND S.MOD_EVENT_SEQ_NUM IS NULL)
                    OR
                    (D.MOD_EVENT_AGN_CODE IS NOT NULL AND S.MOD_EVENT_AGN_CODE IS NOT NULL AND
                     D.MOD_EVENT_AGN_CODE <> S.MOD_EVENT_AGN_CODE)
                    OR (D.MOD_EVENT_AGN_CODE IS NULL AND S.MOD_EVENT_AGN_CODE IS NOT NULL)
                    OR (D.MOD_EVENT_AGN_CODE IS NOT NULL AND S.MOD_EVENT_AGN_CODE IS NULL)
                    OR
                    (D.MOD_EVENT_DATA_OWNER_CODE IS NOT NULL AND S.MOD_EVENT_DATA_OWNER_CODE IS NOT NULL AND
                     D.MOD_EVENT_DATA_OWNER_CODE <> S.MOD_EVENT_DATA_OWNER_CODE)
                    OR (D.MOD_EVENT_DATA_OWNER_CODE IS NULL AND S.MOD_EVENT_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.MOD_EVENT_DATA_OWNER_CODE IS NOT NULL AND S.MOD_EVENT_DATA_OWNER_CODE IS NULL)
                    OR
                    (D.MOD_EVENT_CODE IS NOT NULL AND S.MOD_EVENT_CODE IS NOT NULL AND
                     D.MOD_EVENT_CODE <> S.MOD_EVENT_CODE)
                    OR (D.MOD_EVENT_CODE IS NULL AND S.MOD_EVENT_CODE IS NOT NULL)
                    OR (D.MOD_EVENT_CODE IS NOT NULL AND S.MOD_EVENT_CODE IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE               = S.TRANS_CODE,
                D.MOD_HANDLER_ID           = S.MOD_HANDLER_ID,
                D.MOD_ACT_LOC_CODE         = S.MOD_ACT_LOC_CODE,
                D.MOD_SERIES_SEQ_NUM       = S.MOD_SERIES_SEQ_NUM,
                D.MOD_EVENT_SEQ_NUM        = S.MOD_EVENT_SEQ_NUM,
                D.MOD_EVENT_AGN_CODE       = S.MOD_EVENT_AGN_CODE,
                D.MOD_EVENT_DATA_OWNER_CODE = S.MOD_EVENT_DATA_OWNER_CODE,
                D.MOD_EVENT_CODE           = S.MOD_EVENT_CODE
        WHEN NOT MATCHED THEN
            INSERT (PRM_EVENT_ID,
                    TRANS_CODE,
                    MOD_HANDLER_ID,
                    MOD_ACT_LOC_CODE,
                    MOD_SERIES_SEQ_NUM,
                    MOD_EVENT_SEQ_NUM,
                    MOD_EVENT_AGN_CODE,
                    MOD_EVENT_DATA_OWNER_CODE,
                    MOD_EVENT_CODE)
            VALUES (S.WH_PRM_EVENT_ID,
                    S.TRANS_CODE,
                    S.MOD_HANDLER_ID,
                    S.MOD_ACT_LOC_CODE,
                    S.MOD_SERIES_SEQ_NUM,
                    S.MOD_EVENT_SEQ_NUM,
                    S.MOD_EVENT_AGN_CODE,
                    S.MOD_EVENT_DATA_OWNER_CODE,
                    S.MOD_EVENT_CODE);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 16-reporting_db-prm_merge_unit-sp.sql 
 */
/*************************************************************************************************
** ObjectName: PRM_MERGE_UNIT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_PRM_UNIT table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  04/24/2020   Windsor     Upgraded to 5.8 -- added ACTIVE_UNIT_IND, CREATED_BY_USER_ID and
**                           P_CREATED_DATE.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USER_ID to CREATED_BY_USERID.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[PRM_MERGE_UNIT] @PRM_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_PRM_UNIT D
        USING (SELECT *
               FROM ETL_PRM_UNIT_VW
               WHERE PRM_SUBM_ID = @PRM_SUBM_ID) S
        ON (D.PRM_UNIT_ID = S.WH_PRM_UNIT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NOT NULL AND S.PERMIT_UNIT_SEQ_NUM IS NOT NULL AND
                        D.PERMIT_UNIT_SEQ_NUM <> S.PERMIT_UNIT_SEQ_NUM)
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NULL AND S.PERMIT_UNIT_SEQ_NUM IS NOT NULL)
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NOT NULL AND S.PERMIT_UNIT_SEQ_NUM IS NULL)
                    OR
                    (D.PERMIT_UNIT_NAME IS NOT NULL AND S.PERMIT_UNIT_NAME IS NOT NULL AND
                     D.PERMIT_UNIT_NAME <> S.PERMIT_UNIT_NAME)
                    OR (D.PERMIT_UNIT_NAME IS NULL AND S.PERMIT_UNIT_NAME IS NOT NULL)
                    OR (D.PERMIT_UNIT_NAME IS NOT NULL AND S.PERMIT_UNIT_NAME IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR
                    (D.ACTIVE_UNIT_IND IS NOT NULL AND S.ACTIVE_UNIT_IND IS NOT NULL AND
                     D.ACTIVE_UNIT_IND <> S.ACTIVE_UNIT_IND)
                    OR (D.ACTIVE_UNIT_IND IS NULL AND S.ACTIVE_UNIT_IND IS NOT NULL)
                    OR (D.ACTIVE_UNIT_IND IS NOT NULL AND S.ACTIVE_UNIT_IND IS NULL)
                    OR
                    (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NOT NULL AND
                     D.CREATED_BY_USERID <> S.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR
                    (D.P_CREATED_DATE IS NOT NULL AND S.P_CREATED_DATE IS NOT NULL AND
                     D.P_CREATED_DATE <> S.P_CREATED_DATE)
                    OR (D.P_CREATED_DATE IS NULL AND S.P_CREATED_DATE IS NOT NULL)
                    OR (D.P_CREATED_DATE IS NOT NULL AND S.P_CREATED_DATE IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE          = S.TRANS_CODE,
                D.PERMIT_UNIT_SEQ_NUM = S.PERMIT_UNIT_SEQ_NUM,
                D.PERMIT_UNIT_NAME    = S.PERMIT_UNIT_NAME,
                D.SUPP_INFO_TXT       = S.SUPP_INFO_TXT,
                D.ACTIVE_UNIT_IND     = S.ACTIVE_UNIT_IND,
                D.CREATED_BY_USERID  = S.CREATED_BY_USERID,
                D.P_CREATED_DATE      = S.P_CREATED_DATE
        WHEN NOT MATCHED THEN
            INSERT (PRM_FAC_SUBM_ID,
                    TRANS_CODE,
                    PERMIT_UNIT_SEQ_NUM,
                    PERMIT_UNIT_NAME,
                    SUPP_INFO_TXT,
                    ACTIVE_UNIT_IND,
                    CREATED_BY_USERID,
                    P_CREATED_DATE)
            VALUES (S.WH_PRM_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.PERMIT_UNIT_SEQ_NUM,
                    S.PERMIT_UNIT_NAME,
                    S.SUPP_INFO_TXT,
                    S.ACTIVE_UNIT_IND,
                    S.CREATED_BY_USERID,
                    S.P_CREATED_DATE);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 17-reporting_db-prm_merge_unit_detail-sp.sql 
 */
/*************************************************************************************************
** ObjectName: PRM_MERGE_UNIT_DETAIL.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_PRM_UNIT_DETAIL table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  05/31/2019   Windsor     Upgraded to 5.8 -- added CURRENT_UNIT_DETAIL_IND, CREATED_BY_USER_ID
**                           and P_CREATED_DATE
**  02/14/2021   Windsor     Renamed column CREATED_BY_USER_ID to CREATED_BY_USERID.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[PRM_MERGE_UNIT_DETAIL] @PRM_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_PRM_UNIT_DETAIL D
        USING (SELECT *
               FROM ETL_PRM_UNIT_DETAIL_VW
               WHERE PRM_SUBM_ID = @PRM_SUBM_ID) S
        ON (D.PRM_UNIT_DETAIL_ID = S.WH_PRM_UNIT_DETAIL_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.PERMIT_UNIT_DETAIL_SEQ_NUM IS NOT NULL AND S.PERMIT_UNIT_DETAIL_SEQ_NUM IS NOT NULL AND
                        D.PERMIT_UNIT_DETAIL_SEQ_NUM <> S.PERMIT_UNIT_DETAIL_SEQ_NUM)
                    OR (D.PERMIT_UNIT_DETAIL_SEQ_NUM IS NULL AND S.PERMIT_UNIT_DETAIL_SEQ_NUM IS NOT NULL)
                    OR (D.PERMIT_UNIT_DETAIL_SEQ_NUM IS NOT NULL AND S.PERMIT_UNIT_DETAIL_SEQ_NUM IS NULL)
                    OR (D.PROC_UNIT_DATA_OWNER_CODE IS NOT NULL AND S.PROC_UNIT_DATA_OWNER_CODE IS NOT NULL AND
                        D.PROC_UNIT_DATA_OWNER_CODE <> S.PROC_UNIT_DATA_OWNER_CODE)
                    OR (D.PROC_UNIT_DATA_OWNER_CODE IS NULL AND S.PROC_UNIT_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.PROC_UNIT_DATA_OWNER_CODE IS NOT NULL AND S.PROC_UNIT_DATA_OWNER_CODE IS NULL)
                    OR
                    (D.PROC_UNIT_CODE IS NOT NULL AND S.PROC_UNIT_CODE IS NOT NULL AND
                     D.PROC_UNIT_CODE <> S.PROC_UNIT_CODE)
                    OR (D.PROC_UNIT_CODE IS NULL AND S.PROC_UNIT_CODE IS NOT NULL)
                    OR (D.PROC_UNIT_CODE IS NOT NULL AND S.PROC_UNIT_CODE IS NULL)
                    OR (D.PERMIT_STAT_EFFC_DATE IS NOT NULL AND S.PERMIT_STAT_EFFC_DATE IS NOT NULL AND
                        D.PERMIT_STAT_EFFC_DATE <> S.PERMIT_STAT_EFFC_DATE)
                    OR (D.PERMIT_STAT_EFFC_DATE IS NULL AND S.PERMIT_STAT_EFFC_DATE IS NOT NULL)
                    OR (D.PERMIT_STAT_EFFC_DATE IS NOT NULL AND S.PERMIT_STAT_EFFC_DATE IS NULL)
                    OR (D.PERMIT_UNIT_CAP_QNTY IS NOT NULL AND S.PERMIT_UNIT_CAP_QNTY IS NOT NULL AND
                        D.PERMIT_UNIT_CAP_QNTY <> S.PERMIT_UNIT_CAP_QNTY)
                    OR (D.PERMIT_UNIT_CAP_QNTY IS NULL AND S.PERMIT_UNIT_CAP_QNTY IS NOT NULL)
                    OR (D.PERMIT_UNIT_CAP_QNTY IS NOT NULL AND S.PERMIT_UNIT_CAP_QNTY IS NULL)
                    OR
                    (D.CAP_TYPE_CODE IS NOT NULL AND S.CAP_TYPE_CODE IS NOT NULL AND D.CAP_TYPE_CODE <> S.CAP_TYPE_CODE)
                    OR (D.CAP_TYPE_CODE IS NULL AND S.CAP_TYPE_CODE IS NOT NULL)
                    OR (D.CAP_TYPE_CODE IS NOT NULL AND S.CAP_TYPE_CODE IS NULL)
                    OR
                    (D.COMMER_STAT_CODE IS NOT NULL AND S.COMMER_STAT_CODE IS NOT NULL AND
                     D.COMMER_STAT_CODE <> S.COMMER_STAT_CODE)
                    OR (D.COMMER_STAT_CODE IS NULL AND S.COMMER_STAT_CODE IS NOT NULL)
                    OR (D.COMMER_STAT_CODE IS NOT NULL AND S.COMMER_STAT_CODE IS NULL)
                    OR
                    (D.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NOT NULL AND S.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NOT NULL AND
                     D.LEGAL_OPER_STAT_DATA_OWNER_CDE <> S.LEGAL_OPER_STAT_DATA_OWNER_CDE)
                    OR (D.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NULL AND S.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NOT NULL)
                    OR (D.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NOT NULL AND S.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NULL)
                    OR (D.LEGAL_OPER_STAT_CODE IS NOT NULL AND S.LEGAL_OPER_STAT_CODE IS NOT NULL AND
                        D.LEGAL_OPER_STAT_CODE <> S.LEGAL_OPER_STAT_CODE)
                    OR (D.LEGAL_OPER_STAT_CODE IS NULL AND S.LEGAL_OPER_STAT_CODE IS NOT NULL)
                    OR (D.LEGAL_OPER_STAT_CODE IS NOT NULL AND S.LEGAL_OPER_STAT_CODE IS NULL)
                    OR
                    (D.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NOT NULL AND S.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NOT NULL AND
                     D.MEASUREMENT_UNIT_DATA_OWNR_CDE <> S.MEASUREMENT_UNIT_DATA_OWNR_CDE)
                    OR (D.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NULL AND S.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NOT NULL)
                    OR (D.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NOT NULL AND S.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NULL)
                    OR (D.MEASUREMENT_UNIT_CODE IS NOT NULL AND S.MEASUREMENT_UNIT_CODE IS NOT NULL AND
                        D.MEASUREMENT_UNIT_CODE <> S.MEASUREMENT_UNIT_CODE)
                    OR (D.MEASUREMENT_UNIT_CODE IS NULL AND S.MEASUREMENT_UNIT_CODE IS NOT NULL)
                    OR (D.MEASUREMENT_UNIT_CODE IS NOT NULL AND S.MEASUREMENT_UNIT_CODE IS NULL)
                    OR (D.NUM_OF_UNITS_COUNT IS NOT NULL AND S.NUM_OF_UNITS_COUNT IS NOT NULL AND
                        D.NUM_OF_UNITS_COUNT <> S.NUM_OF_UNITS_COUNT)
                    OR (D.NUM_OF_UNITS_COUNT IS NULL AND S.NUM_OF_UNITS_COUNT IS NOT NULL)
                    OR (D.NUM_OF_UNITS_COUNT IS NOT NULL AND S.NUM_OF_UNITS_COUNT IS NULL)
                    OR (D.STANDARD_PERMIT_IND IS NOT NULL AND S.STANDARD_PERMIT_IND IS NOT NULL AND
                        D.STANDARD_PERMIT_IND <> S.STANDARD_PERMIT_IND)
                    OR (D.STANDARD_PERMIT_IND IS NULL AND S.STANDARD_PERMIT_IND IS NOT NULL)
                    OR (D.STANDARD_PERMIT_IND IS NOT NULL AND S.STANDARD_PERMIT_IND IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                    OR
                    (D.CURRENT_UNIT_DETAIL_IND IS NOT NULL AND S.CURRENT_UNIT_DETAIL_IND IS NOT NULL AND
                     D.CURRENT_UNIT_DETAIL_IND <> S.CURRENT_UNIT_DETAIL_IND)
                    OR (D.CURRENT_UNIT_DETAIL_IND IS NULL AND S.CURRENT_UNIT_DETAIL_IND IS NOT NULL)
                    OR (D.CURRENT_UNIT_DETAIL_IND IS NOT NULL AND S.CURRENT_UNIT_DETAIL_IND IS NULL)
                    OR
                    (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NOT NULL AND
                     D.CREATED_BY_USERID <> S.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR
                    (D.P_CREATED_DATE IS NOT NULL AND S.P_CREATED_DATE IS NOT NULL AND
                     D.P_CREATED_DATE <> S.P_CREATED_DATE)
                    OR (D.P_CREATED_DATE IS NULL AND S.P_CREATED_DATE IS NOT NULL)
                    OR (D.P_CREATED_DATE IS NOT NULL AND S.P_CREATED_DATE IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.PROC_UNIT_DATA_OWNER_CODE      = S.PROC_UNIT_DATA_OWNER_CODE,
                D.PROC_UNIT_CODE                 = S.PROC_UNIT_CODE,
                D.PERMIT_STAT_EFFC_DATE          = S.PERMIT_STAT_EFFC_DATE,
                D.PERMIT_UNIT_CAP_QNTY           = S.PERMIT_UNIT_CAP_QNTY,
                D.CAP_TYPE_CODE                  = S.CAP_TYPE_CODE,
                D.COMMER_STAT_CODE               = S.COMMER_STAT_CODE,
                D.LEGAL_OPER_STAT_DATA_OWNER_CDE = S.LEGAL_OPER_STAT_DATA_OWNER_CDE,
                D.LEGAL_OPER_STAT_CODE           = S.LEGAL_OPER_STAT_CODE,
                D.MEASUREMENT_UNIT_DATA_OWNR_CDE = S.MEASUREMENT_UNIT_DATA_OWNR_CDE,
                D.MEASUREMENT_UNIT_CODE          = S.MEASUREMENT_UNIT_CODE,
                D.NUM_OF_UNITS_COUNT             = S.NUM_OF_UNITS_COUNT,
                D.STANDARD_PERMIT_IND            = S.STANDARD_PERMIT_IND,
                D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT,
                D.CURRENT_UNIT_DETAIL_IND        = S.CURRENT_UNIT_DETAIL_IND,
                D.CREATED_BY_USERID             = S.CREATED_BY_USERID,
                D.P_CREATED_DATE                 = S.P_CREATED_DATE
        WHEN NOT MATCHED THEN
            INSERT (PRM_UNIT_ID,
                    TRANS_CODE,
                    PERMIT_UNIT_DETAIL_SEQ_NUM,
                    PROC_UNIT_DATA_OWNER_CODE,
                    PROC_UNIT_CODE,
                    PERMIT_STAT_EFFC_DATE,
                    PERMIT_UNIT_CAP_QNTY,
                    CAP_TYPE_CODE,
                    COMMER_STAT_CODE,
                    LEGAL_OPER_STAT_DATA_OWNER_CDE,
                    LEGAL_OPER_STAT_CODE,
                    MEASUREMENT_UNIT_DATA_OWNR_CDE,
                    MEASUREMENT_UNIT_CODE,
                    NUM_OF_UNITS_COUNT,
                    STANDARD_PERMIT_IND,
                    SUPP_INFO_TXT,
                    CURRENT_UNIT_DETAIL_IND,
                    CREATED_BY_USERID,
                    P_CREATED_DATE)
            VALUES (S.WH_PRM_UNIT_ID,
                    S.TRANS_CODE,
                    S.PERMIT_UNIT_DETAIL_SEQ_NUM,
                    S.PROC_UNIT_DATA_OWNER_CODE,
                    S.PROC_UNIT_CODE,
                    S.PERMIT_STAT_EFFC_DATE,
                    S.PERMIT_UNIT_CAP_QNTY,
                    S.CAP_TYPE_CODE,
                    S.COMMER_STAT_CODE,
                    S.LEGAL_OPER_STAT_DATA_OWNER_CDE,
                    S.LEGAL_OPER_STAT_CODE,
                    S.MEASUREMENT_UNIT_DATA_OWNR_CDE,
                    S.MEASUREMENT_UNIT_CODE,
                    S.NUM_OF_UNITS_COUNT,
                    S.STANDARD_PERMIT_IND,
                    S.SUPP_INFO_TXT,
                    S.CURRENT_UNIT_DETAIL_IND,
                    S.CREATED_BY_USERID,
                    S.P_CREATED_DATE);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 18-reporting_db-hd_merge_episodic_event-sp.sql 
 */
/*************************************************************************************************
** ObjectName: HD_MERGE_EPISODIC_EVENT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_EPISODIC_EVENT table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   Windsor     Created.
**  02/14/2021   Windsor     Removed column EVENT_OTHER_DESC.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[HD_MERGE_EPISODIC_EVENT] @HD_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_HD_EPISODIC_EVENT D
        USING (SELECT *
               FROM ETL_HD_EPISODIC_EVENT
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_EPISODIC_EVENT_ID = S.WH_HD_EPISODIC_EVENT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR (D.EVENT_OWNER IS NOT NULL AND S.EVENT_OWNER IS NOT NULL AND D.EVENT_OWNER <> S.EVENT_OWNER)
                    OR (D.EVENT_OWNER IS NULL AND S.EVENT_OWNER IS NOT NULL)
                    OR (D.EVENT_OWNER IS NOT NULL AND S.EVENT_OWNER IS NULL)
                    OR (D.EVENT_TYPE IS NOT NULL AND S.EVENT_TYPE IS NOT NULL AND D.EVENT_TYPE <> S.EVENT_TYPE)
                    OR (D.EVENT_TYPE IS NULL AND S.EVENT_TYPE IS NOT NULL)
                    OR (D.EVENT_TYPE IS NOT NULL AND S.EVENT_TYPE IS NULL)
                    OR (D.CONTACT_FIRST_NAME IS NOT NULL AND S.CONTACT_FIRST_NAME IS NOT NULL AND
                        D.CONTACT_FIRST_NAME <> S.CONTACT_FIRST_NAME)
                    OR (D.CONTACT_FIRST_NAME IS NULL AND S.CONTACT_FIRST_NAME IS NOT NULL)
                    OR (D.CONTACT_FIRST_NAME IS NOT NULL AND S.CONTACT_FIRST_NAME IS NULL)
                    OR (D.CONTACT_MIDDLE_INITIAL IS NOT NULL AND S.CONTACT_MIDDLE_INITIAL IS NOT NULL AND
                        D.CONTACT_MIDDLE_INITIAL <> S.CONTACT_MIDDLE_INITIAL)
                    OR (D.CONTACT_MIDDLE_INITIAL IS NULL AND S.CONTACT_MIDDLE_INITIAL IS NOT NULL)
                    OR (D.CONTACT_MIDDLE_INITIAL IS NOT NULL AND S.CONTACT_MIDDLE_INITIAL IS NULL)
                    OR (D.CONTACT_LAST_NAME IS NOT NULL AND S.CONTACT_LAST_NAME IS NOT NULL AND
                        D.CONTACT_LAST_NAME <> S.CONTACT_LAST_NAME)
                    OR (D.CONTACT_LAST_NAME IS NULL AND S.CONTACT_LAST_NAME IS NOT NULL)
                    OR (D.CONTACT_LAST_NAME IS NOT NULL AND S.CONTACT_LAST_NAME IS NULL)
                    OR
                    (D.CONTACT_ORG_NAME IS NOT NULL AND S.CONTACT_ORG_NAME IS NOT NULL AND
                     D.CONTACT_ORG_NAME <> S.CONTACT_ORG_NAME)
                    OR (D.CONTACT_ORG_NAME IS NULL AND S.CONTACT_ORG_NAME IS NOT NULL)
                    OR (D.CONTACT_ORG_NAME IS NOT NULL AND S.CONTACT_ORG_NAME IS NULL)
                    OR
                    (D.CONTACT_TITLE IS NOT NULL AND S.CONTACT_TITLE IS NOT NULL AND D.CONTACT_TITLE <> S.CONTACT_TITLE)
                    OR (D.CONTACT_TITLE IS NULL AND S.CONTACT_TITLE IS NOT NULL)
                    OR (D.CONTACT_TITLE IS NOT NULL AND S.CONTACT_TITLE IS NULL)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NOT NULL AND S.CONTACT_EMAIL_ADDRESS IS NOT NULL AND
                        D.CONTACT_EMAIL_ADDRESS <> S.CONTACT_EMAIL_ADDRESS)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NULL AND S.CONTACT_EMAIL_ADDRESS IS NOT NULL)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NOT NULL AND S.CONTACT_EMAIL_ADDRESS IS NULL)
                    OR
                    (D.CONTACT_PHONE IS NOT NULL AND S.CONTACT_PHONE IS NOT NULL AND D.CONTACT_PHONE <> S.CONTACT_PHONE)
                    OR (D.CONTACT_PHONE IS NULL AND S.CONTACT_PHONE IS NOT NULL)
                    OR (D.CONTACT_PHONE IS NOT NULL AND S.CONTACT_PHONE IS NULL)
                    OR (D.CONTACT_PHONE_EXT IS NOT NULL AND S.CONTACT_PHONE_EXT IS NOT NULL AND
                        D.CONTACT_PHONE_EXT <> S.CONTACT_PHONE_EXT)
                    OR (D.CONTACT_PHONE_EXT IS NULL AND S.CONTACT_PHONE_EXT IS NOT NULL)
                    OR (D.CONTACT_PHONE_EXT IS NOT NULL AND S.CONTACT_PHONE_EXT IS NULL)
                    OR (D.CONTACT_FAX IS NOT NULL AND S.CONTACT_FAX IS NOT NULL AND D.CONTACT_FAX <> S.CONTACT_FAX)
                    OR (D.CONTACT_FAX IS NULL AND S.CONTACT_FAX IS NOT NULL)
                    OR (D.CONTACT_FAX IS NOT NULL AND S.CONTACT_FAX IS NULL)
                    OR (D.START_DATE IS NOT NULL AND S.START_DATE IS NOT NULL AND D.START_DATE <> S.START_DATE)
                    OR (D.START_DATE IS NULL AND S.START_DATE IS NOT NULL)
                    OR (D.START_DATE IS NOT NULL AND S.START_DATE IS NULL)
                    OR (D.END_DATE IS NOT NULL AND S.END_DATE IS NOT NULL AND D.END_DATE <> S.END_DATE)
                    OR (D.END_DATE IS NULL AND S.END_DATE IS NOT NULL)
                    OR (D.END_DATE IS NOT NULL AND S.END_DATE IS NULL)
                ) THEN
            UPDATE
            SET D.TRANSACTION_CODE       = S.TRANSACTION_CODE,
                D.EVENT_OWNER            = S.EVENT_OWNER,
                D.EVENT_TYPE             = S.EVENT_TYPE,
                D.CONTACT_FIRST_NAME     = S.CONTACT_FIRST_NAME,
                D.CONTACT_MIDDLE_INITIAL = S.CONTACT_MIDDLE_INITIAL,
                D.CONTACT_LAST_NAME      = S.CONTACT_LAST_NAME,
                D.CONTACT_ORG_NAME       = S.CONTACT_ORG_NAME,
                D.CONTACT_TITLE          = S.CONTACT_TITLE,
                D.CONTACT_EMAIL_ADDRESS  = S.CONTACT_EMAIL_ADDRESS,
                D.CONTACT_PHONE          = S.CONTACT_PHONE,
                D.CONTACT_PHONE_EXT      = S.CONTACT_PHONE_EXT,
                D.CONTACT_FAX            = S.CONTACT_FAX,
                D.START_DATE             = S.START_DATE,
                D.END_DATE               = S.END_DATE
        WHEN NOT MATCHED THEN
            INSERT (TRANSACTION_CODE,
                    HD_HANDLER_ID,
                    EVENT_OWNER,
                    EVENT_TYPE,
                    CONTACT_FIRST_NAME,
                    CONTACT_MIDDLE_INITIAL,
                    CONTACT_LAST_NAME,
                    CONTACT_ORG_NAME,
                    CONTACT_TITLE,
                    CONTACT_EMAIL_ADDRESS,
                    CONTACT_PHONE,
                    CONTACT_PHONE_EXT,
                    CONTACT_FAX,
                    START_DATE,
                    END_DATE)
            VALUES (S.TRANSACTION_CODE,
                    S.WH_HD_HANDLER_ID,
                    S.EVENT_OWNER,
                    S.EVENT_TYPE,
                    S.CONTACT_FIRST_NAME,
                    S.CONTACT_MIDDLE_INITIAL,
                    S.CONTACT_LAST_NAME,
                    S.CONTACT_ORG_NAME,
                    S.CONTACT_TITLE,
                    S.CONTACT_EMAIL_ADDRESS,
                    S.CONTACT_PHONE,
                    S.CONTACT_PHONE_EXT,
                    S.CONTACT_FAX,
                    S.START_DATE,
                    S.END_DATE);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 19-reporting_db-hd_merge_handler-sp.sql 
 */
/*************************************************************************************************
** ObjectName: HD_MERGE_HANDLER.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_HANDLER table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   Windsor     Created.
**  07/29/2020   Windsor     Updated for new columns.
**  02/14/2021   Windsor     Renamed column CREATED_BY_USER_ID to CREATED_BY_USERID and CURR_REC to
**                           CURRENT_RECORD, and added columns LOCATION_LATITUDE,
**                           LOCATION_LONGITUDE, LOCATION_GIS_PRIM and LOCATION_GIS_ORIG
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[HD_MERGE_HANDLER] @HD_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_HD_HANDLER D
        USING (SELECT *
               FROM ETL_HD_HANDLER_VW
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_HANDLER_ID = S.WH_HD_HANDLER_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR (D.ACTIVITY_LOCATION IS NOT NULL AND S.ACTIVITY_LOCATION IS NOT NULL AND
                        D.ACTIVITY_LOCATION <> S.ACTIVITY_LOCATION)
                    OR (D.ACTIVITY_LOCATION IS NULL AND S.ACTIVITY_LOCATION IS NOT NULL)
                    OR (D.ACTIVITY_LOCATION IS NOT NULL AND S.ACTIVITY_LOCATION IS NULL)
                    OR (D.SOURCE_TYPE IS NOT NULL AND S.SOURCE_TYPE IS NOT NULL AND D.SOURCE_TYPE <> S.SOURCE_TYPE)
                    OR (D.SOURCE_TYPE IS NULL AND S.SOURCE_TYPE IS NOT NULL)
                    OR (D.SOURCE_TYPE IS NOT NULL AND S.SOURCE_TYPE IS NULL)
                    OR (D.RECEIVE_DATE IS NOT NULL AND S.RECEIVE_DATE IS NOT NULL AND D.RECEIVE_DATE <> S.RECEIVE_DATE)
                    OR (D.RECEIVE_DATE IS NULL AND S.RECEIVE_DATE IS NOT NULL)
                    OR (D.RECEIVE_DATE IS NOT NULL AND S.RECEIVE_DATE IS NULL)
                    OR (D.HANDLER_NAME IS NOT NULL AND S.HANDLER_NAME IS NOT NULL AND D.HANDLER_NAME <> S.HANDLER_NAME)
                    OR (D.HANDLER_NAME IS NULL AND S.HANDLER_NAME IS NOT NULL)
                    OR (D.HANDLER_NAME IS NOT NULL AND S.HANDLER_NAME IS NULL)
                    OR
                    (D.ACKNOWLEDGE_DATE IS NOT NULL AND S.ACKNOWLEDGE_DATE IS NOT NULL AND
                     D.ACKNOWLEDGE_DATE <> S.ACKNOWLEDGE_DATE)
                    OR (D.ACKNOWLEDGE_DATE IS NULL AND S.ACKNOWLEDGE_DATE IS NOT NULL)
                    OR (D.ACKNOWLEDGE_DATE IS NOT NULL AND S.ACKNOWLEDGE_DATE IS NULL)
                    OR (D.NON_NOTIFIER IS NOT NULL AND S.NON_NOTIFIER IS NOT NULL AND D.NON_NOTIFIER <> S.NON_NOTIFIER)
                    OR (D.NON_NOTIFIER IS NULL AND S.NON_NOTIFIER IS NOT NULL)
                    OR (D.NON_NOTIFIER IS NOT NULL AND S.NON_NOTIFIER IS NULL)
                    OR
                    (D.OFF_SITE_RECEIPT IS NOT NULL AND S.OFF_SITE_RECEIPT IS NOT NULL AND
                     D.OFF_SITE_RECEIPT <> S.OFF_SITE_RECEIPT)
                    OR (D.OFF_SITE_RECEIPT IS NULL AND S.OFF_SITE_RECEIPT IS NOT NULL)
                    OR (D.OFF_SITE_RECEIPT IS NOT NULL AND S.OFF_SITE_RECEIPT IS NULL)
                    OR
                    (D.ACCESSIBILITY IS NOT NULL AND S.ACCESSIBILITY IS NOT NULL AND D.ACCESSIBILITY <> S.ACCESSIBILITY)
                    OR (D.ACCESSIBILITY IS NULL AND S.ACCESSIBILITY IS NOT NULL)
                    OR (D.ACCESSIBILITY IS NOT NULL AND S.ACCESSIBILITY IS NULL)
                    OR (D.COUNTY_CODE_OWNER IS NOT NULL AND S.COUNTY_CODE_OWNER IS NOT NULL AND
                        D.COUNTY_CODE_OWNER <> S.COUNTY_CODE_OWNER)
                    OR (D.COUNTY_CODE_OWNER IS NULL AND S.COUNTY_CODE_OWNER IS NOT NULL)
                    OR (D.COUNTY_CODE_OWNER IS NOT NULL AND S.COUNTY_CODE_OWNER IS NULL)
                    OR (D.COUNTY_CODE IS NOT NULL AND S.COUNTY_CODE IS NOT NULL AND D.COUNTY_CODE <> S.COUNTY_CODE)
                    OR (D.COUNTY_CODE IS NULL AND S.COUNTY_CODE IS NOT NULL)
                    OR (D.COUNTY_CODE IS NOT NULL AND S.COUNTY_CODE IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                    OR
                    (D.ACKNOWLEDGE_FLAG IS NOT NULL AND S.ACKNOWLEDGE_FLAG IS NOT NULL AND
                     D.ACKNOWLEDGE_FLAG <> S.ACKNOWLEDGE_FLAG)
                    OR (D.ACKNOWLEDGE_FLAG IS NULL AND S.ACKNOWLEDGE_FLAG IS NOT NULL)
                    OR (D.ACKNOWLEDGE_FLAG IS NOT NULL AND S.ACKNOWLEDGE_FLAG IS NULL)
                    OR
                    (D.LOCATION_STREET1 IS NOT NULL AND S.LOCATION_STREET1 IS NOT NULL AND
                     D.LOCATION_STREET1 <> S.LOCATION_STREET1)
                    OR (D.LOCATION_STREET1 IS NULL AND S.LOCATION_STREET1 IS NOT NULL)
                    OR (D.LOCATION_STREET1 IS NOT NULL AND S.LOCATION_STREET1 IS NULL)
                    OR
                    (D.LOCATION_STREET2 IS NOT NULL AND S.LOCATION_STREET2 IS NOT NULL AND
                     D.LOCATION_STREET2 <> S.LOCATION_STREET2)
                    OR (D.LOCATION_STREET2 IS NULL AND S.LOCATION_STREET2 IS NOT NULL)
                    OR (D.LOCATION_STREET2 IS NOT NULL AND S.LOCATION_STREET2 IS NULL)
                    OR
                    (D.LOCATION_CITY IS NOT NULL AND S.LOCATION_CITY IS NOT NULL AND D.LOCATION_CITY <> S.LOCATION_CITY)
                    OR (D.LOCATION_CITY IS NULL AND S.LOCATION_CITY IS NOT NULL)
                    OR (D.LOCATION_CITY IS NOT NULL AND S.LOCATION_CITY IS NULL)
                    OR
                    (D.LOCATION_STATE IS NOT NULL AND S.LOCATION_STATE IS NOT NULL AND
                     D.LOCATION_STATE <> S.LOCATION_STATE)
                    OR (D.LOCATION_STATE IS NULL AND S.LOCATION_STATE IS NOT NULL)
                    OR (D.LOCATION_STATE IS NOT NULL AND S.LOCATION_STATE IS NULL)
                    OR
                    (D.LOCATION_COUNTRY IS NOT NULL AND S.LOCATION_COUNTRY IS NOT NULL AND
                     D.LOCATION_COUNTRY <> S.LOCATION_COUNTRY)
                    OR (D.LOCATION_COUNTRY IS NULL AND S.LOCATION_COUNTRY IS NOT NULL)
                    OR (D.LOCATION_COUNTRY IS NOT NULL AND S.LOCATION_COUNTRY IS NULL)
                    OR (D.LOCATION_ZIP IS NOT NULL AND S.LOCATION_ZIP IS NOT NULL AND D.LOCATION_ZIP <> S.LOCATION_ZIP)
                    OR (D.LOCATION_ZIP IS NULL AND S.LOCATION_ZIP IS NOT NULL)
                    OR (D.LOCATION_ZIP IS NOT NULL AND S.LOCATION_ZIP IS NULL)
                    OR (D.MAIL_STREET1 IS NOT NULL AND S.MAIL_STREET1 IS NOT NULL AND D.MAIL_STREET1 <> S.MAIL_STREET1)
                    OR (D.MAIL_STREET1 IS NULL AND S.MAIL_STREET1 IS NOT NULL)
                    OR (D.MAIL_STREET1 IS NOT NULL AND S.MAIL_STREET1 IS NULL)
                    OR (D.MAIL_STREET2 IS NOT NULL AND S.MAIL_STREET2 IS NOT NULL AND D.MAIL_STREET2 <> S.MAIL_STREET2)
                    OR (D.MAIL_STREET2 IS NULL AND S.MAIL_STREET2 IS NOT NULL)
                    OR (D.MAIL_STREET2 IS NOT NULL AND S.MAIL_STREET2 IS NULL)
                    OR (D.MAIL_CITY IS NOT NULL AND S.MAIL_CITY IS NOT NULL AND D.MAIL_CITY <> S.MAIL_CITY)
                    OR (D.MAIL_CITY IS NULL AND S.MAIL_CITY IS NOT NULL)
                    OR (D.MAIL_CITY IS NOT NULL AND S.MAIL_CITY IS NULL)
                    OR (D.MAIL_STATE IS NOT NULL AND S.MAIL_STATE IS NOT NULL AND D.MAIL_STATE <> S.MAIL_STATE)
                    OR (D.MAIL_STATE IS NULL AND S.MAIL_STATE IS NOT NULL)
                    OR (D.MAIL_STATE IS NOT NULL AND S.MAIL_STATE IS NULL)
                    OR (D.MAIL_COUNTRY IS NOT NULL AND S.MAIL_COUNTRY IS NOT NULL AND D.MAIL_COUNTRY <> S.MAIL_COUNTRY)
                    OR (D.MAIL_COUNTRY IS NULL AND S.MAIL_COUNTRY IS NOT NULL)
                    OR (D.MAIL_COUNTRY IS NOT NULL AND S.MAIL_COUNTRY IS NULL)
                    OR (D.MAIL_ZIP IS NOT NULL AND S.MAIL_ZIP IS NOT NULL AND D.MAIL_ZIP <> S.MAIL_ZIP)
                    OR (D.MAIL_ZIP IS NULL AND S.MAIL_ZIP IS NOT NULL)
                    OR (D.MAIL_ZIP IS NOT NULL AND S.MAIL_ZIP IS NULL)
                    OR (D.CONTACT_FIRST_NAME IS NOT NULL AND S.CONTACT_FIRST_NAME IS NOT NULL AND
                        D.CONTACT_FIRST_NAME <> S.CONTACT_FIRST_NAME)
                    OR (D.CONTACT_FIRST_NAME IS NULL AND S.CONTACT_FIRST_NAME IS NOT NULL)
                    OR (D.CONTACT_FIRST_NAME IS NOT NULL AND S.CONTACT_FIRST_NAME IS NULL)
                    OR (D.CONTACT_MIDDLE_INITIAL IS NOT NULL AND S.CONTACT_MIDDLE_INITIAL IS NOT NULL AND
                        D.CONTACT_MIDDLE_INITIAL <> S.CONTACT_MIDDLE_INITIAL)
                    OR (D.CONTACT_MIDDLE_INITIAL IS NULL AND S.CONTACT_MIDDLE_INITIAL IS NOT NULL)
                    OR (D.CONTACT_MIDDLE_INITIAL IS NOT NULL AND S.CONTACT_MIDDLE_INITIAL IS NULL)
                    OR (D.CONTACT_LAST_NAME IS NOT NULL AND S.CONTACT_LAST_NAME IS NOT NULL AND
                        D.CONTACT_LAST_NAME <> S.CONTACT_LAST_NAME)
                    OR (D.CONTACT_LAST_NAME IS NULL AND S.CONTACT_LAST_NAME IS NOT NULL)
                    OR (D.CONTACT_LAST_NAME IS NOT NULL AND S.CONTACT_LAST_NAME IS NULL)
                    OR
                    (D.CONTACT_ORG_NAME IS NOT NULL AND S.CONTACT_ORG_NAME IS NOT NULL AND
                     D.CONTACT_ORG_NAME <> S.CONTACT_ORG_NAME)
                    OR (D.CONTACT_ORG_NAME IS NULL AND S.CONTACT_ORG_NAME IS NOT NULL)
                    OR (D.CONTACT_ORG_NAME IS NOT NULL AND S.CONTACT_ORG_NAME IS NULL)
                    OR
                    (D.CONTACT_TITLE IS NOT NULL AND S.CONTACT_TITLE IS NOT NULL AND D.CONTACT_TITLE <> S.CONTACT_TITLE)
                    OR (D.CONTACT_TITLE IS NULL AND S.CONTACT_TITLE IS NOT NULL)
                    OR (D.CONTACT_TITLE IS NOT NULL AND S.CONTACT_TITLE IS NULL)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NOT NULL AND S.CONTACT_EMAIL_ADDRESS IS NOT NULL AND
                        D.CONTACT_EMAIL_ADDRESS <> S.CONTACT_EMAIL_ADDRESS)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NULL AND S.CONTACT_EMAIL_ADDRESS IS NOT NULL)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NOT NULL AND S.CONTACT_EMAIL_ADDRESS IS NULL)
                    OR
                    (D.CONTACT_PHONE IS NOT NULL AND S.CONTACT_PHONE IS NOT NULL AND D.CONTACT_PHONE <> S.CONTACT_PHONE)
                    OR (D.CONTACT_PHONE IS NULL AND S.CONTACT_PHONE IS NOT NULL)
                    OR (D.CONTACT_PHONE IS NOT NULL AND S.CONTACT_PHONE IS NULL)
                    OR (D.CONTACT_PHONE_EXT IS NOT NULL AND S.CONTACT_PHONE_EXT IS NOT NULL AND
                        D.CONTACT_PHONE_EXT <> S.CONTACT_PHONE_EXT)
                    OR (D.CONTACT_PHONE_EXT IS NULL AND S.CONTACT_PHONE_EXT IS NOT NULL)
                    OR (D.CONTACT_PHONE_EXT IS NOT NULL AND S.CONTACT_PHONE_EXT IS NULL)
                    OR (D.CONTACT_FAX IS NOT NULL AND S.CONTACT_FAX IS NOT NULL AND D.CONTACT_FAX <> S.CONTACT_FAX)
                    OR (D.CONTACT_FAX IS NULL AND S.CONTACT_FAX IS NOT NULL)
                    OR (D.CONTACT_FAX IS NOT NULL AND S.CONTACT_FAX IS NULL)
                    OR (D.CONTACT_STREET1 IS NOT NULL AND S.CONTACT_STREET1 IS NOT NULL AND
                        D.CONTACT_STREET1 <> S.CONTACT_STREET1)
                    OR (D.CONTACT_STREET1 IS NULL AND S.CONTACT_STREET1 IS NOT NULL)
                    OR (D.CONTACT_STREET1 IS NOT NULL AND S.CONTACT_STREET1 IS NULL)
                    OR (D.CONTACT_STREET2 IS NOT NULL AND S.CONTACT_STREET2 IS NOT NULL AND
                        D.CONTACT_STREET2 <> S.CONTACT_STREET2)
                    OR (D.CONTACT_STREET2 IS NULL AND S.CONTACT_STREET2 IS NOT NULL)
                    OR (D.CONTACT_STREET2 IS NOT NULL AND S.CONTACT_STREET2 IS NULL)
                    OR (D.CONTACT_CITY IS NOT NULL AND S.CONTACT_CITY IS NOT NULL AND D.CONTACT_CITY <> S.CONTACT_CITY)
                    OR (D.CONTACT_CITY IS NULL AND S.CONTACT_CITY IS NOT NULL)
                    OR (D.CONTACT_CITY IS NOT NULL AND S.CONTACT_CITY IS NULL)
                    OR
                    (D.CONTACT_STATE IS NOT NULL AND S.CONTACT_STATE IS NOT NULL AND D.CONTACT_STATE <> S.CONTACT_STATE)
                    OR (D.CONTACT_STATE IS NULL AND S.CONTACT_STATE IS NOT NULL)
                    OR (D.CONTACT_STATE IS NOT NULL AND S.CONTACT_STATE IS NULL)
                    OR (D.CONTACT_COUNTRY IS NOT NULL AND S.CONTACT_COUNTRY IS NOT NULL AND
                        D.CONTACT_COUNTRY <> S.CONTACT_COUNTRY)
                    OR (D.CONTACT_COUNTRY IS NULL AND S.CONTACT_COUNTRY IS NOT NULL)
                    OR (D.CONTACT_COUNTRY IS NOT NULL AND S.CONTACT_COUNTRY IS NULL)
                    OR (D.CONTACT_ZIP IS NOT NULL AND S.CONTACT_ZIP IS NOT NULL AND D.CONTACT_ZIP <> S.CONTACT_ZIP)
                    OR (D.CONTACT_ZIP IS NULL AND S.CONTACT_ZIP IS NOT NULL)
                    OR (D.CONTACT_ZIP IS NOT NULL AND S.CONTACT_ZIP IS NULL)
                    OR (D.PCONTACT_FIRST_NAME IS NOT NULL AND S.PCONTACT_FIRST_NAME IS NOT NULL AND
                        D.PCONTACT_FIRST_NAME <> S.PCONTACT_FIRST_NAME)
                    OR (D.PCONTACT_FIRST_NAME IS NULL AND S.PCONTACT_FIRST_NAME IS NOT NULL)
                    OR (D.PCONTACT_FIRST_NAME IS NOT NULL AND S.PCONTACT_FIRST_NAME IS NULL)
                    OR (D.PCONTACT_MIDDLE_NAME IS NOT NULL AND S.PCONTACT_MIDDLE_NAME IS NOT NULL AND
                        D.PCONTACT_MIDDLE_NAME <> S.PCONTACT_MIDDLE_NAME)
                    OR (D.PCONTACT_MIDDLE_NAME IS NULL AND S.PCONTACT_MIDDLE_NAME IS NOT NULL)
                    OR (D.PCONTACT_MIDDLE_NAME IS NOT NULL AND S.PCONTACT_MIDDLE_NAME IS NULL)
                    OR (D.PCONTACT_LAST_NAME IS NOT NULL AND S.PCONTACT_LAST_NAME IS NOT NULL AND
                        D.PCONTACT_LAST_NAME <> S.PCONTACT_LAST_NAME)
                    OR (D.PCONTACT_LAST_NAME IS NULL AND S.PCONTACT_LAST_NAME IS NOT NULL)
                    OR (D.PCONTACT_LAST_NAME IS NOT NULL AND S.PCONTACT_LAST_NAME IS NULL)
                    OR (D.PCONTACT_ORG_NAME IS NOT NULL AND S.PCONTACT_ORG_NAME IS NOT NULL AND
                        D.PCONTACT_ORG_NAME <> S.PCONTACT_ORG_NAME)
                    OR (D.PCONTACT_ORG_NAME IS NULL AND S.PCONTACT_ORG_NAME IS NOT NULL)
                    OR (D.PCONTACT_ORG_NAME IS NOT NULL AND S.PCONTACT_ORG_NAME IS NULL)
                    OR
                    (D.PCONTACT_TITLE IS NOT NULL AND S.PCONTACT_TITLE IS NOT NULL AND
                     D.PCONTACT_TITLE <> S.PCONTACT_TITLE)
                    OR (D.PCONTACT_TITLE IS NULL AND S.PCONTACT_TITLE IS NOT NULL)
                    OR (D.PCONTACT_TITLE IS NOT NULL AND S.PCONTACT_TITLE IS NULL)
                    OR (D.PCONTACT_EMAIL_ADDRESS IS NOT NULL AND S.PCONTACT_EMAIL_ADDRESS IS NOT NULL AND
                        D.PCONTACT_EMAIL_ADDRESS <> S.PCONTACT_EMAIL_ADDRESS)
                    OR (D.PCONTACT_EMAIL_ADDRESS IS NULL AND S.PCONTACT_EMAIL_ADDRESS IS NOT NULL)
                    OR (D.PCONTACT_EMAIL_ADDRESS IS NOT NULL AND S.PCONTACT_EMAIL_ADDRESS IS NULL)
                    OR
                    (D.PCONTACT_PHONE IS NOT NULL AND S.PCONTACT_PHONE IS NOT NULL AND
                     D.PCONTACT_PHONE <> S.PCONTACT_PHONE)
                    OR (D.PCONTACT_PHONE IS NULL AND S.PCONTACT_PHONE IS NOT NULL)
                    OR (D.PCONTACT_PHONE IS NOT NULL AND S.PCONTACT_PHONE IS NULL)
                    OR (D.PCONTACT_PHONE_EXT IS NOT NULL AND S.PCONTACT_PHONE_EXT IS NOT NULL AND
                        D.PCONTACT_PHONE_EXT <> S.PCONTACT_PHONE_EXT)
                    OR (D.PCONTACT_PHONE_EXT IS NULL AND S.PCONTACT_PHONE_EXT IS NOT NULL)
                    OR (D.PCONTACT_PHONE_EXT IS NOT NULL AND S.PCONTACT_PHONE_EXT IS NULL)
                    OR (D.PCONTACT_FAX IS NOT NULL AND S.PCONTACT_FAX IS NOT NULL AND D.PCONTACT_FAX <> S.PCONTACT_FAX)
                    OR (D.PCONTACT_FAX IS NULL AND S.PCONTACT_FAX IS NOT NULL)
                    OR (D.PCONTACT_FAX IS NOT NULL AND S.PCONTACT_FAX IS NULL)
                    OR
                    (D.PCONTACT_STREET1 IS NOT NULL AND S.PCONTACT_STREET1 IS NOT NULL AND
                     D.PCONTACT_STREET1 <> S.PCONTACT_STREET1)
                    OR (D.PCONTACT_STREET1 IS NULL AND S.PCONTACT_STREET1 IS NOT NULL)
                    OR (D.PCONTACT_STREET1 IS NOT NULL AND S.PCONTACT_STREET1 IS NULL)
                    OR
                    (D.PCONTACT_STREET2 IS NOT NULL AND S.PCONTACT_STREET2 IS NOT NULL AND
                     D.PCONTACT_STREET2 <> S.PCONTACT_STREET2)
                    OR (D.PCONTACT_STREET2 IS NULL AND S.PCONTACT_STREET2 IS NOT NULL)
                    OR (D.PCONTACT_STREET2 IS NOT NULL AND S.PCONTACT_STREET2 IS NULL)
                    OR
                    (D.PCONTACT_CITY IS NOT NULL AND S.PCONTACT_CITY IS NOT NULL AND D.PCONTACT_CITY <> S.PCONTACT_CITY)
                    OR (D.PCONTACT_CITY IS NULL AND S.PCONTACT_CITY IS NOT NULL)
                    OR (D.PCONTACT_CITY IS NOT NULL AND S.PCONTACT_CITY IS NULL)
                    OR
                    (D.PCONTACT_STATE IS NOT NULL AND S.PCONTACT_STATE IS NOT NULL AND
                     D.PCONTACT_STATE <> S.PCONTACT_STATE)
                    OR (D.PCONTACT_STATE IS NULL AND S.PCONTACT_STATE IS NOT NULL)
                    OR (D.PCONTACT_STATE IS NOT NULL AND S.PCONTACT_STATE IS NULL)
                    OR
                    (D.PCONTACT_COUNTRY IS NOT NULL AND S.PCONTACT_COUNTRY IS NOT NULL AND
                     D.PCONTACT_COUNTRY <> S.PCONTACT_COUNTRY)
                    OR (D.PCONTACT_COUNTRY IS NULL AND S.PCONTACT_COUNTRY IS NOT NULL)
                    OR (D.PCONTACT_COUNTRY IS NOT NULL AND S.PCONTACT_COUNTRY IS NULL)
                    OR (D.PCONTACT_ZIP IS NOT NULL AND S.PCONTACT_ZIP IS NOT NULL AND D.PCONTACT_ZIP <> S.PCONTACT_ZIP)
                    OR (D.PCONTACT_ZIP IS NULL AND S.PCONTACT_ZIP IS NOT NULL)
                    OR (D.PCONTACT_ZIP IS NOT NULL AND S.PCONTACT_ZIP IS NULL)
                    OR (D.USED_OIL_BURNER IS NOT NULL AND S.USED_OIL_BURNER IS NOT NULL AND
                        D.USED_OIL_BURNER <> S.USED_OIL_BURNER)
                    OR (D.USED_OIL_BURNER IS NULL AND S.USED_OIL_BURNER IS NOT NULL)
                    OR (D.USED_OIL_BURNER IS NOT NULL AND S.USED_OIL_BURNER IS NULL)
                    OR (D.USED_OIL_PROCESSOR IS NOT NULL AND S.USED_OIL_PROCESSOR IS NOT NULL AND
                        D.USED_OIL_PROCESSOR <> S.USED_OIL_PROCESSOR)
                    OR (D.USED_OIL_PROCESSOR IS NULL AND S.USED_OIL_PROCESSOR IS NOT NULL)
                    OR (D.USED_OIL_PROCESSOR IS NOT NULL AND S.USED_OIL_PROCESSOR IS NULL)
                    OR
                    (D.USED_OIL_REFINER IS NOT NULL AND S.USED_OIL_REFINER IS NOT NULL AND
                     D.USED_OIL_REFINER <> S.USED_OIL_REFINER)
                    OR (D.USED_OIL_REFINER IS NULL AND S.USED_OIL_REFINER IS NOT NULL)
                    OR (D.USED_OIL_REFINER IS NOT NULL AND S.USED_OIL_REFINER IS NULL)
                    OR (D.USED_OIL_MARKET_BURNER IS NOT NULL AND S.USED_OIL_MARKET_BURNER IS NOT NULL AND
                        D.USED_OIL_MARKET_BURNER <> S.USED_OIL_MARKET_BURNER)
                    OR (D.USED_OIL_MARKET_BURNER IS NULL AND S.USED_OIL_MARKET_BURNER IS NOT NULL)
                    OR (D.USED_OIL_MARKET_BURNER IS NOT NULL AND S.USED_OIL_MARKET_BURNER IS NULL)
                    OR (D.USED_OIL_SPEC_MARKETER IS NOT NULL AND S.USED_OIL_SPEC_MARKETER IS NOT NULL AND
                        D.USED_OIL_SPEC_MARKETER <> S.USED_OIL_SPEC_MARKETER)
                    OR (D.USED_OIL_SPEC_MARKETER IS NULL AND S.USED_OIL_SPEC_MARKETER IS NOT NULL)
                    OR (D.USED_OIL_SPEC_MARKETER IS NOT NULL AND S.USED_OIL_SPEC_MARKETER IS NULL)
                    OR (D.USED_OIL_TRANSFER_FACILITY IS NOT NULL AND S.USED_OIL_TRANSFER_FACILITY IS NOT NULL AND
                        D.USED_OIL_TRANSFER_FACILITY <> S.USED_OIL_TRANSFER_FACILITY)
                    OR (D.USED_OIL_TRANSFER_FACILITY IS NULL AND S.USED_OIL_TRANSFER_FACILITY IS NOT NULL)
                    OR (D.USED_OIL_TRANSFER_FACILITY IS NOT NULL AND S.USED_OIL_TRANSFER_FACILITY IS NULL)
                    OR (D.USED_OIL_TRANSPORTER IS NOT NULL AND S.USED_OIL_TRANSPORTER IS NOT NULL AND
                        D.USED_OIL_TRANSPORTER <> S.USED_OIL_TRANSPORTER)
                    OR (D.USED_OIL_TRANSPORTER IS NULL AND S.USED_OIL_TRANSPORTER IS NOT NULL)
                    OR (D.USED_OIL_TRANSPORTER IS NOT NULL AND S.USED_OIL_TRANSPORTER IS NULL)
                    OR (D.LAND_TYPE IS NOT NULL AND S.LAND_TYPE IS NOT NULL AND D.LAND_TYPE <> S.LAND_TYPE)
                    OR (D.LAND_TYPE IS NULL AND S.LAND_TYPE IS NOT NULL)
                    OR (D.LAND_TYPE IS NOT NULL AND S.LAND_TYPE IS NULL)
                    OR (D.STATE_DISTRICT_OWNER IS NOT NULL AND S.STATE_DISTRICT_OWNER IS NOT NULL AND
                        D.STATE_DISTRICT_OWNER <> S.STATE_DISTRICT_OWNER)
                    OR (D.STATE_DISTRICT_OWNER IS NULL AND S.STATE_DISTRICT_OWNER IS NOT NULL)
                    OR (D.STATE_DISTRICT_OWNER IS NOT NULL AND S.STATE_DISTRICT_OWNER IS NULL)
                    OR
                    (D.STATE_DISTRICT IS NOT NULL AND S.STATE_DISTRICT IS NOT NULL AND
                     D.STATE_DISTRICT <> S.STATE_DISTRICT)
                    OR (D.STATE_DISTRICT IS NULL AND S.STATE_DISTRICT IS NOT NULL)
                    OR (D.STATE_DISTRICT IS NOT NULL AND S.STATE_DISTRICT IS NULL)
                    OR (D.IMPORTER_ACTIVITY IS NOT NULL AND S.IMPORTER_ACTIVITY IS NOT NULL AND
                        D.IMPORTER_ACTIVITY <> S.IMPORTER_ACTIVITY)
                    OR (D.IMPORTER_ACTIVITY IS NULL AND S.IMPORTER_ACTIVITY IS NOT NULL)
                    OR (D.IMPORTER_ACTIVITY IS NOT NULL AND S.IMPORTER_ACTIVITY IS NULL)
                    OR (D.MIXED_WASTE_GENERATOR IS NOT NULL AND S.MIXED_WASTE_GENERATOR IS NOT NULL AND
                        D.MIXED_WASTE_GENERATOR <> S.MIXED_WASTE_GENERATOR)
                    OR (D.MIXED_WASTE_GENERATOR IS NULL AND S.MIXED_WASTE_GENERATOR IS NOT NULL)
                    OR (D.MIXED_WASTE_GENERATOR IS NOT NULL AND S.MIXED_WASTE_GENERATOR IS NULL)
                    OR (D.RECYCLER_ACTIVITY IS NOT NULL AND S.RECYCLER_ACTIVITY IS NOT NULL AND
                        D.RECYCLER_ACTIVITY <> S.RECYCLER_ACTIVITY)
                    OR (D.RECYCLER_ACTIVITY IS NULL AND S.RECYCLER_ACTIVITY IS NOT NULL)
                    OR (D.RECYCLER_ACTIVITY IS NOT NULL AND S.RECYCLER_ACTIVITY IS NULL)
                    OR (D.TRANSPORTER_ACTIVITY IS NOT NULL AND S.TRANSPORTER_ACTIVITY IS NOT NULL AND
                        D.TRANSPORTER_ACTIVITY <> S.TRANSPORTER_ACTIVITY)
                    OR (D.TRANSPORTER_ACTIVITY IS NULL AND S.TRANSPORTER_ACTIVITY IS NOT NULL)
                    OR (D.TRANSPORTER_ACTIVITY IS NOT NULL AND S.TRANSPORTER_ACTIVITY IS NULL)
                    OR (D.TSD_ACTIVITY IS NOT NULL AND S.TSD_ACTIVITY IS NOT NULL AND D.TSD_ACTIVITY <> S.TSD_ACTIVITY)
                    OR (D.TSD_ACTIVITY IS NULL AND S.TSD_ACTIVITY IS NOT NULL)
                    OR (D.TSD_ACTIVITY IS NOT NULL AND S.TSD_ACTIVITY IS NULL)
                    OR
                    (D.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL AND S.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL AND
                     D.UNDERGROUND_INJECTION_ACTIVITY <> S.UNDERGROUND_INJECTION_ACTIVITY)
                    OR (D.UNDERGROUND_INJECTION_ACTIVITY IS NULL AND S.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL)
                    OR (D.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL AND S.UNDERGROUND_INJECTION_ACTIVITY IS NULL)
                    OR (D.ONSITE_BURNER_EXEMPTION IS NOT NULL AND S.ONSITE_BURNER_EXEMPTION IS NOT NULL AND
                        D.ONSITE_BURNER_EXEMPTION <> S.ONSITE_BURNER_EXEMPTION)
                    OR (D.ONSITE_BURNER_EXEMPTION IS NULL AND S.ONSITE_BURNER_EXEMPTION IS NOT NULL)
                    OR (D.ONSITE_BURNER_EXEMPTION IS NOT NULL AND S.ONSITE_BURNER_EXEMPTION IS NULL)
                    OR (D.FURNACE_EXEMPTION IS NOT NULL AND S.FURNACE_EXEMPTION IS NOT NULL AND
                        D.FURNACE_EXEMPTION <> S.FURNACE_EXEMPTION)
                    OR (D.FURNACE_EXEMPTION IS NULL AND S.FURNACE_EXEMPTION IS NOT NULL)
                    OR (D.FURNACE_EXEMPTION IS NOT NULL AND S.FURNACE_EXEMPTION IS NULL)
                    OR (D.SHORT_TERM_GEN_IND IS NOT NULL AND S.SHORT_TERM_GEN_IND IS NOT NULL AND
                        D.SHORT_TERM_GEN_IND <> S.SHORT_TERM_GEN_IND)
                    OR (D.SHORT_TERM_GEN_IND IS NULL AND S.SHORT_TERM_GEN_IND IS NOT NULL)
                    OR (D.SHORT_TERM_GEN_IND IS NOT NULL AND S.SHORT_TERM_GEN_IND IS NULL)
                    OR (D.TRANSFER_FACILITY_IND IS NOT NULL AND S.TRANSFER_FACILITY_IND IS NOT NULL AND
                        D.TRANSFER_FACILITY_IND <> S.TRANSFER_FACILITY_IND)
                    OR (D.TRANSFER_FACILITY_IND IS NULL AND S.TRANSFER_FACILITY_IND IS NOT NULL)
                    OR (D.TRANSFER_FACILITY_IND IS NOT NULL AND S.TRANSFER_FACILITY_IND IS NULL)
                    OR (D.COLLEGE_IND IS NOT NULL AND S.COLLEGE_IND IS NOT NULL AND D.COLLEGE_IND <> S.COLLEGE_IND)
                    OR (D.COLLEGE_IND IS NULL AND S.COLLEGE_IND IS NOT NULL)
                    OR (D.COLLEGE_IND IS NOT NULL AND S.COLLEGE_IND IS NULL)
                    OR (D.HOSPITAL_IND IS NOT NULL AND S.HOSPITAL_IND IS NOT NULL AND D.HOSPITAL_IND <> S.HOSPITAL_IND)
                    OR (D.HOSPITAL_IND IS NULL AND S.HOSPITAL_IND IS NOT NULL)
                    OR (D.HOSPITAL_IND IS NOT NULL AND S.HOSPITAL_IND IS NULL)
                    OR
                    (D.NON_PROFIT_IND IS NOT NULL AND S.NON_PROFIT_IND IS NOT NULL AND
                     D.NON_PROFIT_IND <> S.NON_PROFIT_IND)
                    OR (D.NON_PROFIT_IND IS NULL AND S.NON_PROFIT_IND IS NOT NULL)
                    OR (D.NON_PROFIT_IND IS NOT NULL AND S.NON_PROFIT_IND IS NULL)
                    OR
                    (D.WITHDRAWAL_IND IS NOT NULL AND S.WITHDRAWAL_IND IS NOT NULL AND
                     D.WITHDRAWAL_IND <> S.WITHDRAWAL_IND)
                    OR (D.WITHDRAWAL_IND IS NULL AND S.WITHDRAWAL_IND IS NOT NULL)
                    OR (D.WITHDRAWAL_IND IS NOT NULL AND S.WITHDRAWAL_IND IS NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.NOTIFICATION_RSN_CODE IS NOT NULL AND S.NOTIFICATION_RSN_CODE IS NOT NULL AND
                        D.NOTIFICATION_RSN_CODE <> S.NOTIFICATION_RSN_CODE)
                    OR (D.NOTIFICATION_RSN_CODE IS NULL AND S.NOTIFICATION_RSN_CODE IS NOT NULL)
                    OR (D.NOTIFICATION_RSN_CODE IS NOT NULL AND S.NOTIFICATION_RSN_CODE IS NULL)
                    OR (D.EFFC_DATE IS NOT NULL AND S.EFFC_DATE IS NOT NULL AND D.EFFC_DATE <> S.EFFC_DATE)
                    OR (D.EFFC_DATE IS NULL AND S.EFFC_DATE IS NOT NULL)
                    OR (D.EFFC_DATE IS NOT NULL AND S.EFFC_DATE IS NULL)
                    OR (D.FINANCIAL_ASSURANCE_IND IS NOT NULL AND S.FINANCIAL_ASSURANCE_IND IS NOT NULL AND
                        D.FINANCIAL_ASSURANCE_IND <> S.FINANCIAL_ASSURANCE_IND)
                    OR (D.FINANCIAL_ASSURANCE_IND IS NULL AND S.FINANCIAL_ASSURANCE_IND IS NOT NULL)
                    OR (D.FINANCIAL_ASSURANCE_IND IS NOT NULL AND S.FINANCIAL_ASSURANCE_IND IS NULL)
                    OR (D.MAIL_STREET_NUMBER IS NOT NULL AND S.MAIL_STREET_NUMBER IS NOT NULL AND
                        D.MAIL_STREET_NUMBER <> S.MAIL_STREET_NUMBER)
                    OR (D.MAIL_STREET_NUMBER IS NULL AND S.MAIL_STREET_NUMBER IS NOT NULL)
                    OR (D.MAIL_STREET_NUMBER IS NOT NULL AND S.MAIL_STREET_NUMBER IS NULL)
                    OR (D.LOCATION_STREET_NUMBER IS NOT NULL AND S.LOCATION_STREET_NUMBER IS NOT NULL AND
                        D.LOCATION_STREET_NUMBER <> S.LOCATION_STREET_NUMBER)
                    OR (D.LOCATION_STREET_NUMBER IS NULL AND S.LOCATION_STREET_NUMBER IS NOT NULL)
                    OR (D.LOCATION_STREET_NUMBER IS NOT NULL AND S.LOCATION_STREET_NUMBER IS NULL)
                    OR (D.NON_NOTIFIER_TEXT IS NOT NULL AND S.NON_NOTIFIER_TEXT IS NOT NULL AND
                        D.NON_NOTIFIER_TEXT <> S.NON_NOTIFIER_TEXT)
                    OR (D.NON_NOTIFIER_TEXT IS NULL AND S.NON_NOTIFIER_TEXT IS NOT NULL)
                    OR (D.NON_NOTIFIER_TEXT IS NOT NULL AND S.NON_NOTIFIER_TEXT IS NULL)
                    OR (D.ACCESSIBILITY_TEXT IS NOT NULL AND S.ACCESSIBILITY_TEXT IS NOT NULL AND
                        D.ACCESSIBILITY_TEXT <> S.ACCESSIBILITY_TEXT)
                    OR (D.ACCESSIBILITY_TEXT IS NULL AND S.ACCESSIBILITY_TEXT IS NOT NULL)
                    OR (D.ACCESSIBILITY_TEXT IS NOT NULL AND S.ACCESSIBILITY_TEXT IS NULL)
                    OR (D.STATE_DISTRICT_TEXT IS NOT NULL AND S.STATE_DISTRICT_TEXT IS NOT NULL AND
                        D.STATE_DISTRICT_TEXT <> S.STATE_DISTRICT_TEXT)
                    OR (D.STATE_DISTRICT_TEXT IS NULL AND S.STATE_DISTRICT_TEXT IS NOT NULL)
                    OR (D.STATE_DISTRICT_TEXT IS NOT NULL AND S.STATE_DISTRICT_TEXT IS NULL)
                    OR (D.INTRNL_NOTES IS NOT NULL AND S.INTRNL_NOTES IS NOT NULL AND D.INTRNL_NOTES <> S.INTRNL_NOTES)
                    OR (D.INTRNL_NOTES IS NULL AND S.INTRNL_NOTES IS NOT NULL)
                    OR (D.INTRNL_NOTES IS NOT NULL AND S.INTRNL_NOTES IS NULL)
                    OR (D.SHORT_TERM_INTRNL_NOTES IS NOT NULL AND S.SHORT_TERM_INTRNL_NOTES IS NOT NULL AND
                        D.SHORT_TERM_INTRNL_NOTES <> S.SHORT_TERM_INTRNL_NOTES)
                    OR (D.SHORT_TERM_INTRNL_NOTES IS NULL AND S.SHORT_TERM_INTRNL_NOTES IS NOT NULL)
                    OR (D.SHORT_TERM_INTRNL_NOTES IS NOT NULL AND S.SHORT_TERM_INTRNL_NOTES IS NULL)
                    OR (D.NATURE_OF_BUSINESS_TEXT IS NOT NULL AND S.NATURE_OF_BUSINESS_TEXT IS NOT NULL AND
                        D.NATURE_OF_BUSINESS_TEXT <> S.NATURE_OF_BUSINESS_TEXT)
                    OR (D.NATURE_OF_BUSINESS_TEXT IS NULL AND S.NATURE_OF_BUSINESS_TEXT IS NOT NULL)
                    OR (D.NATURE_OF_BUSINESS_TEXT IS NOT NULL AND S.NATURE_OF_BUSINESS_TEXT IS NULL)
                    OR
                    (D.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND
                     D.RECOGNIZED_TRADER_EXPORTER_IND <> S.RECOGNIZED_TRADER_EXPORTER_IND)
                    OR (D.RECOGNIZED_TRADER_EXPORTER_IND IS NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL)
                    OR (D.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NULL)
                    OR
                    (D.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND
                     D.RECOGNIZED_TRADER_IMPORTER_IND <> S.RECOGNIZED_TRADER_IMPORTER_IND)
                    OR (D.RECOGNIZED_TRADER_IMPORTER_IND IS NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL)
                    OR (D.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NULL)
                    OR (D.SLAB_EXPORTER_IND IS NOT NULL AND S.SLAB_EXPORTER_IND IS NOT NULL AND
                        D.SLAB_EXPORTER_IND <> S.SLAB_EXPORTER_IND)
                    OR (D.SLAB_EXPORTER_IND IS NULL AND S.SLAB_EXPORTER_IND IS NOT NULL)
                    OR (D.SLAB_EXPORTER_IND IS NOT NULL AND S.SLAB_EXPORTER_IND IS NULL)
                    OR (D.SLAB_IMPORTER_IND IS NOT NULL AND S.SLAB_IMPORTER_IND IS NOT NULL AND
                        D.SLAB_IMPORTER_IND <> S.SLAB_IMPORTER_IND)
                    OR (D.SLAB_IMPORTER_IND IS NULL AND S.SLAB_IMPORTER_IND IS NOT NULL)
                    OR (D.SLAB_IMPORTER_IND IS NOT NULL AND S.SLAB_IMPORTER_IND IS NULL)
                    OR (D.TSD_DATE IS NOT NULL AND S.TSD_DATE IS NOT NULL AND D.TSD_DATE <> S.TSD_DATE)
                    OR (D.TSD_DATE IS NULL AND S.TSD_DATE IS NOT NULL)
                    OR (D.TSD_DATE IS NOT NULL AND S.TSD_DATE IS NULL)
                    OR (D.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL AND S.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL AND
                        D.UNIVERSAL_WASTE_DEST_FACILITY <> S.UNIVERSAL_WASTE_DEST_FACILITY)
                    OR (D.UNIVERSAL_WASTE_DEST_FACILITY IS NULL AND S.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL)
                    OR (D.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL AND S.UNIVERSAL_WASTE_DEST_FACILITY IS NULL)
                    OR (D.STATE_WASTE_GENERATOR_OWNER IS NOT NULL AND S.STATE_WASTE_GENERATOR_OWNER IS NOT NULL AND
                        D.STATE_WASTE_GENERATOR_OWNER <> S.STATE_WASTE_GENERATOR_OWNER)
                    OR (D.STATE_WASTE_GENERATOR_OWNER IS NULL AND S.STATE_WASTE_GENERATOR_OWNER IS NOT NULL)
                    OR (D.STATE_WASTE_GENERATOR_OWNER IS NOT NULL AND S.STATE_WASTE_GENERATOR_OWNER IS NULL)
                    OR (D.STATE_WASTE_GENERATOR IS NOT NULL AND S.STATE_WASTE_GENERATOR IS NOT NULL AND
                        D.STATE_WASTE_GENERATOR <> S.STATE_WASTE_GENERATOR)
                    OR (D.STATE_WASTE_GENERATOR IS NULL AND S.STATE_WASTE_GENERATOR IS NOT NULL)
                    OR (D.STATE_WASTE_GENERATOR IS NOT NULL AND S.STATE_WASTE_GENERATOR IS NULL)
                    OR (D.FED_WASTE_GENERATOR_OWNER IS NOT NULL AND S.FED_WASTE_GENERATOR_OWNER IS NOT NULL AND
                        D.FED_WASTE_GENERATOR_OWNER <> S.FED_WASTE_GENERATOR_OWNER)
                    OR (D.FED_WASTE_GENERATOR_OWNER IS NULL AND S.FED_WASTE_GENERATOR_OWNER IS NOT NULL)
                    OR (D.FED_WASTE_GENERATOR_OWNER IS NOT NULL AND S.FED_WASTE_GENERATOR_OWNER IS NULL)
                    OR (D.FED_WASTE_GENERATOR IS NOT NULL AND S.FED_WASTE_GENERATOR IS NOT NULL AND
                        D.FED_WASTE_GENERATOR <> S.FED_WASTE_GENERATOR)
                    OR (D.FED_WASTE_GENERATOR IS NULL AND S.FED_WASTE_GENERATOR IS NOT NULL)
                    OR (D.FED_WASTE_GENERATOR IS NOT NULL AND S.FED_WASTE_GENERATOR IS NULL)
                    OR
                    (D.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND
                     D.RECOGNIZED_TRADER_IMPORTER_IND <> S.RECOGNIZED_TRADER_IMPORTER_IND)
                    OR (D.RECOGNIZED_TRADER_IMPORTER_IND IS NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL)
                    OR (D.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NULL)
                    OR
                    (D.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND
                     D.RECOGNIZED_TRADER_EXPORTER_IND <> S.RECOGNIZED_TRADER_EXPORTER_IND)
                    OR (D.RECOGNIZED_TRADER_EXPORTER_IND IS NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL)
                    OR (D.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NULL)
                    OR (D.SLAB_IMPORTER_IND IS NOT NULL AND S.SLAB_IMPORTER_IND IS NOT NULL AND
                        D.SLAB_IMPORTER_IND <> S.SLAB_IMPORTER_IND)
                    OR (D.SLAB_IMPORTER_IND IS NULL AND S.SLAB_IMPORTER_IND IS NOT NULL)
                    OR (D.SLAB_IMPORTER_IND IS NOT NULL AND S.SLAB_IMPORTER_IND IS NULL)
                    OR (D.SLAB_EXPORTER_IND IS NOT NULL AND S.SLAB_EXPORTER_IND IS NOT NULL AND
                        D.SLAB_EXPORTER_IND <> S.SLAB_EXPORTER_IND)
                    OR (D.SLAB_EXPORTER_IND IS NULL AND S.SLAB_EXPORTER_IND IS NOT NULL)
                    OR (D.SLAB_EXPORTER_IND IS NOT NULL AND S.SLAB_EXPORTER_IND IS NULL)
                    OR (D.RECYCLER_ACT_NONSTORAGE IS NOT NULL AND S.RECYCLER_ACT_NONSTORAGE IS NOT NULL AND
                        D.RECYCLER_ACT_NONSTORAGE <> S.RECYCLER_ACT_NONSTORAGE)
                    OR (D.RECYCLER_ACT_NONSTORAGE IS NULL AND S.RECYCLER_ACT_NONSTORAGE IS NOT NULL)
                    OR (D.RECYCLER_ACT_NONSTORAGE IS NOT NULL AND S.RECYCLER_ACT_NONSTORAGE IS NULL)
                    OR (D.MANIFEST_BROKER IS NOT NULL AND S.MANIFEST_BROKER IS NOT NULL AND
                        D.MANIFEST_BROKER <> S.MANIFEST_BROKER)
                    OR (D.MANIFEST_BROKER IS NULL AND S.MANIFEST_BROKER IS NOT NULL)
                    OR (D.MANIFEST_BROKER IS NOT NULL AND S.MANIFEST_BROKER IS NULL)
                    OR (D.ACKNOWLEDGE_FLAG_IND IS NOT NULL AND S.ACKNOWLEDGE_FLAG_IND IS NOT NULL AND
                        D.ACKNOWLEDGE_FLAG_IND <> S.ACKNOWLEDGE_FLAG_IND)
                    OR (D.ACKNOWLEDGE_FLAG_IND IS NULL AND S.ACKNOWLEDGE_FLAG_IND IS NOT NULL)
                    OR (D.ACKNOWLEDGE_FLAG_IND IS NOT NULL AND S.ACKNOWLEDGE_FLAG_IND IS NULL)
                    OR
                    (D.INCLUDE_IN_NATIONAL_REPORT_IND IS NOT NULL AND S.INCLUDE_IN_NATIONAL_REPORT_IND IS NOT NULL AND
                     D.INCLUDE_IN_NATIONAL_REPORT_IND <> S.INCLUDE_IN_NATIONAL_REPORT_IND)
                    OR (D.INCLUDE_IN_NATIONAL_REPORT_IND IS NULL AND S.INCLUDE_IN_NATIONAL_REPORT_IND IS NOT NULL)
                    OR (D.INCLUDE_IN_NATIONAL_REPORT_IND IS NOT NULL AND S.INCLUDE_IN_NATIONAL_REPORT_IND IS NULL)
                    OR (D.LQHUW_IND IS NOT NULL AND S.LQHUW_IND IS NOT NULL AND
                        D.LQHUW_IND <> S.LQHUW_IND)
                    OR (D.LQHUW_IND IS NULL AND S.LQHUW_IND IS NOT NULL)
                    OR (D.LQHUW_IND IS NOT NULL AND S.LQHUW_IND IS NULL)
                    OR (D.HD_REPORT_CYCLE_YEAR IS NOT NULL AND S.HD_REPORT_CYCLE_YEAR IS NOT NULL AND
                        D.HD_REPORT_CYCLE_YEAR <> S.HD_REPORT_CYCLE_YEAR)
                    OR (D.HD_REPORT_CYCLE_YEAR IS NULL AND S.HD_REPORT_CYCLE_YEAR IS NOT NULL)
                    OR (D.HD_REPORT_CYCLE_YEAR IS NOT NULL AND S.HD_REPORT_CYCLE_YEAR IS NULL)
                    OR (D.HEALTHCARE_FAC IS NOT NULL AND S.HEALTHCARE_FAC IS NOT NULL AND
                        D.HEALTHCARE_FAC <> S.HEALTHCARE_FAC)
                    OR (D.HEALTHCARE_FAC IS NULL AND S.HEALTHCARE_FAC IS NOT NULL)
                    OR (D.HEALTHCARE_FAC IS NOT NULL AND S.HEALTHCARE_FAC IS NULL)
                    OR (D.REVERSE_DISTRIBUTOR IS NOT NULL AND S.REVERSE_DISTRIBUTOR IS NOT NULL AND
                        D.REVERSE_DISTRIBUTOR <> S.REVERSE_DISTRIBUTOR)
                    OR (D.REVERSE_DISTRIBUTOR IS NULL AND S.REVERSE_DISTRIBUTOR IS NOT NULL)
                    OR (D.REVERSE_DISTRIBUTOR IS NOT NULL AND S.REVERSE_DISTRIBUTOR IS NULL)
                    OR (D.SUBPART_P_WITHDRAWAL IS NOT NULL AND S.SUBPART_P_WITHDRAWAL IS NOT NULL AND
                        D.SUBPART_P_WITHDRAWAL <> S.SUBPART_P_WITHDRAWAL)
                    OR (D.SUBPART_P_WITHDRAWAL IS NULL AND S.SUBPART_P_WITHDRAWAL IS NOT NULL)
                    OR (D.SUBPART_P_WITHDRAWAL IS NOT NULL AND S.SUBPART_P_WITHDRAWAL IS NULL)
                    OR (D.RECYCLER_IND IS NOT NULL AND S.RECYCLER_IND IS NOT NULL AND
                        D.RECYCLER_IND <> S.RECYCLER_IND)
                    OR (D.RECYCLER_IND IS NULL AND S.RECYCLER_IND IS NOT NULL)
                    OR (D.RECYCLER_IND IS NOT NULL AND S.RECYCLER_IND IS NULL)
                    OR (D.CURRENT_RECORD IS NOT NULL AND S.CURRENT_RECORD IS NOT NULL AND
                        D.CURRENT_RECORD <> S.CURRENT_RECORD)
                    OR (D.CURRENT_RECORD IS NULL AND S.CURRENT_RECORD IS NOT NULL)
                    OR (D.CURRENT_RECORD IS NOT NULL AND S.CURRENT_RECORD IS NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NOT NULL AND
                        D.CREATED_BY_USERID <> S.CREATED_BY_USERID)
                    OR (D.CREATED_BY_USERID IS NULL AND S.CREATED_BY_USERID IS NOT NULL)
                    OR (D.CREATED_BY_USERID IS NOT NULL AND S.CREATED_BY_USERID IS NULL)
                    OR (D.H_CREATED_DATE IS NOT NULL AND S.H_CREATED_DATE IS NOT NULL AND
                        D.H_CREATED_DATE <> S.H_CREATED_DATE)
                    OR (D.H_CREATED_DATE IS NULL AND S.H_CREATED_DATE IS NOT NULL)
                    OR (D.H_CREATED_DATE IS NOT NULL AND S.H_CREATED_DATE IS NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NOT NULL AND
                        D.DATA_ORIG <> S.DATA_ORIG)
                    OR (D.DATA_ORIG IS NULL AND S.DATA_ORIG IS NOT NULL)
                    OR (D.DATA_ORIG IS NOT NULL AND S.DATA_ORIG IS NULL)
                    OR (D.LOCATION_LATITUDE IS NOT NULL AND S.LOCATION_LATITUDE IS NOT NULL AND
                        D.LOCATION_LATITUDE <> S.LOCATION_LATITUDE)
                    OR (D.LOCATION_LATITUDE IS NULL AND S.LOCATION_LATITUDE IS NOT NULL)
                    OR (D.LOCATION_LATITUDE IS NOT NULL AND S.LOCATION_LATITUDE IS NULL)
                    OR (D.LOCATION_LONGITUDE IS NOT NULL AND S.LOCATION_LONGITUDE IS NOT NULL AND
                        D.LOCATION_LONGITUDE <> S.LOCATION_LONGITUDE)
                    OR (D.LOCATION_LONGITUDE IS NULL AND S.LOCATION_LONGITUDE IS NOT NULL)
                    OR (D.LOCATION_LONGITUDE IS NOT NULL AND S.LOCATION_LONGITUDE IS NULL)
                    OR (D.LOCATION_GIS_PRIM IS NOT NULL AND S.LOCATION_GIS_PRIM IS NOT NULL AND
                        D.LOCATION_GIS_PRIM <> S.LOCATION_GIS_PRIM)
                    OR (D.LOCATION_GIS_PRIM IS NULL AND S.LOCATION_GIS_PRIM IS NOT NULL)
                    OR (D.LOCATION_GIS_PRIM IS NOT NULL AND S.LOCATION_GIS_PRIM IS NULL)
                    OR (D.LOCATION_GIS_ORIG IS NOT NULL AND S.LOCATION_GIS_ORIG IS NOT NULL AND
                        D.LOCATION_GIS_ORIG <> S.LOCATION_GIS_ORIG)
                    OR (D.LOCATION_GIS_ORIG IS NULL AND S.LOCATION_GIS_ORIG IS NOT NULL)
                    OR (D.LOCATION_GIS_ORIG IS NOT NULL AND S.LOCATION_GIS_ORIG IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANSACTION_CODE               = S.TRANSACTION_CODE,
                D.ACTIVITY_LOCATION              = S.ACTIVITY_LOCATION,
                D.SOURCE_TYPE                    = S.SOURCE_TYPE,
                D.RECEIVE_DATE                   = S.RECEIVE_DATE,
                D.HANDLER_NAME                   = S.HANDLER_NAME,
                D.ACKNOWLEDGE_DATE               = S.ACKNOWLEDGE_DATE,
                D.NON_NOTIFIER                   = S.NON_NOTIFIER,
                D.OFF_SITE_RECEIPT               = S.OFF_SITE_RECEIPT,
                D.ACCESSIBILITY                  = S.ACCESSIBILITY,
                D.COUNTY_CODE_OWNER              = S.COUNTY_CODE_OWNER,
                D.COUNTY_CODE                    = S.COUNTY_CODE,
                D.NOTES                          = S.NOTES,
                D.ACKNOWLEDGE_FLAG               = S.ACKNOWLEDGE_FLAG,
                D.LOCATION_STREET1               = S.LOCATION_STREET1,
                D.LOCATION_STREET2               = S.LOCATION_STREET2,
                D.LOCATION_CITY                  = S.LOCATION_CITY,
                D.LOCATION_STATE                 = S.LOCATION_STATE,
                D.LOCATION_COUNTRY               = S.LOCATION_COUNTRY,
                D.LOCATION_ZIP                   = S.LOCATION_ZIP,
                D.MAIL_STREET1                   = S.MAIL_STREET1,
                D.MAIL_STREET2                   = S.MAIL_STREET2,
                D.MAIL_CITY                      = S.MAIL_CITY,
                D.MAIL_STATE                     = S.MAIL_STATE,
                D.MAIL_COUNTRY                   = S.MAIL_COUNTRY,
                D.MAIL_ZIP                       = S.MAIL_ZIP,
                D.CONTACT_FIRST_NAME             = S.CONTACT_FIRST_NAME,
                D.CONTACT_MIDDLE_INITIAL         = S.CONTACT_MIDDLE_INITIAL,
                D.CONTACT_LAST_NAME              = S.CONTACT_LAST_NAME,
                D.CONTACT_ORG_NAME               = S.CONTACT_ORG_NAME,
                D.CONTACT_TITLE                  = D.CONTACT_TITLE,
                D.CONTACT_EMAIL_ADDRESS          = S.CONTACT_EMAIL_ADDRESS,
                D.CONTACT_PHONE                  = S.CONTACT_PHONE,
                D.CONTACT_PHONE_EXT              = S.CONTACT_PHONE_EXT,
                D.CONTACT_FAX                    = S.CONTACT_FAX,
                D.CONTACT_STREET1                = S.CONTACT_STREET1,
                D.CONTACT_STREET2                = S.CONTACT_STREET2,
                D.CONTACT_CITY                   = S.CONTACT_CITY,
                D.CONTACT_STATE                  = S.CONTACT_STATE,
                D.CONTACT_COUNTRY                = S.CONTACT_COUNTRY,
                D.CONTACT_ZIP                    = S.CONTACT_ZIP,
                D.PCONTACT_FIRST_NAME            = S.PCONTACT_FIRST_NAME,
                D.PCONTACT_MIDDLE_NAME           = S.PCONTACT_MIDDLE_NAME,
                D.PCONTACT_LAST_NAME             = S.PCONTACT_LAST_NAME,
                D.PCONTACT_ORG_NAME              = S.PCONTACT_ORG_NAME,
                D.PCONTACT_TITLE                 = S.PCONTACT_TITLE,
                D.PCONTACT_EMAIL_ADDRESS         = S.PCONTACT_EMAIL_ADDRESS,
                D.PCONTACT_PHONE                 = S.PCONTACT_PHONE,
                D.PCONTACT_PHONE_EXT             = S.PCONTACT_PHONE_EXT,
                D.PCONTACT_FAX                   = S.PCONTACT_FAX,
                D.PCONTACT_STREET1               = S.PCONTACT_STREET1,
                D.PCONTACT_STREET2               = S.PCONTACT_STREET2,
                D.PCONTACT_CITY                  = S.PCONTACT_CITY,
                D.PCONTACT_STATE                 = S.PCONTACT_STATE,
                D.PCONTACT_COUNTRY               = S.PCONTACT_COUNTRY,
                D.PCONTACT_ZIP                   = S.PCONTACT_ZIP,
                D.USED_OIL_BURNER                = S.USED_OIL_BURNER,
                D.USED_OIL_PROCESSOR             = S.USED_OIL_PROCESSOR,
                D.USED_OIL_REFINER               = S.USED_OIL_REFINER,
                D.USED_OIL_MARKET_BURNER         = S.USED_OIL_MARKET_BURNER,
                D.USED_OIL_SPEC_MARKETER         = S.USED_OIL_SPEC_MARKETER,
                D.USED_OIL_TRANSFER_FACILITY     = S.USED_OIL_TRANSFER_FACILITY,
                D.USED_OIL_TRANSPORTER           = S.USED_OIL_TRANSPORTER,
                D.LAND_TYPE                      = S.LAND_TYPE,
                D.STATE_DISTRICT_OWNER           = S.STATE_DISTRICT_OWNER,
                D.STATE_DISTRICT                 = S.STATE_DISTRICT,
                D.IMPORTER_ACTIVITY              = S.IMPORTER_ACTIVITY,
                D.MIXED_WASTE_GENERATOR          = S.MIXED_WASTE_GENERATOR,
                D.RECYCLER_ACTIVITY              = S.RECYCLER_ACTIVITY,
                D.TRANSPORTER_ACTIVITY           = S.TRANSPORTER_ACTIVITY,
                D.TSD_ACTIVITY                   = S.TSD_ACTIVITY,
                D.UNDERGROUND_INJECTION_ACTIVITY = S.UNDERGROUND_INJECTION_ACTIVITY,
                D.ONSITE_BURNER_EXEMPTION        = S.ONSITE_BURNER_EXEMPTION,
                D.FURNACE_EXEMPTION              = S.FURNACE_EXEMPTION,
                D.SHORT_TERM_GEN_IND             = S.SHORT_TERM_GEN_IND,
                D.TRANSFER_FACILITY_IND          = S.TRANSFER_FACILITY_IND,
                D.COLLEGE_IND                    = S.COLLEGE_IND,
                D.HOSPITAL_IND                   = S.HOSPITAL_IND,
                D.NON_PROFIT_IND                 = S.NON_PROFIT_IND,
                D.WITHDRAWAL_IND                 = S.WITHDRAWAL_IND,
                D.TRANS_CODE                     = S.TRANS_CODE,
                D.NOTIFICATION_RSN_CODE          = S.NOTIFICATION_RSN_CODE,
                D.EFFC_DATE                      = S.EFFC_DATE,
                D.FINANCIAL_ASSURANCE_IND        = S.FINANCIAL_ASSURANCE_IND,
                D.MAIL_STREET_NUMBER             = S.MAIL_STREET_NUMBER,
                D.LOCATION_STREET_NUMBER         = S.LOCATION_STREET_NUMBER,
                D.NON_NOTIFIER_TEXT              = S.NON_NOTIFIER_TEXT,
                D.ACCESSIBILITY_TEXT             = S.ACCESSIBILITY_TEXT,
                D.STATE_DISTRICT_TEXT            = S.STATE_DISTRICT_TEXT,
                D.INTRNL_NOTES                   = S.INTRNL_NOTES,
                D.SHORT_TERM_INTRNL_NOTES        = S.SHORT_TERM_INTRNL_NOTES,
                D.NATURE_OF_BUSINESS_TEXT        = S.NATURE_OF_BUSINESS_TEXT,
                D.TSD_DATE                       = S.TSD_DATE,
                D.UNIVERSAL_WASTE_DEST_FACILITY  = S.UNIVERSAL_WASTE_DEST_FACILITY,
                D.STATE_WASTE_GENERATOR_OWNER    = S.STATE_WASTE_GENERATOR_OWNER,
                D.STATE_WASTE_GENERATOR          = S.STATE_WASTE_GENERATOR,
                D.FED_WASTE_GENERATOR_OWNER      = S.FED_WASTE_GENERATOR_OWNER,
                D.FED_WASTE_GENERATOR            = S.FED_WASTE_GENERATOR,
                D.RECOGNIZED_TRADER_IMPORTER_IND = S.RECOGNIZED_TRADER_IMPORTER_IND,
                D.RECOGNIZED_TRADER_EXPORTER_IND = S.RECOGNIZED_TRADER_EXPORTER_IND,
                D.SLAB_IMPORTER_IND              = S.SLAB_IMPORTER_IND,
                D.SLAB_EXPORTER_IND              = S.SLAB_EXPORTER_IND,
                D.RECYCLER_ACT_NONSTORAGE        = S.RECYCLER_ACT_NONSTORAGE,
                D.MANIFEST_BROKER                = S.MANIFEST_BROKER,
                D.ACKNOWLEDGE_FLAG_IND           = S.ACKNOWLEDGE_FLAG_IND,
                D.INCLUDE_IN_NATIONAL_REPORT_IND = S.INCLUDE_IN_NATIONAL_REPORT_IND,
                D.LQHUW_IND                      = S.LQHUW_IND,
                D.HD_REPORT_CYCLE_YEAR           = S.HD_REPORT_CYCLE_YEAR,
                D.HEALTHCARE_FAC                 = S.HEALTHCARE_FAC,
                D.REVERSE_DISTRIBUTOR            = S.REVERSE_DISTRIBUTOR,
                D.SUBPART_P_WITHDRAWAL           = S.SUBPART_P_WITHDRAWAL,
                D.RECYCLER_IND                   = S.RECYCLER_IND,
                D.CURRENT_RECORD                 = S.CURRENT_RECORD,
                D.CREATED_BY_USERID              = S.CREATED_BY_USERID,
                D.H_CREATED_DATE                 = S.H_CREATED_DATE,
                D.DATA_ORIG                      = S.DATA_ORIG,
                D.LOCATION_LATITUDE              = S.LOCATION_LATITUDE,
                D.LOCATION_LONGITUDE             = S.LOCATION_LONGITUDE,
                D.LOCATION_GIS_PRIM              = S.LOCATION_GIS_PRIM,
                D.LOCATION_GIS_ORIG              = S.LOCATION_GIS_ORIG
        WHEN NOT MATCHED THEN
            INSERT
            (HD_HBASIC_ID,
             TRANSACTION_CODE,
             ACTIVITY_LOCATION,
             SEQ_NUMBER,
             SOURCE_TYPE,
             RECEIVE_DATE,
             HANDLER_NAME,
             ACKNOWLEDGE_DATE,
             NON_NOTIFIER,
             OFF_SITE_RECEIPT,
             ACCESSIBILITY,
             COUNTY_CODE_OWNER,
             COUNTY_CODE,
             NOTES,
             ACKNOWLEDGE_FLAG,
             LOCATION_STREET1,
             LOCATION_STREET2,
             LOCATION_CITY,
             LOCATION_STATE,
             LOCATION_COUNTRY,
             LOCATION_ZIP,
             MAIL_STREET1,
             MAIL_STREET2,
             MAIL_CITY,
             MAIL_STATE,
             MAIL_COUNTRY,
             MAIL_ZIP,
             CONTACT_FIRST_NAME,
             CONTACT_MIDDLE_INITIAL,
             CONTACT_LAST_NAME,
             CONTACT_ORG_NAME,
             CONTACT_TITLE,
             CONTACT_EMAIL_ADDRESS,
             CONTACT_PHONE,
             CONTACT_PHONE_EXT,
             CONTACT_FAX,
             CONTACT_STREET1,
             CONTACT_STREET2,
             CONTACT_CITY,
             CONTACT_STATE,
             CONTACT_COUNTRY,
             CONTACT_ZIP,
             PCONTACT_FIRST_NAME,
             PCONTACT_MIDDLE_NAME,
             PCONTACT_LAST_NAME,
             PCONTACT_ORG_NAME,
             PCONTACT_TITLE,
             PCONTACT_EMAIL_ADDRESS,
             PCONTACT_PHONE,
             PCONTACT_PHONE_EXT,
             PCONTACT_FAX,
             PCONTACT_STREET1,
             PCONTACT_STREET2,
             PCONTACT_CITY,
             PCONTACT_STATE,
             PCONTACT_COUNTRY,
             PCONTACT_ZIP,
             USED_OIL_BURNER,
             USED_OIL_PROCESSOR,
             USED_OIL_REFINER,
             USED_OIL_MARKET_BURNER,
             USED_OIL_SPEC_MARKETER,
             USED_OIL_TRANSFER_FACILITY,
             USED_OIL_TRANSPORTER,
             LAND_TYPE,
             STATE_DISTRICT_OWNER,
             STATE_DISTRICT,
             IMPORTER_ACTIVITY,
             MIXED_WASTE_GENERATOR,
             RECYCLER_ACTIVITY,
             TRANSPORTER_ACTIVITY,
             TSD_ACTIVITY,
             UNDERGROUND_INJECTION_ACTIVITY,
             ONSITE_BURNER_EXEMPTION,
             FURNACE_EXEMPTION,
             SHORT_TERM_GEN_IND,
             TRANSFER_FACILITY_IND,
             COLLEGE_IND,
             HOSPITAL_IND,
             NON_PROFIT_IND,
             WITHDRAWAL_IND,
             TRANS_CODE,
             NOTIFICATION_RSN_CODE,
             EFFC_DATE,
             FINANCIAL_ASSURANCE_IND,
             MAIL_STREET_NUMBER,
             LOCATION_STREET_NUMBER,
             NON_NOTIFIER_TEXT,
             ACCESSIBILITY_TEXT,
             STATE_DISTRICT_TEXT,
             INTRNL_NOTES,
             SHORT_TERM_INTRNL_NOTES,
             NATURE_OF_BUSINESS_TEXT,
             TSD_DATE,
             UNIVERSAL_WASTE_DEST_FACILITY,
             STATE_WASTE_GENERATOR_OWNER,
             STATE_WASTE_GENERATOR,
             FED_WASTE_GENERATOR_OWNER,
             FED_WASTE_GENERATOR,
             RECOGNIZED_TRADER_IMPORTER_IND,
             RECOGNIZED_TRADER_EXPORTER_IND,
             SLAB_IMPORTER_IND,
             SLAB_EXPORTER_IND,
             RECYCLER_ACT_NONSTORAGE,
             MANIFEST_BROKER,
             ACKNOWLEDGE_FLAG_IND,
             INCLUDE_IN_NATIONAL_REPORT_IND,
             LQHUW_IND,
             HD_REPORT_CYCLE_YEAR,
             HEALTHCARE_FAC,
             REVERSE_DISTRIBUTOR,
             SUBPART_P_WITHDRAWAL,
             RECYCLER_IND,
             CURRENT_RECORD,
             CREATED_BY_USERID,
             H_CREATED_DATE,
             DATA_ORIG,
             LOCATION_LATITUDE,
             LOCATION_LONGITUDE,
             LOCATION_GIS_PRIM,
             LOCATION_GIS_ORIG)
            VALUES (S.WH_HD_HBASIC_ID,
                    S.TRANSACTION_CODE,
                    S.ACTIVITY_LOCATION,
                    S.SEQ_NUMBER,
                    S.SOURCE_TYPE,
                    S.RECEIVE_DATE,
                    S.HANDLER_NAME,
                    S.ACKNOWLEDGE_DATE,
                    S.NON_NOTIFIER,
                    S.OFF_SITE_RECEIPT,
                    S.ACCESSIBILITY,
                    S.COUNTY_CODE_OWNER,
                    S.COUNTY_CODE,
                    S.NOTES,
                    S.ACKNOWLEDGE_FLAG,
                    S.LOCATION_STREET1,
                    S.LOCATION_STREET2,
                    S.LOCATION_CITY,
                    S.LOCATION_STATE,
                    S.LOCATION_COUNTRY,
                    S.LOCATION_ZIP,
                    S.MAIL_STREET1,
                    S.MAIL_STREET2,
                    S.MAIL_CITY,
                    S.MAIL_STATE,
                    S.MAIL_COUNTRY,
                    S.MAIL_ZIP,
                    S.CONTACT_FIRST_NAME,
                    S.CONTACT_MIDDLE_INITIAL,
                    S.CONTACT_LAST_NAME,
                    S.CONTACT_ORG_NAME,
                    S.CONTACT_TITLE,
                    S.CONTACT_EMAIL_ADDRESS,
                    S.CONTACT_PHONE,
                    S.CONTACT_PHONE_EXT,
                    S.CONTACT_FAX,
                    S.CONTACT_STREET1,
                    S.CONTACT_STREET2,
                    S.CONTACT_CITY,
                    S.CONTACT_STATE,
                    S.CONTACT_COUNTRY,
                    S.CONTACT_ZIP,
                    S.PCONTACT_FIRST_NAME,
                    S.PCONTACT_MIDDLE_NAME,
                    S.PCONTACT_LAST_NAME,
                    S.PCONTACT_ORG_NAME,
                    S.PCONTACT_TITLE,
                    S.PCONTACT_EMAIL_ADDRESS,
                    S.PCONTACT_PHONE,
                    S.PCONTACT_PHONE_EXT,
                    S.PCONTACT_FAX,
                    S.PCONTACT_STREET1,
                    S.PCONTACT_STREET2,
                    S.PCONTACT_CITY,
                    S.PCONTACT_STATE,
                    S.PCONTACT_COUNTRY,
                    S.PCONTACT_ZIP,
                    S.USED_OIL_BURNER,
                    S.USED_OIL_PROCESSOR,
                    S.USED_OIL_REFINER,
                    S.USED_OIL_MARKET_BURNER,
                    S.USED_OIL_SPEC_MARKETER,
                    S.USED_OIL_TRANSFER_FACILITY,
                    S.USED_OIL_TRANSPORTER,
                    S.LAND_TYPE,
                    S.STATE_DISTRICT_OWNER,
                    S.STATE_DISTRICT,
                    S.IMPORTER_ACTIVITY,
                    S.MIXED_WASTE_GENERATOR,
                    S.RECYCLER_ACTIVITY,
                    S.TRANSPORTER_ACTIVITY,
                    S.TSD_ACTIVITY,
                    S.UNDERGROUND_INJECTION_ACTIVITY,
                    S.ONSITE_BURNER_EXEMPTION,
                    S.FURNACE_EXEMPTION,
                    S.SHORT_TERM_GEN_IND,
                    S.TRANSFER_FACILITY_IND,
                    S.COLLEGE_IND,
                    S.HOSPITAL_IND,
                    S.NON_PROFIT_IND,
                    S.WITHDRAWAL_IND,
                    S.TRANS_CODE,
                    S.NOTIFICATION_RSN_CODE,
                    S.EFFC_DATE,
                    S.FINANCIAL_ASSURANCE_IND,
                    S.MAIL_STREET_NUMBER,
                    S.LOCATION_STREET_NUMBER,
                    S.NON_NOTIFIER_TEXT,
                    S.ACCESSIBILITY_TEXT,
                    S.STATE_DISTRICT_TEXT,
                    S.INTRNL_NOTES,
                    S.SHORT_TERM_INTRNL_NOTES,
                    S.NATURE_OF_BUSINESS_TEXT,
                    S.TSD_DATE,
                    S.UNIVERSAL_WASTE_DEST_FACILITY,
                    S.STATE_WASTE_GENERATOR_OWNER,
                    S.STATE_WASTE_GENERATOR,
                    S.FED_WASTE_GENERATOR_OWNER,
                    S.FED_WASTE_GENERATOR,
                    S.RECOGNIZED_TRADER_IMPORTER_IND,
                    S.RECOGNIZED_TRADER_EXPORTER_IND,
                    S.SLAB_IMPORTER_IND,
                    S.SLAB_EXPORTER_IND,
                    S.RECYCLER_ACT_NONSTORAGE,
                    S.MANIFEST_BROKER,
                    S.ACKNOWLEDGE_FLAG_IND,
                    S.INCLUDE_IN_NATIONAL_REPORT_IND,
                    S.LQHUW_IND,
                    S.HD_REPORT_CYCLE_YEAR,
                    S.HEALTHCARE_FAC,
                    S.REVERSE_DISTRIBUTOR,
                    S.SUBPART_P_WITHDRAWAL,
                    S.RECYCLER_IND,
                    S.CURRENT_RECORD,
                    S.CREATED_BY_USERID,
                    S.H_CREATED_DATE,
                    S.DATA_ORIG,
                    S.LOCATION_LATITUDE,
                    S.LOCATION_LONGITUDE,
                    S.LOCATION_GIS_PRIM,
                    S.LOCATION_GIS_ORIG);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 20-reporting_db-ru_merge_report_univ-sp.sql 
 */
/*************************************************************************************************
** ObjectName: RU_MERGE_REPORT_UNIV.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_RU_REPORT_UNIV table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   Windsor     Created.
**  04/24/2020   Windsor     Upgraded to 5.8 -- added SUBPART_P_IND.
**  02/14/2021   Windsor     Added columns LOCATION_LATITUDE, LOCATION_LONGITUDE, LOCATION_GIS_PRIM
**                           and LOCATION_GIS_ORIG.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[RU_MERGE_REPORT_UNIV] @RU_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_RU_REPORT_UNIV D
        USING (SELECT *
               FROM ETL_RU_REPORT_UNIV_VW
               WHERE RU_SUBM_ID = @RU_SUBM_ID) S
        ON (D.RU_REPORT_UNIV_ID = S.WH_RU_REPORT_UNIV_ID)
        WHEN MATCHED
            AND (
                    (D.HANDLER_ID IS NOT NULL AND S.HANDLER_ID IS NOT NULL AND D.HANDLER_ID <> S.HANDLER_ID)
                    OR (D.HANDLER_ID IS NULL AND S.HANDLER_ID IS NOT NULL)
                    OR (D.HANDLER_ID IS NOT NULL AND S.HANDLER_ID IS NULL)
                    OR (D.ACTIVITY_LOCATION IS NOT NULL AND S.ACTIVITY_LOCATION IS NOT NULL AND
                        D.ACTIVITY_LOCATION <> S.ACTIVITY_LOCATION)
                    OR (D.ACTIVITY_LOCATION IS NULL AND S.ACTIVITY_LOCATION IS NOT NULL)
                    OR (D.ACTIVITY_LOCATION IS NOT NULL AND S.ACTIVITY_LOCATION IS NULL)
                    OR (D.SOURCE_TYPE IS NOT NULL AND S.SOURCE_TYPE IS NOT NULL AND D.SOURCE_TYPE <> S.SOURCE_TYPE)
                    OR (D.SOURCE_TYPE IS NULL AND S.SOURCE_TYPE IS NOT NULL)
                    OR (D.SOURCE_TYPE IS NOT NULL AND S.SOURCE_TYPE IS NULL)
                    OR (D.SEQ_NUMBER IS NOT NULL AND S.SEQ_NUMBER IS NOT NULL AND D.SEQ_NUMBER <> S.SEQ_NUMBER)
                    OR (D.SEQ_NUMBER IS NULL AND S.SEQ_NUMBER IS NOT NULL)
                    OR (D.SEQ_NUMBER IS NOT NULL AND S.SEQ_NUMBER IS NULL)
                    OR (D.RECEIVE_DATE IS NOT NULL AND S.RECEIVE_DATE IS NOT NULL AND D.RECEIVE_DATE <> S.RECEIVE_DATE)
                    OR (D.RECEIVE_DATE IS NULL AND S.RECEIVE_DATE IS NOT NULL)
                    OR (D.RECEIVE_DATE IS NOT NULL AND S.RECEIVE_DATE IS NULL)
                    OR (D.HANDLER_NAME IS NOT NULL AND S.HANDLER_NAME IS NOT NULL AND D.HANDLER_NAME <> S.HANDLER_NAME)
                    OR (D.HANDLER_NAME IS NULL AND S.HANDLER_NAME IS NOT NULL)
                    OR (D.HANDLER_NAME IS NOT NULL AND S.HANDLER_NAME IS NULL)
                    OR
                    (D.NON_NOTIFIER_IND IS NOT NULL AND S.NON_NOTIFIER_IND IS NOT NULL AND
                     D.NON_NOTIFIER_IND <> S.NON_NOTIFIER_IND)
                    OR (D.NON_NOTIFIER_IND IS NULL AND S.NON_NOTIFIER_IND IS NOT NULL)
                    OR (D.NON_NOTIFIER_IND IS NOT NULL AND S.NON_NOTIFIER_IND IS NULL)
                    OR
                    (D.ACCESSIBILITY IS NOT NULL AND S.ACCESSIBILITY IS NOT NULL AND D.ACCESSIBILITY <> S.ACCESSIBILITY)
                    OR (D.ACCESSIBILITY IS NULL AND S.ACCESSIBILITY IS NOT NULL)
                    OR (D.ACCESSIBILITY IS NOT NULL AND S.ACCESSIBILITY IS NULL)
                    OR (D.REPORT_CYCLE IS NOT NULL AND S.REPORT_CYCLE IS NOT NULL AND D.REPORT_CYCLE <> S.REPORT_CYCLE)
                    OR (D.REPORT_CYCLE IS NULL AND S.REPORT_CYCLE IS NOT NULL)
                    OR (D.REPORT_CYCLE IS NOT NULL AND S.REPORT_CYCLE IS NULL)
                    OR (D.REGION IS NOT NULL AND S.REGION IS NOT NULL AND D.REGION <> S.REGION)
                    OR (D.REGION IS NULL AND S.REGION IS NOT NULL)
                    OR (D.REGION IS NOT NULL AND S.REGION IS NULL)
                    OR (D.STATE IS NOT NULL AND S.STATE IS NOT NULL AND D.STATE <> S.STATE)
                    OR (D.STATE IS NULL AND S.STATE IS NOT NULL)
                    OR (D.STATE IS NOT NULL AND S.STATE IS NULL)
                    OR (D.EXTRACT_FLAG IS NOT NULL AND S.EXTRACT_FLAG IS NOT NULL AND D.EXTRACT_FLAG <> S.EXTRACT_FLAG)
                    OR (D.EXTRACT_FLAG IS NULL AND S.EXTRACT_FLAG IS NOT NULL)
                    OR (D.EXTRACT_FLAG IS NOT NULL AND S.EXTRACT_FLAG IS NULL)
                    OR (D.ACTIVE_SITE IS NOT NULL AND S.ACTIVE_SITE IS NOT NULL AND D.ACTIVE_SITE <> S.ACTIVE_SITE)
                    OR (D.ACTIVE_SITE IS NULL AND S.ACTIVE_SITE IS NOT NULL)
                    OR (D.ACTIVE_SITE IS NOT NULL AND S.ACTIVE_SITE IS NULL)
                    OR (D.COUNTY_CODE IS NOT NULL AND S.COUNTY_CODE IS NOT NULL AND D.COUNTY_CODE <> S.COUNTY_CODE)
                    OR (D.COUNTY_CODE IS NULL AND S.COUNTY_CODE IS NOT NULL)
                    OR (D.COUNTY_CODE IS NOT NULL AND S.COUNTY_CODE IS NULL)
                    OR (D.COUNTY_NAME IS NOT NULL AND S.COUNTY_NAME IS NOT NULL AND D.COUNTY_NAME <> S.COUNTY_NAME)
                    OR (D.COUNTY_NAME IS NULL AND S.COUNTY_NAME IS NOT NULL)
                    OR (D.COUNTY_NAME IS NOT NULL AND S.COUNTY_NAME IS NULL)
                    OR (D.LOCATION_STREET_NUMBER IS NOT NULL AND S.LOCATION_STREET_NUMBER IS NOT NULL AND
                        D.LOCATION_STREET_NUMBER <> S.LOCATION_STREET_NUMBER)
                    OR (D.LOCATION_STREET_NUMBER IS NULL AND S.LOCATION_STREET_NUMBER IS NOT NULL)
                    OR (D.LOCATION_STREET_NUMBER IS NOT NULL AND S.LOCATION_STREET_NUMBER IS NULL)
                    OR
                    (D.LOCATION_STREET1 IS NOT NULL AND S.LOCATION_STREET1 IS NOT NULL AND
                     D.LOCATION_STREET1 <> S.LOCATION_STREET1)
                    OR (D.LOCATION_STREET1 IS NULL AND S.LOCATION_STREET1 IS NOT NULL)
                    OR (D.LOCATION_STREET1 IS NOT NULL AND S.LOCATION_STREET1 IS NULL)
                    OR
                    (D.LOCATION_STREET2 IS NOT NULL AND S.LOCATION_STREET2 IS NOT NULL AND
                     D.LOCATION_STREET2 <> S.LOCATION_STREET2)
                    OR (D.LOCATION_STREET2 IS NULL AND S.LOCATION_STREET2 IS NOT NULL)
                    OR (D.LOCATION_STREET2 IS NOT NULL AND S.LOCATION_STREET2 IS NULL)
                    OR
                    (D.LOCATION_CITY IS NOT NULL AND S.LOCATION_CITY IS NOT NULL AND D.LOCATION_CITY <> S.LOCATION_CITY)
                    OR (D.LOCATION_CITY IS NULL AND S.LOCATION_CITY IS NOT NULL)
                    OR (D.LOCATION_CITY IS NOT NULL AND S.LOCATION_CITY IS NULL)
                    OR
                    (D.LOCATION_STATE IS NOT NULL AND S.LOCATION_STATE IS NOT NULL AND
                     D.LOCATION_STATE <> S.LOCATION_STATE)
                    OR (D.LOCATION_STATE IS NULL AND S.LOCATION_STATE IS NOT NULL)
                    OR (D.LOCATION_STATE IS NOT NULL AND S.LOCATION_STATE IS NULL)
                    OR
                    (D.LOCATION_COUNTRY IS NOT NULL AND S.LOCATION_COUNTRY IS NOT NULL AND
                     D.LOCATION_COUNTRY <> S.LOCATION_COUNTRY)
                    OR (D.LOCATION_COUNTRY IS NULL AND S.LOCATION_COUNTRY IS NOT NULL)
                    OR (D.LOCATION_COUNTRY IS NOT NULL AND S.LOCATION_COUNTRY IS NULL)
                    OR (D.LOCATION_ZIP IS NOT NULL AND S.LOCATION_ZIP IS NOT NULL AND D.LOCATION_ZIP <> S.LOCATION_ZIP)
                    OR (D.LOCATION_ZIP IS NULL AND S.LOCATION_ZIP IS NOT NULL)
                    OR (D.LOCATION_ZIP IS NOT NULL AND S.LOCATION_ZIP IS NULL)
                    OR (D.MAIL_STREET_NUMBER IS NOT NULL AND S.MAIL_STREET_NUMBER IS NOT NULL AND
                        D.MAIL_STREET_NUMBER <> S.MAIL_STREET_NUMBER)
                    OR (D.MAIL_STREET_NUMBER IS NULL AND S.MAIL_STREET_NUMBER IS NOT NULL)
                    OR (D.MAIL_STREET_NUMBER IS NOT NULL AND S.MAIL_STREET_NUMBER IS NULL)
                    OR (D.MAIL_STREET1 IS NOT NULL AND S.MAIL_STREET1 IS NOT NULL AND D.MAIL_STREET1 <> S.MAIL_STREET1)
                    OR (D.MAIL_STREET1 IS NULL AND S.MAIL_STREET1 IS NOT NULL)
                    OR (D.MAIL_STREET1 IS NOT NULL AND S.MAIL_STREET1 IS NULL)
                    OR (D.MAIL_STREET2 IS NOT NULL AND S.MAIL_STREET2 IS NOT NULL AND D.MAIL_STREET2 <> S.MAIL_STREET2)
                    OR (D.MAIL_STREET2 IS NULL AND S.MAIL_STREET2 IS NOT NULL)
                    OR (D.MAIL_STREET2 IS NOT NULL AND S.MAIL_STREET2 IS NULL)
                    OR (D.MAIL_CITY IS NOT NULL AND S.MAIL_CITY IS NOT NULL AND D.MAIL_CITY <> S.MAIL_CITY)
                    OR (D.MAIL_CITY IS NULL AND S.MAIL_CITY IS NOT NULL)
                    OR (D.MAIL_CITY IS NOT NULL AND S.MAIL_CITY IS NULL)
                    OR (D.MAIL_STATE IS NOT NULL AND S.MAIL_STATE IS NOT NULL AND D.MAIL_STATE <> S.MAIL_STATE)
                    OR (D.MAIL_STATE IS NULL AND S.MAIL_STATE IS NOT NULL)
                    OR (D.MAIL_STATE IS NOT NULL AND S.MAIL_STATE IS NULL)
                    OR (D.MAIL_COUNTRY IS NOT NULL AND S.MAIL_COUNTRY IS NOT NULL AND D.MAIL_COUNTRY <> S.MAIL_COUNTRY)
                    OR (D.MAIL_COUNTRY IS NULL AND S.MAIL_COUNTRY IS NOT NULL)
                    OR (D.MAIL_COUNTRY IS NOT NULL AND S.MAIL_COUNTRY IS NULL)
                    OR (D.MAIL_ZIP IS NOT NULL AND S.MAIL_ZIP IS NOT NULL AND D.MAIL_ZIP <> S.MAIL_ZIP)
                    OR (D.MAIL_ZIP IS NULL AND S.MAIL_ZIP IS NOT NULL)
                    OR (D.MAIL_ZIP IS NOT NULL AND S.MAIL_ZIP IS NULL)
                    OR (D.CONTACT_STREET_NUMBER IS NOT NULL AND S.CONTACT_STREET_NUMBER IS NOT NULL AND
                        D.CONTACT_STREET_NUMBER <> S.CONTACT_STREET_NUMBER)
                    OR (D.CONTACT_STREET_NUMBER IS NULL AND S.CONTACT_STREET_NUMBER IS NOT NULL)
                    OR (D.CONTACT_STREET_NUMBER IS NOT NULL AND S.CONTACT_STREET_NUMBER IS NULL)
                    OR (D.CONTACT_STREET1 IS NOT NULL AND S.CONTACT_STREET1 IS NOT NULL AND
                        D.CONTACT_STREET1 <> S.CONTACT_STREET1)
                    OR (D.CONTACT_STREET1 IS NULL AND S.CONTACT_STREET1 IS NOT NULL)
                    OR (D.CONTACT_STREET1 IS NOT NULL AND S.CONTACT_STREET1 IS NULL)
                    OR (D.CONTACT_STREET2 IS NOT NULL AND S.CONTACT_STREET2 IS NOT NULL AND
                        D.CONTACT_STREET2 <> S.CONTACT_STREET2)
                    OR (D.CONTACT_STREET2 IS NULL AND S.CONTACT_STREET2 IS NOT NULL)
                    OR (D.CONTACT_STREET2 IS NOT NULL AND S.CONTACT_STREET2 IS NULL)
                    OR (D.CONTACT_CITY IS NOT NULL AND S.CONTACT_CITY IS NOT NULL AND D.CONTACT_CITY <> S.CONTACT_CITY)
                    OR (D.CONTACT_CITY IS NULL AND S.CONTACT_CITY IS NOT NULL)
                    OR (D.CONTACT_CITY IS NOT NULL AND S.CONTACT_CITY IS NULL)
                    OR
                    (D.CONTACT_STATE IS NOT NULL AND S.CONTACT_STATE IS NOT NULL AND D.CONTACT_STATE <> S.CONTACT_STATE)
                    OR (D.CONTACT_STATE IS NULL AND S.CONTACT_STATE IS NOT NULL)
                    OR (D.CONTACT_STATE IS NOT NULL AND S.CONTACT_STATE IS NULL)
                    OR (D.CONTACT_COUNTRY IS NOT NULL AND S.CONTACT_COUNTRY IS NOT NULL AND
                        D.CONTACT_COUNTRY <> S.CONTACT_COUNTRY)
                    OR (D.CONTACT_COUNTRY IS NULL AND S.CONTACT_COUNTRY IS NOT NULL)
                    OR (D.CONTACT_COUNTRY IS NOT NULL AND S.CONTACT_COUNTRY IS NULL)
                    OR (D.CONTACT_ZIP IS NOT NULL AND S.CONTACT_ZIP IS NOT NULL AND D.CONTACT_ZIP <> S.CONTACT_ZIP)
                    OR (D.CONTACT_ZIP IS NULL AND S.CONTACT_ZIP IS NOT NULL)
                    OR (D.CONTACT_ZIP IS NOT NULL AND S.CONTACT_ZIP IS NULL)
                    OR (D.CONTACT_NAME IS NOT NULL AND S.CONTACT_NAME IS NOT NULL AND D.CONTACT_NAME <> S.CONTACT_NAME)
                    OR (D.CONTACT_NAME IS NULL AND S.CONTACT_NAME IS NOT NULL)
                    OR (D.CONTACT_NAME IS NOT NULL AND S.CONTACT_NAME IS NULL)
                    OR
                    (D.CONTACT_PHONE IS NOT NULL AND S.CONTACT_PHONE IS NOT NULL AND D.CONTACT_PHONE <> S.CONTACT_PHONE)
                    OR (D.CONTACT_PHONE IS NULL AND S.CONTACT_PHONE IS NOT NULL)
                    OR (D.CONTACT_PHONE IS NOT NULL AND S.CONTACT_PHONE IS NULL)
                    OR (D.CONTACT_FAX IS NOT NULL AND S.CONTACT_FAX IS NOT NULL AND D.CONTACT_FAX <> S.CONTACT_FAX)
                    OR (D.CONTACT_FAX IS NULL AND S.CONTACT_FAX IS NOT NULL)
                    OR (D.CONTACT_FAX IS NOT NULL AND S.CONTACT_FAX IS NULL)
                    OR
                    (D.CONTACT_EMAIL IS NOT NULL AND S.CONTACT_EMAIL IS NOT NULL AND D.CONTACT_EMAIL <> S.CONTACT_EMAIL)
                    OR (D.CONTACT_EMAIL IS NULL AND S.CONTACT_EMAIL IS NOT NULL)
                    OR (D.CONTACT_EMAIL IS NOT NULL AND S.CONTACT_EMAIL IS NULL)
                    OR
                    (D.CONTACT_TITLE IS NOT NULL AND S.CONTACT_TITLE IS NOT NULL AND D.CONTACT_TITLE <> S.CONTACT_TITLE)
                    OR (D.CONTACT_TITLE IS NULL AND S.CONTACT_TITLE IS NOT NULL)
                    OR (D.CONTACT_TITLE IS NOT NULL AND S.CONTACT_TITLE IS NULL)
                    OR (D.OWNER_NAME IS NOT NULL AND S.OWNER_NAME IS NOT NULL AND D.OWNER_NAME <> S.OWNER_NAME)
                    OR (D.OWNER_NAME IS NULL AND S.OWNER_NAME IS NOT NULL)
                    OR (D.OWNER_NAME IS NOT NULL AND S.OWNER_NAME IS NULL)
                    OR (D.OWNER_TYPE IS NOT NULL AND S.OWNER_TYPE IS NOT NULL AND D.OWNER_TYPE <> S.OWNER_TYPE)
                    OR (D.OWNER_TYPE IS NULL AND S.OWNER_TYPE IS NOT NULL)
                    OR (D.OWNER_TYPE IS NOT NULL AND S.OWNER_TYPE IS NULL)
                    OR
                    (D.OWNER_SEQ_NUM IS NOT NULL AND S.OWNER_SEQ_NUM IS NOT NULL AND D.OWNER_SEQ_NUM <> S.OWNER_SEQ_NUM)
                    OR (D.OWNER_SEQ_NUM IS NULL AND S.OWNER_SEQ_NUM IS NOT NULL)
                    OR (D.OWNER_SEQ_NUM IS NOT NULL AND S.OWNER_SEQ_NUM IS NULL)
                    OR (D.OPER_NAME IS NOT NULL AND S.OPER_NAME IS NOT NULL AND D.OPER_NAME <> S.OPER_NAME)
                    OR (D.OPER_NAME IS NULL AND S.OPER_NAME IS NOT NULL)
                    OR (D.OPER_NAME IS NOT NULL AND S.OPER_NAME IS NULL)
                    OR (D.OPER_TYPE IS NOT NULL AND S.OPER_TYPE IS NOT NULL AND D.OPER_TYPE <> S.OPER_TYPE)
                    OR (D.OPER_TYPE IS NULL AND S.OPER_TYPE IS NOT NULL)
                    OR (D.OPER_TYPE IS NOT NULL AND S.OPER_TYPE IS NULL)
                    OR (D.OPER_SEQ_NUM IS NOT NULL AND S.OPER_SEQ_NUM IS NOT NULL AND D.OPER_SEQ_NUM <> S.OPER_SEQ_NUM)
                    OR (D.OPER_SEQ_NUM IS NULL AND S.OPER_SEQ_NUM IS NOT NULL)
                    OR (D.OPER_SEQ_NUM IS NOT NULL AND S.OPER_SEQ_NUM IS NULL)
                    OR (D.NAIC1_CODE IS NOT NULL AND S.NAIC1_CODE IS NOT NULL AND D.NAIC1_CODE <> S.NAIC1_CODE)
                    OR (D.NAIC1_CODE IS NULL AND S.NAIC1_CODE IS NOT NULL)
                    OR (D.NAIC1_CODE IS NOT NULL AND S.NAIC1_CODE IS NULL)
                    OR (D.NAIC2_CODE IS NOT NULL AND S.NAIC2_CODE IS NOT NULL AND D.NAIC2_CODE <> S.NAIC2_CODE)
                    OR (D.NAIC2_CODE IS NULL AND S.NAIC2_CODE IS NOT NULL)
                    OR (D.NAIC2_CODE IS NOT NULL AND S.NAIC2_CODE IS NULL)
                    OR (D.NAIC3_CODE IS NOT NULL AND S.NAIC3_CODE IS NOT NULL AND D.NAIC3_CODE <> S.NAIC3_CODE)
                    OR (D.NAIC3_CODE IS NULL AND S.NAIC3_CODE IS NOT NULL)
                    OR (D.NAIC3_CODE IS NOT NULL AND S.NAIC3_CODE IS NULL)
                    OR (D.NAIC4_CODE IS NOT NULL AND S.NAIC4_CODE IS NOT NULL AND D.NAIC4_CODE <> S.NAIC4_CODE)
                    OR (D.NAIC4_CODE IS NULL AND S.NAIC4_CODE IS NOT NULL)
                    OR (D.NAIC4_CODE IS NOT NULL AND S.NAIC4_CODE IS NULL)
                    OR (D.IN_HANDLER_UNIVERSE IS NOT NULL AND S.IN_HANDLER_UNIVERSE IS NOT NULL AND
                        D.IN_HANDLER_UNIVERSE <> S.IN_HANDLER_UNIVERSE)
                    OR (D.IN_HANDLER_UNIVERSE IS NULL AND S.IN_HANDLER_UNIVERSE IS NOT NULL)
                    OR (D.IN_HANDLER_UNIVERSE IS NOT NULL AND S.IN_HANDLER_UNIVERSE IS NULL)
                    OR
                    (D.IN_A_UNIVERSE IS NOT NULL AND S.IN_A_UNIVERSE IS NOT NULL AND D.IN_A_UNIVERSE <> S.IN_A_UNIVERSE)
                    OR (D.IN_A_UNIVERSE IS NULL AND S.IN_A_UNIVERSE IS NOT NULL)
                    OR (D.IN_A_UNIVERSE IS NOT NULL AND S.IN_A_UNIVERSE IS NULL)
                    OR (D.FED_WASTE_GENERATOR_OWNER IS NOT NULL AND S.FED_WASTE_GENERATOR_OWNER IS NOT NULL AND
                        D.FED_WASTE_GENERATOR_OWNER <> S.FED_WASTE_GENERATOR_OWNER)
                    OR (D.FED_WASTE_GENERATOR_OWNER IS NULL AND S.FED_WASTE_GENERATOR_OWNER IS NOT NULL)
                    OR (D.FED_WASTE_GENERATOR_OWNER IS NOT NULL AND S.FED_WASTE_GENERATOR_OWNER IS NULL)
                    OR (D.FED_WASTE_GENERATOR IS NOT NULL AND S.FED_WASTE_GENERATOR IS NOT NULL AND
                        D.FED_WASTE_GENERATOR <> S.FED_WASTE_GENERATOR)
                    OR (D.FED_WASTE_GENERATOR IS NULL AND S.FED_WASTE_GENERATOR IS NOT NULL)
                    OR (D.FED_WASTE_GENERATOR IS NOT NULL AND S.FED_WASTE_GENERATOR IS NULL)
                    OR (D.STATE_WASTE_GENERATOR_OWNER IS NOT NULL AND S.STATE_WASTE_GENERATOR_OWNER IS NOT NULL AND
                        D.STATE_WASTE_GENERATOR_OWNER <> S.STATE_WASTE_GENERATOR_OWNER)
                    OR (D.STATE_WASTE_GENERATOR_OWNER IS NULL AND S.STATE_WASTE_GENERATOR_OWNER IS NOT NULL)
                    OR (D.STATE_WASTE_GENERATOR_OWNER IS NOT NULL AND S.STATE_WASTE_GENERATOR_OWNER IS NULL)
                    OR (D.STATE_WASTE_GENERATOR IS NOT NULL AND S.STATE_WASTE_GENERATOR IS NOT NULL AND
                        D.STATE_WASTE_GENERATOR <> S.STATE_WASTE_GENERATOR)
                    OR (D.STATE_WASTE_GENERATOR IS NULL AND S.STATE_WASTE_GENERATOR IS NOT NULL)
                    OR (D.STATE_WASTE_GENERATOR IS NOT NULL AND S.STATE_WASTE_GENERATOR IS NULL)
                    OR (D.GEN_STATUS IS NOT NULL AND S.GEN_STATUS IS NOT NULL AND D.GEN_STATUS <> S.GEN_STATUS)
                    OR (D.GEN_STATUS IS NULL AND S.GEN_STATUS IS NOT NULL)
                    OR (D.GEN_STATUS IS NOT NULL AND S.GEN_STATUS IS NULL)
                    OR (D.UNIV_WASTE IS NOT NULL AND S.UNIV_WASTE IS NOT NULL AND D.UNIV_WASTE <> S.UNIV_WASTE)
                    OR (D.UNIV_WASTE IS NULL AND S.UNIV_WASTE IS NOT NULL)
                    OR (D.UNIV_WASTE IS NOT NULL AND S.UNIV_WASTE IS NULL)
                    OR (D.LAND_TYPE IS NOT NULL AND S.LAND_TYPE IS NOT NULL AND D.LAND_TYPE <> S.LAND_TYPE)
                    OR (D.LAND_TYPE IS NULL AND S.LAND_TYPE IS NOT NULL)
                    OR (D.LAND_TYPE IS NOT NULL AND S.LAND_TYPE IS NULL)
                    OR (D.STATE_DISTRICT_OWNER IS NOT NULL AND S.STATE_DISTRICT_OWNER IS NOT NULL AND
                        D.STATE_DISTRICT_OWNER <> S.STATE_DISTRICT_OWNER)
                    OR (D.STATE_DISTRICT_OWNER IS NULL AND S.STATE_DISTRICT_OWNER IS NOT NULL)
                    OR (D.STATE_DISTRICT_OWNER IS NOT NULL AND S.STATE_DISTRICT_OWNER IS NULL)
                    OR
                    (D.STATE_DISTRICT IS NOT NULL AND S.STATE_DISTRICT IS NOT NULL AND
                     D.STATE_DISTRICT <> S.STATE_DISTRICT)
                    OR (D.STATE_DISTRICT IS NULL AND S.STATE_DISTRICT IS NOT NULL)
                    OR (D.STATE_DISTRICT IS NOT NULL AND S.STATE_DISTRICT IS NULL)
                    OR (D.SHORT_TERM_GEN_IND IS NOT NULL AND S.SHORT_TERM_GEN_IND IS NOT NULL AND
                        D.SHORT_TERM_GEN_IND <> S.SHORT_TERM_GEN_IND)
                    OR (D.SHORT_TERM_GEN_IND IS NULL AND S.SHORT_TERM_GEN_IND IS NOT NULL)
                    OR (D.SHORT_TERM_GEN_IND IS NOT NULL AND S.SHORT_TERM_GEN_IND IS NULL)
                    OR (D.IMPORTER_ACTIVITY IS NOT NULL AND S.IMPORTER_ACTIVITY IS NOT NULL AND
                        D.IMPORTER_ACTIVITY <> S.IMPORTER_ACTIVITY)
                    OR (D.IMPORTER_ACTIVITY IS NULL AND S.IMPORTER_ACTIVITY IS NOT NULL)
                    OR (D.IMPORTER_ACTIVITY IS NOT NULL AND S.IMPORTER_ACTIVITY IS NULL)
                    OR (D.MIXED_WASTE_GENERATOR IS NOT NULL AND S.MIXED_WASTE_GENERATOR IS NOT NULL AND
                        D.MIXED_WASTE_GENERATOR <> S.MIXED_WASTE_GENERATOR)
                    OR (D.MIXED_WASTE_GENERATOR IS NULL AND S.MIXED_WASTE_GENERATOR IS NOT NULL)
                    OR (D.MIXED_WASTE_GENERATOR IS NOT NULL AND S.MIXED_WASTE_GENERATOR IS NULL)
                    OR (D.TRANSPORTER_ACTIVITY IS NOT NULL AND S.TRANSPORTER_ACTIVITY IS NOT NULL AND
                        D.TRANSPORTER_ACTIVITY <> S.TRANSPORTER_ACTIVITY)
                    OR (D.TRANSPORTER_ACTIVITY IS NULL AND S.TRANSPORTER_ACTIVITY IS NOT NULL)
                    OR (D.TRANSPORTER_ACTIVITY IS NOT NULL AND S.TRANSPORTER_ACTIVITY IS NULL)
                    OR (D.TRANSFER_FACILITY_IND IS NOT NULL AND S.TRANSFER_FACILITY_IND IS NOT NULL AND
                        D.TRANSFER_FACILITY_IND <> S.TRANSFER_FACILITY_IND)
                    OR (D.TRANSFER_FACILITY_IND IS NULL AND S.TRANSFER_FACILITY_IND IS NOT NULL)
                    OR (D.TRANSFER_FACILITY_IND IS NOT NULL AND S.TRANSFER_FACILITY_IND IS NULL)
                    OR (D.RECYCLER_ACTIVITY IS NOT NULL AND S.RECYCLER_ACTIVITY IS NOT NULL AND
                        D.RECYCLER_ACTIVITY <> S.RECYCLER_ACTIVITY)
                    OR (D.RECYCLER_ACTIVITY IS NULL AND S.RECYCLER_ACTIVITY IS NOT NULL)
                    OR (D.RECYCLER_ACTIVITY IS NOT NULL AND S.RECYCLER_ACTIVITY IS NULL)
                    OR (D.ONSITE_BURNER_EXEMPTION IS NOT NULL AND S.ONSITE_BURNER_EXEMPTION IS NOT NULL AND
                        D.ONSITE_BURNER_EXEMPTION <> S.ONSITE_BURNER_EXEMPTION)
                    OR (D.ONSITE_BURNER_EXEMPTION IS NULL AND S.ONSITE_BURNER_EXEMPTION IS NOT NULL)
                    OR (D.ONSITE_BURNER_EXEMPTION IS NOT NULL AND S.ONSITE_BURNER_EXEMPTION IS NULL)
                    OR (D.FURNACE_EXEMPTION IS NOT NULL AND S.FURNACE_EXEMPTION IS NOT NULL AND
                        D.FURNACE_EXEMPTION <> S.FURNACE_EXEMPTION)
                    OR (D.FURNACE_EXEMPTION IS NULL AND S.FURNACE_EXEMPTION IS NOT NULL)
                    OR (D.FURNACE_EXEMPTION IS NOT NULL AND S.FURNACE_EXEMPTION IS NULL)
                    OR
                    (D.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL AND S.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL AND
                     D.UNDERGROUND_INJECTION_ACTIVITY <> S.UNDERGROUND_INJECTION_ACTIVITY)
                    OR (D.UNDERGROUND_INJECTION_ACTIVITY IS NULL AND S.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL)
                    OR (D.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL AND S.UNDERGROUND_INJECTION_ACTIVITY IS NULL)
                    OR (D.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL AND S.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL AND
                        D.UNIVERSAL_WASTE_DEST_FACILITY <> S.UNIVERSAL_WASTE_DEST_FACILITY)
                    OR (D.UNIVERSAL_WASTE_DEST_FACILITY IS NULL AND S.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL)
                    OR (D.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL AND S.UNIVERSAL_WASTE_DEST_FACILITY IS NULL)
                    OR (D.OFFSITE_WASTE_RECEIPT IS NOT NULL AND S.OFFSITE_WASTE_RECEIPT IS NOT NULL AND
                        D.OFFSITE_WASTE_RECEIPT <> S.OFFSITE_WASTE_RECEIPT)
                    OR (D.OFFSITE_WASTE_RECEIPT IS NULL AND S.OFFSITE_WASTE_RECEIPT IS NOT NULL)
                    OR (D.OFFSITE_WASTE_RECEIPT IS NOT NULL AND S.OFFSITE_WASTE_RECEIPT IS NULL)
                    OR (D.USED_OIL IS NOT NULL AND S.USED_OIL IS NOT NULL AND D.USED_OIL <> S.USED_OIL)
                    OR (D.USED_OIL IS NULL AND S.USED_OIL IS NOT NULL)
                    OR (D.USED_OIL IS NOT NULL AND S.USED_OIL IS NULL)
                    OR (D.FEDERAL_UNIVERSAL_WASTE IS NOT NULL AND S.FEDERAL_UNIVERSAL_WASTE IS NOT NULL AND
                        D.FEDERAL_UNIVERSAL_WASTE <> S.FEDERAL_UNIVERSAL_WASTE)
                    OR (D.FEDERAL_UNIVERSAL_WASTE IS NULL AND S.FEDERAL_UNIVERSAL_WASTE IS NOT NULL)
                    OR (D.FEDERAL_UNIVERSAL_WASTE IS NOT NULL AND S.FEDERAL_UNIVERSAL_WASTE IS NULL)
                    OR (D.AS_FEDERAL_REGULATED_TSDF IS NOT NULL AND S.AS_FEDERAL_REGULATED_TSDF IS NOT NULL AND
                        D.AS_FEDERAL_REGULATED_TSDF <> S.AS_FEDERAL_REGULATED_TSDF)
                    OR (D.AS_FEDERAL_REGULATED_TSDF IS NULL AND S.AS_FEDERAL_REGULATED_TSDF IS NOT NULL)
                    OR (D.AS_FEDERAL_REGULATED_TSDF IS NOT NULL AND S.AS_FEDERAL_REGULATED_TSDF IS NULL)
                    OR (D.AS_CONVERTED_TSDF IS NOT NULL AND S.AS_CONVERTED_TSDF IS NOT NULL AND
                        D.AS_CONVERTED_TSDF <> S.AS_CONVERTED_TSDF)
                    OR (D.AS_CONVERTED_TSDF IS NULL AND S.AS_CONVERTED_TSDF IS NOT NULL)
                    OR (D.AS_CONVERTED_TSDF IS NOT NULL AND S.AS_CONVERTED_TSDF IS NULL)
                    OR (D.AS_STATE_REGULATED_TSDF IS NOT NULL AND S.AS_STATE_REGULATED_TSDF IS NOT NULL AND
                        D.AS_STATE_REGULATED_TSDF <> S.AS_STATE_REGULATED_TSDF)
                    OR (D.AS_STATE_REGULATED_TSDF IS NULL AND S.AS_STATE_REGULATED_TSDF IS NOT NULL)
                    OR (D.AS_STATE_REGULATED_TSDF IS NOT NULL AND S.AS_STATE_REGULATED_TSDF IS NULL)
                    OR (D.FEDERAL_IND IS NOT NULL AND S.FEDERAL_IND IS NOT NULL AND D.FEDERAL_IND <> S.FEDERAL_IND)
                    OR (D.FEDERAL_IND IS NULL AND S.FEDERAL_IND IS NOT NULL)
                    OR (D.FEDERAL_IND IS NOT NULL AND S.FEDERAL_IND IS NULL)
                    OR (D.HSM IS NOT NULL AND S.HSM IS NOT NULL AND D.HSM <> S.HSM)
                    OR (D.HSM IS NULL AND S.HSM IS NOT NULL)
                    OR (D.HSM IS NOT NULL AND S.HSM IS NULL)
                    OR (D.SUBPART_K IS NULL AND S.SUBPART_K IS NOT NULL)
                    OR (D.SUBPART_K IS NOT NULL AND S.SUBPART_K IS NOT NULL AND D.SUBPART_K <> S.SUBPART_K)
                    OR (D.SUBPART_K IS NOT NULL AND S.SUBPART_K IS NULL)
                    OR
                    (D.COMMERCIAL_TSD IS NOT NULL AND S.COMMERCIAL_TSD IS NOT NULL AND
                     D.COMMERCIAL_TSD <> S.COMMERCIAL_TSD)
                    OR (D.COMMERCIAL_TSD IS NULL AND S.COMMERCIAL_TSD IS NOT NULL)
                    OR (D.COMMERCIAL_TSD IS NOT NULL AND S.COMMERCIAL_TSD IS NULL)
                    OR (D.TSD IS NOT NULL AND S.TSD IS NOT NULL AND D.TSD <> S.TSD)
                    OR (D.TSD IS NULL AND S.TSD IS NOT NULL)
                    OR (D.TSD IS NOT NULL AND S.TSD IS NULL)
                    OR (D.GPRA_PERMIT IS NOT NULL AND S.GPRA_PERMIT IS NOT NULL AND D.GPRA_PERMIT <> S.GPRA_PERMIT)
                    OR (D.GPRA_PERMIT IS NULL AND S.GPRA_PERMIT IS NOT NULL)
                    OR (D.GPRA_PERMIT IS NOT NULL AND S.GPRA_PERMIT IS NULL)
                    OR (D.GPRA_RENEWAL IS NOT NULL AND S.GPRA_RENEWAL IS NOT NULL AND D.GPRA_RENEWAL <> S.GPRA_RENEWAL)
                    OR (D.GPRA_RENEWAL IS NULL AND S.GPRA_RENEWAL IS NOT NULL)
                    OR (D.GPRA_RENEWAL IS NOT NULL AND S.GPRA_RENEWAL IS NULL)
                    OR (D.PERMIT_RENEWAL_WRKLD IS NOT NULL AND S.PERMIT_RENEWAL_WRKLD IS NOT NULL AND
                        D.PERMIT_RENEWAL_WRKLD <> S.PERMIT_RENEWAL_WRKLD)
                    OR (D.PERMIT_RENEWAL_WRKLD IS NULL AND S.PERMIT_RENEWAL_WRKLD IS NOT NULL)
                    OR (D.PERMIT_RENEWAL_WRKLD IS NOT NULL AND S.PERMIT_RENEWAL_WRKLD IS NULL)
                    OR (D.PERM_WRKLD IS NOT NULL AND S.PERM_WRKLD IS NOT NULL AND D.PERM_WRKLD <> S.PERM_WRKLD)
                    OR (D.PERM_WRKLD IS NULL AND S.PERM_WRKLD IS NOT NULL)
                    OR (D.PERM_WRKLD IS NOT NULL AND S.PERM_WRKLD IS NULL)
                    OR (D.PERM_PROG IS NOT NULL AND S.PERM_PROG IS NOT NULL AND D.PERM_PROG <> S.PERM_PROG)
                    OR (D.PERM_PROG IS NULL AND S.PERM_PROG IS NOT NULL)
                    OR (D.PERM_PROG IS NOT NULL AND S.PERM_PROG IS NULL)
                    OR (D.PC_WRKLD IS NOT NULL AND S.PC_WRKLD IS NOT NULL AND D.PC_WRKLD <> S.PC_WRKLD)
                    OR (D.PC_WRKLD IS NULL AND S.PC_WRKLD IS NOT NULL)
                    OR (D.PC_WRKLD IS NOT NULL AND S.PC_WRKLD IS NULL)
                    OR (D.CLOS_WRKLD IS NOT NULL AND S.CLOS_WRKLD IS NOT NULL AND D.CLOS_WRKLD <> S.CLOS_WRKLD)
                    OR (D.CLOS_WRKLD IS NULL AND S.CLOS_WRKLD IS NOT NULL)
                    OR (D.CLOS_WRKLD IS NOT NULL AND S.CLOS_WRKLD IS NULL)
                    OR (D.GPRACA IS NOT NULL AND S.GPRACA IS NOT NULL AND D.GPRACA <> S.GPRACA)
                    OR (D.GPRACA IS NULL AND S.GPRACA IS NOT NULL)
                    OR (D.GPRACA IS NOT NULL AND S.GPRACA IS NULL)
                    OR (D.CA_WRKLD IS NOT NULL AND S.CA_WRKLD IS NOT NULL AND D.CA_WRKLD <> S.CA_WRKLD)
                    OR (D.CA_WRKLD IS NULL AND S.CA_WRKLD IS NOT NULL)
                    OR (D.CA_WRKLD IS NOT NULL AND S.CA_WRKLD IS NULL)
                    OR (D.SUBJ_CA IS NOT NULL AND S.SUBJ_CA IS NOT NULL AND D.SUBJ_CA <> S.SUBJ_CA)
                    OR (D.SUBJ_CA IS NULL AND S.SUBJ_CA IS NOT NULL)
                    OR (D.SUBJ_CA IS NOT NULL AND S.SUBJ_CA IS NULL)
                    OR (D.SUBJ_CA_NON_TSD IS NOT NULL AND S.SUBJ_CA_NON_TSD IS NOT NULL AND
                        D.SUBJ_CA_NON_TSD <> S.SUBJ_CA_NON_TSD)
                    OR (D.SUBJ_CA_NON_TSD IS NULL AND S.SUBJ_CA_NON_TSD IS NOT NULL)
                    OR (D.SUBJ_CA_NON_TSD IS NOT NULL AND S.SUBJ_CA_NON_TSD IS NULL)
                    OR
                    (D.SUBJ_CA_TSD_3004 IS NOT NULL AND S.SUBJ_CA_TSD_3004 IS NOT NULL AND
                     D.SUBJ_CA_TSD_3004 <> S.SUBJ_CA_TSD_3004)
                    OR (D.SUBJ_CA_TSD_3004 IS NULL AND S.SUBJ_CA_TSD_3004 IS NOT NULL)
                    OR (D.SUBJ_CA_TSD_3004 IS NOT NULL AND S.SUBJ_CA_TSD_3004 IS NULL)
                    OR (D.SUBJ_CA_DISCRETION IS NOT NULL AND S.SUBJ_CA_DISCRETION IS NOT NULL AND
                        D.SUBJ_CA_DISCRETION <> S.SUBJ_CA_DISCRETION)
                    OR (D.SUBJ_CA_DISCRETION IS NULL AND S.SUBJ_CA_DISCRETION IS NOT NULL)
                    OR (D.SUBJ_CA_DISCRETION IS NOT NULL AND S.SUBJ_CA_DISCRETION IS NULL)
                    OR (D.NCAPS IS NOT NULL AND S.NCAPS IS NOT NULL AND D.NCAPS <> S.NCAPS)
                    OR (D.NCAPS IS NULL AND S.NCAPS IS NOT NULL)
                    OR (D.NCAPS IS NOT NULL AND S.NCAPS IS NULL)
                    OR (D.EC_IND IS NOT NULL AND S.EC_IND IS NOT NULL AND D.EC_IND <> S.EC_IND)
                    OR (D.EC_IND IS NULL AND S.EC_IND IS NOT NULL)
                    OR (D.EC_IND IS NOT NULL AND S.EC_IND IS NULL)
                    OR (D.IC_IND IS NOT NULL AND S.IC_IND IS NOT NULL AND D.IC_IND <> S.IC_IND)
                    OR (D.IC_IND IS NULL AND S.IC_IND IS NOT NULL)
                    OR (D.IC_IND IS NOT NULL AND S.IC_IND IS NULL)
                    OR (D.CA_725_IND IS NOT NULL AND S.CA_725_IND IS NOT NULL AND D.CA_725_IND <> S.CA_725_IND)
                    OR (D.CA_725_IND IS NULL AND S.CA_725_IND IS NOT NULL)
                    OR (D.CA_725_IND IS NOT NULL AND S.CA_725_IND IS NULL)
                    OR (D.CA_750_IND IS NOT NULL AND S.CA_750_IND IS NOT NULL AND D.CA_750_IND <> S.CA_750_IND)
                    OR (D.CA_750_IND IS NULL AND S.CA_750_IND IS NOT NULL)
                    OR (D.CA_750_IND IS NOT NULL AND S.CA_750_IND IS NULL)
                    OR
                    (D.OPERATING_TSDF IS NOT NULL AND S.OPERATING_TSDF IS NOT NULL AND
                     D.OPERATING_TSDF <> S.OPERATING_TSDF)
                    OR (D.OPERATING_TSDF IS NULL AND S.OPERATING_TSDF IS NOT NULL)
                    OR (D.OPERATING_TSDF IS NOT NULL AND S.OPERATING_TSDF IS NULL)
                    OR
                    (D.FULL_ENFORCEMENT IS NOT NULL AND S.FULL_ENFORCEMENT IS NOT NULL AND
                     D.FULL_ENFORCEMENT <> S.FULL_ENFORCEMENT)
                    OR (D.FULL_ENFORCEMENT IS NULL AND S.FULL_ENFORCEMENT IS NOT NULL)
                    OR (D.FULL_ENFORCEMENT IS NOT NULL AND S.FULL_ENFORCEMENT IS NULL)
                    OR (D.SNC IS NOT NULL AND S.SNC IS NOT NULL AND D.SNC <> S.SNC)
                    OR (D.SNC IS NULL AND S.SNC IS NOT NULL)
                    OR (D.SNC IS NOT NULL AND S.SNC IS NULL)
                    OR (D.BOY_SNC IS NOT NULL AND S.BOY_SNC IS NOT NULL AND D.BOY_SNC <> S.BOY_SNC)
                    OR (D.BOY_SNC IS NULL AND S.BOY_SNC IS NOT NULL)
                    OR (D.BOY_SNC IS NOT NULL AND S.BOY_SNC IS NULL)
                    OR (D.BOY_STATE_UNADDRESSED_SNC IS NOT NULL AND S.BOY_STATE_UNADDRESSED_SNC IS NOT NULL AND
                        D.BOY_STATE_UNADDRESSED_SNC <> S.BOY_STATE_UNADDRESSED_SNC)
                    OR (D.BOY_STATE_UNADDRESSED_SNC IS NULL AND S.BOY_STATE_UNADDRESSED_SNC IS NOT NULL)
                    OR (D.BOY_STATE_UNADDRESSED_SNC IS NOT NULL AND S.BOY_STATE_UNADDRESSED_SNC IS NULL)
                    OR (D.STATE_UNADDRESSED IS NOT NULL AND S.STATE_UNADDRESSED IS NOT NULL AND
                        D.STATE_UNADDRESSED <> S.STATE_UNADDRESSED)
                    OR (D.STATE_UNADDRESSED IS NULL AND S.STATE_UNADDRESSED IS NOT NULL)
                    OR (D.STATE_UNADDRESSED IS NOT NULL AND S.STATE_UNADDRESSED IS NULL)
                    OR (D.STATE_ADDRESSED IS NOT NULL AND S.STATE_ADDRESSED IS NOT NULL AND
                        D.STATE_ADDRESSED <> S.STATE_ADDRESSED)
                    OR (D.STATE_ADDRESSED IS NULL AND S.STATE_ADDRESSED IS NOT NULL)
                    OR (D.STATE_ADDRESSED IS NOT NULL AND S.STATE_ADDRESSED IS NULL)
                    OR (D.BOY_STATE_ADDRESSED IS NOT NULL AND S.BOY_STATE_ADDRESSED IS NOT NULL AND
                        D.BOY_STATE_ADDRESSED <> S.BOY_STATE_ADDRESSED)
                    OR (D.BOY_STATE_ADDRESSED IS NULL AND S.BOY_STATE_ADDRESSED IS NOT NULL)
                    OR (D.BOY_STATE_ADDRESSED IS NOT NULL AND S.BOY_STATE_ADDRESSED IS NULL)
                    OR (D.STATE_SNC_WITH_COMP_SCHED IS NOT NULL AND S.STATE_SNC_WITH_COMP_SCHED IS NOT NULL AND
                        D.STATE_SNC_WITH_COMP_SCHED <> S.STATE_SNC_WITH_COMP_SCHED)
                    OR (D.STATE_SNC_WITH_COMP_SCHED IS NULL AND S.STATE_SNC_WITH_COMP_SCHED IS NOT NULL)
                    OR (D.STATE_SNC_WITH_COMP_SCHED IS NOT NULL AND S.STATE_SNC_WITH_COMP_SCHED IS NULL)
                    OR (D.BOY_STATE_SNC_WITH_COMP_SCHED IS NOT NULL AND S.BOY_STATE_SNC_WITH_COMP_SCHED IS NOT NULL AND
                        D.BOY_STATE_SNC_WITH_COMP_SCHED <> S.BOY_STATE_SNC_WITH_COMP_SCHED)
                    OR (D.BOY_STATE_SNC_WITH_COMP_SCHED IS NULL AND S.BOY_STATE_SNC_WITH_COMP_SCHED IS NOT NULL)
                    OR (D.BOY_STATE_SNC_WITH_COMP_SCHED IS NOT NULL AND S.BOY_STATE_SNC_WITH_COMP_SCHED IS NULL)
                    OR (D.EPA_UNADDRESSED IS NOT NULL AND S.EPA_UNADDRESSED IS NOT NULL AND
                        D.EPA_UNADDRESSED <> S.EPA_UNADDRESSED)
                    OR (D.EPA_UNADDRESSED IS NULL AND S.EPA_UNADDRESSED IS NOT NULL)
                    OR (D.EPA_UNADDRESSED IS NOT NULL AND S.EPA_UNADDRESSED IS NULL)
                    OR (D.BOY_EPA_UNADDRESSED IS NOT NULL AND S.BOY_EPA_UNADDRESSED IS NOT NULL AND
                        D.BOY_EPA_UNADDRESSED <> S.BOY_EPA_UNADDRESSED)
                    OR (D.BOY_EPA_UNADDRESSED IS NULL AND S.BOY_EPA_UNADDRESSED IS NOT NULL)
                    OR (D.BOY_EPA_UNADDRESSED IS NOT NULL AND S.BOY_EPA_UNADDRESSED IS NULL)
                    OR
                    (D.EPA_ADDRESSED IS NOT NULL AND S.EPA_ADDRESSED IS NOT NULL AND D.EPA_ADDRESSED <> S.EPA_ADDRESSED)
                    OR (D.EPA_ADDRESSED IS NULL AND S.EPA_ADDRESSED IS NOT NULL)
                    OR (D.EPA_ADDRESSED IS NOT NULL AND S.EPA_ADDRESSED IS NULL)
                    OR (D.BOY_EPA_ADDRESSED IS NOT NULL AND S.BOY_EPA_ADDRESSED IS NOT NULL AND
                        D.BOY_EPA_ADDRESSED <> S.BOY_EPA_ADDRESSED)
                    OR (D.BOY_EPA_ADDRESSED IS NULL AND S.BOY_EPA_ADDRESSED IS NOT NULL)
                    OR (D.BOY_EPA_ADDRESSED IS NOT NULL AND S.BOY_EPA_ADDRESSED IS NULL)
                    OR (D.EPA_SNC_WITH_COMP_SCHED IS NOT NULL AND S.EPA_SNC_WITH_COMP_SCHED IS NOT NULL AND
                        D.EPA_SNC_WITH_COMP_SCHED <> S.EPA_SNC_WITH_COMP_SCHED)
                    OR (D.EPA_SNC_WITH_COMP_SCHED IS NULL AND S.EPA_SNC_WITH_COMP_SCHED IS NOT NULL)
                    OR (D.EPA_SNC_WITH_COMP_SCHED IS NOT NULL AND S.EPA_SNC_WITH_COMP_SCHED IS NULL)
                    OR (D.BOY_EPA_SNC_WITH_COMP_SCHED IS NOT NULL AND S.BOY_EPA_SNC_WITH_COMP_SCHED IS NOT NULL AND
                        D.BOY_EPA_SNC_WITH_COMP_SCHED <> S.BOY_EPA_SNC_WITH_COMP_SCHED)
                    OR (D.BOY_EPA_SNC_WITH_COMP_SCHED IS NULL AND S.BOY_EPA_SNC_WITH_COMP_SCHED IS NOT NULL)
                    OR (D.BOY_EPA_SNC_WITH_COMP_SCHED IS NOT NULL AND S.BOY_EPA_SNC_WITH_COMP_SCHED IS NULL)
                    OR (D.FA_REQUIRED IS NOT NULL AND S.FA_REQUIRED IS NOT NULL AND D.FA_REQUIRED <> S.FA_REQUIRED)
                    OR (D.FA_REQUIRED IS NULL AND S.FA_REQUIRED IS NOT NULL)
                    OR (D.FA_REQUIRED IS NOT NULL AND S.FA_REQUIRED IS NULL)
                    OR (D.HHANDLER_LAST_CHANGE_DATE IS NOT NULL AND S.HHANDLER_LAST_CHANGE_DATE IS NOT NULL AND
                        D.HHANDLER_LAST_CHANGE_DATE <> S.HHANDLER_LAST_CHANGE_DATE)
                    OR (D.HHANDLER_LAST_CHANGE_DATE IS NULL AND S.HHANDLER_LAST_CHANGE_DATE IS NOT NULL)
                    OR (D.HHANDLER_LAST_CHANGE_DATE IS NOT NULL AND S.HHANDLER_LAST_CHANGE_DATE IS NULL)
                    OR (D.PUBLIC_NOTES IS NOT NULL AND S.PUBLIC_NOTES IS NOT NULL AND D.PUBLIC_NOTES <> S.PUBLIC_NOTES)
                    OR (D.PUBLIC_NOTES IS NULL AND S.PUBLIC_NOTES IS NOT NULL)
                    OR (D.PUBLIC_NOTES IS NOT NULL AND S.PUBLIC_NOTES IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                    OR
                    (D.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND
                     D.RECOGNIZED_TRADER_IMPORTER_IND <> S.RECOGNIZED_TRADER_IMPORTER_IND)
                    OR (D.RECOGNIZED_TRADER_IMPORTER_IND IS NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL)
                    OR (D.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NULL)
                    OR
                    (D.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND
                     D.RECOGNIZED_TRADER_EXPORTER_IND <> S.RECOGNIZED_TRADER_EXPORTER_IND)
                    OR (D.RECOGNIZED_TRADER_EXPORTER_IND IS NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL)
                    OR (D.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NULL)
                    OR (D.SLAB_IMPORTER_IND IS NOT NULL AND S.SLAB_IMPORTER_IND IS NOT NULL AND
                        D.SLAB_IMPORTER_IND <> S.SLAB_IMPORTER_IND)
                    OR (D.SLAB_IMPORTER_IND IS NULL AND S.SLAB_IMPORTER_IND IS NOT NULL)
                    OR (D.SLAB_IMPORTER_IND IS NOT NULL AND S.SLAB_IMPORTER_IND IS NULL)
                    OR (D.SLAB_EXPORTER_IND IS NOT NULL AND S.SLAB_EXPORTER_IND IS NOT NULL AND
                        D.SLAB_EXPORTER_IND <> S.SLAB_EXPORTER_IND)
                    OR (D.SLAB_EXPORTER_IND IS NULL AND S.SLAB_EXPORTER_IND IS NOT NULL)
                    OR (D.SLAB_EXPORTER_IND IS NOT NULL AND S.SLAB_EXPORTER_IND IS NULL)
                    OR (D.RECYCLER_NON_STORAGE_IND IS NOT NULL AND S.RECYCLER_NON_STORAGE_IND IS NOT NULL AND
                        D.RECYCLER_NON_STORAGE_IND <> S.RECYCLER_NON_STORAGE_IND)
                    OR (D.RECYCLER_NON_STORAGE_IND IS NULL AND S.RECYCLER_NON_STORAGE_IND IS NOT NULL)
                    OR (D.RECYCLER_NON_STORAGE_IND IS NOT NULL AND S.RECYCLER_NON_STORAGE_IND IS NULL)
                    OR (D.MANIFEST_BROKER_IND IS NOT NULL AND S.MANIFEST_BROKER_IND IS NOT NULL AND
                        D.MANIFEST_BROKER_IND <> S.MANIFEST_BROKER_IND)
                    OR (D.MANIFEST_BROKER_IND IS NULL AND S.MANIFEST_BROKER_IND IS NOT NULL)
                    OR (D.MANIFEST_BROKER_IND IS NOT NULL AND S.MANIFEST_BROKER_IND IS NULL)
                    OR (D.SUBPART_P_IND IS NOT NULL AND S.SUBPART_P_IND IS NOT NULL AND
                        D.SUBPART_P_IND <> S.SUBPART_P_IND)
                    OR (D.SUBPART_P_IND IS NULL AND S.SUBPART_P_IND IS NOT NULL)
                    OR (D.SUBPART_P_IND IS NOT NULL AND S.SUBPART_P_IND IS NULL)
                    OR (D.LOCATION_LATITUDE IS NOT NULL AND S.LOCATION_LATITUDE IS NOT NULL AND
                        D.LOCATION_LATITUDE <> S.LOCATION_LATITUDE)
                    OR (D.LOCATION_LATITUDE IS NULL AND S.LOCATION_LATITUDE IS NOT NULL)
                    OR (D.LOCATION_LATITUDE IS NOT NULL AND S.LOCATION_LATITUDE IS NULL)
                    OR (D.LOCATION_LONGITUDE IS NOT NULL AND S.LOCATION_LONGITUDE IS NOT NULL AND
                        D.LOCATION_LONGITUDE <> S.LOCATION_LONGITUDE)
                    OR (D.LOCATION_LONGITUDE IS NULL AND S.LOCATION_LONGITUDE IS NOT NULL)
                    OR (D.LOCATION_LONGITUDE IS NOT NULL AND S.LOCATION_LONGITUDE IS NULL)
                    OR (D.LOCATION_GIS_PRIM IS NOT NULL AND S.LOCATION_GIS_PRIM IS NOT NULL AND
                        D.LOCATION_GIS_PRIM <> S.LOCATION_GIS_PRIM)
                    OR (D.LOCATION_GIS_PRIM IS NULL AND S.LOCATION_GIS_PRIM IS NOT NULL)
                    OR (D.LOCATION_GIS_PRIM IS NOT NULL AND S.LOCATION_GIS_PRIM IS NULL)
                    OR (D.LOCATION_GIS_ORIG IS NOT NULL AND S.LOCATION_GIS_ORIG IS NOT NULL AND
                        D.LOCATION_GIS_ORIG <> S.LOCATION_GIS_ORIG)
                    OR (D.LOCATION_GIS_ORIG IS NULL AND S.LOCATION_GIS_ORIG IS NOT NULL)
                    OR (D.LOCATION_GIS_ORIG IS NOT NULL AND S.LOCATION_GIS_ORIG IS NULL)
                )
            THEN
            UPDATE
            SET D.HANDLER_ID                     = S.HANDLER_ID,
                D.ACTIVITY_LOCATION              = S.ACTIVITY_LOCATION,
                D.SOURCE_TYPE                    = S.SOURCE_TYPE,
                D.SEQ_NUMBER                     = S.SEQ_NUMBER,
                D.RECEIVE_DATE                   = S.RECEIVE_DATE,
                D.HANDLER_NAME                   = S.HANDLER_NAME,
                D.NON_NOTIFIER_IND               = S.NON_NOTIFIER_IND,
                D.ACCESSIBILITY                  = S.ACCESSIBILITY,
                D.REPORT_CYCLE                   = S.REPORT_CYCLE,
                D.REGION                         = S.REGION,
                D.STATE                          = S.STATE,
                D.EXTRACT_FLAG                   = S.EXTRACT_FLAG,
                D.ACTIVE_SITE                    = S.ACTIVE_SITE,
                D.COUNTY_CODE                    = S.COUNTY_CODE,
                D.COUNTY_NAME                    = S.COUNTY_NAME,
                D.LOCATION_STREET_NUMBER         = S.LOCATION_STREET_NUMBER,
                D.LOCATION_STREET1               = S.LOCATION_STREET1,
                D.LOCATION_STREET2               = S.LOCATION_STREET2,
                D.LOCATION_CITY                  = S.LOCATION_CITY,
                D.LOCATION_STATE                 = S.LOCATION_STATE,
                D.LOCATION_COUNTRY               = S.LOCATION_COUNTRY,
                D.LOCATION_ZIP                   = S.LOCATION_ZIP,
                D.MAIL_STREET_NUMBER             = S.MAIL_STREET_NUMBER,
                D.MAIL_STREET1                   = S.MAIL_STREET1,
                D.MAIL_STREET2                   = S.MAIL_STREET2,
                D.MAIL_CITY                      = S.MAIL_CITY,
                D.MAIL_STATE                     = S.MAIL_STATE,
                D.MAIL_COUNTRY                   = S.MAIL_COUNTRY,
                D.MAIL_ZIP                       = S.MAIL_ZIP,
                D.CONTACT_STREET_NUMBER          = S.CONTACT_STREET_NUMBER,
                D.CONTACT_STREET1                = S.CONTACT_STREET1,
                D.CONTACT_STREET2                = S.CONTACT_STREET2,
                D.CONTACT_CITY                   = S.CONTACT_CITY,
                D.CONTACT_STATE                  = S.CONTACT_STATE,
                D.CONTACT_COUNTRY                = S.CONTACT_COUNTRY,
                D.CONTACT_ZIP                    = S.CONTACT_ZIP,
                D.CONTACT_NAME                   = S.CONTACT_NAME,
                D.CONTACT_PHONE                  = S.CONTACT_PHONE,
                D.CONTACT_FAX                    = S.CONTACT_FAX,
                D.CONTACT_EMAIL                  = S.CONTACT_EMAIL,
                D.CONTACT_TITLE                  = S.CONTACT_TITLE,
                D.OWNER_NAME                     = S.OWNER_NAME,
                D.OWNER_TYPE                     = S.OWNER_TYPE,
                D.OWNER_SEQ_NUM                  = S.OWNER_SEQ_NUM,
                D.OPER_NAME                      = S.OPER_NAME,
                D.OPER_TYPE                      = S.OPER_TYPE,
                D.OPER_SEQ_NUM                   = S.OPER_SEQ_NUM,
                D.NAIC1_CODE                     = S.NAIC1_CODE,
                D.NAIC2_CODE                     = S.NAIC2_CODE,
                D.NAIC3_CODE                     = S.NAIC3_CODE,
                D.NAIC4_CODE                     = S.NAIC4_CODE,
                D.IN_HANDLER_UNIVERSE            = S.IN_HANDLER_UNIVERSE,
                D.IN_A_UNIVERSE                  = S.IN_A_UNIVERSE,
                D.FED_WASTE_GENERATOR_OWNER      = S.FED_WASTE_GENERATOR_OWNER,
                D.FED_WASTE_GENERATOR            = S.FED_WASTE_GENERATOR,
                D.STATE_WASTE_GENERATOR_OWNER    = S.STATE_WASTE_GENERATOR_OWNER,
                D.STATE_WASTE_GENERATOR          = S.STATE_WASTE_GENERATOR,
                D.GEN_STATUS                     = S.GEN_STATUS,
                D.UNIV_WASTE                     = S.UNIV_WASTE,
                D.LAND_TYPE                      = S.LAND_TYPE,
                D.STATE_DISTRICT_OWNER           = S.STATE_DISTRICT_OWNER,
                D.STATE_DISTRICT                 = S.STATE_DISTRICT,
                D.SHORT_TERM_GEN_IND             = S.SHORT_TERM_GEN_IND,
                D.IMPORTER_ACTIVITY              = S.IMPORTER_ACTIVITY,
                D.MIXED_WASTE_GENERATOR          = S.MIXED_WASTE_GENERATOR,
                D.TRANSPORTER_ACTIVITY           = S.TRANSPORTER_ACTIVITY,
                D.TRANSFER_FACILITY_IND          = S.TRANSFER_FACILITY_IND,
                D.RECYCLER_ACTIVITY              = S.RECYCLER_ACTIVITY,
                D.ONSITE_BURNER_EXEMPTION        = S.ONSITE_BURNER_EXEMPTION,
                D.FURNACE_EXEMPTION              = S.FURNACE_EXEMPTION,
                D.UNDERGROUND_INJECTION_ACTIVITY = S.UNDERGROUND_INJECTION_ACTIVITY,
                D.UNIVERSAL_WASTE_DEST_FACILITY  = S.UNIVERSAL_WASTE_DEST_FACILITY,
                D.OFFSITE_WASTE_RECEIPT          = S.OFFSITE_WASTE_RECEIPT,
                D.USED_OIL                       = S.USED_OIL,
                D.FEDERAL_UNIVERSAL_WASTE        = S.FEDERAL_UNIVERSAL_WASTE,
                D.AS_FEDERAL_REGULATED_TSDF      = S.AS_FEDERAL_REGULATED_TSDF,
                D.AS_CONVERTED_TSDF              = S.AS_CONVERTED_TSDF,
                D.AS_STATE_REGULATED_TSDF        = S.AS_STATE_REGULATED_TSDF,
                D.FEDERAL_IND                    = S.FEDERAL_IND,
                D.HSM                            = S.HSM,
                D.SUBPART_K                      = S.SUBPART_K,
                D.COMMERCIAL_TSD                 = S.COMMERCIAL_TSD,
                D.TSD                            = S.TSD,
                D.GPRA_PERMIT                    = S.GPRA_PERMIT,
                D.GPRA_RENEWAL                   = S.GPRA_RENEWAL,
                D.PERMIT_RENEWAL_WRKLD           = S.PERMIT_RENEWAL_WRKLD,
                D.PERM_WRKLD                     = S.PERM_WRKLD,
                D.PERM_PROG                      = S.PERM_PROG,
                D.PC_WRKLD                       = S.PC_WRKLD,
                D.CLOS_WRKLD                     = S.CLOS_WRKLD,
                D.GPRACA                         = S.GPRACA,
                D.CA_WRKLD                       = S.CA_WRKLD,
                D.SUBJ_CA                        = S.SUBJ_CA,
                D.SUBJ_CA_NON_TSD                = S.SUBJ_CA_NON_TSD,
                D.SUBJ_CA_TSD_3004               = S.SUBJ_CA_TSD_3004,
                D.SUBJ_CA_DISCRETION             = S.SUBJ_CA_DISCRETION,
                D.NCAPS                          = S.NCAPS,
                D.EC_IND                         = S.EC_IND,
                D.IC_IND                         = S.IC_IND,
                D.CA_725_IND                     = S.CA_725_IND,
                D.CA_750_IND                     = S.CA_750_IND,
                D.OPERATING_TSDF                 = S.OPERATING_TSDF,
                D.FULL_ENFORCEMENT               = S.FULL_ENFORCEMENT,
                D.SNC                            = S.SNC,
                D.BOY_SNC                        = S.BOY_SNC,
                D.BOY_STATE_UNADDRESSED_SNC      = S.BOY_STATE_UNADDRESSED_SNC,
                D.STATE_UNADDRESSED              = S.STATE_UNADDRESSED,
                D.STATE_ADDRESSED                = S.STATE_ADDRESSED,
                D.BOY_STATE_ADDRESSED            = S.BOY_STATE_ADDRESSED,
                D.STATE_SNC_WITH_COMP_SCHED      = S.STATE_SNC_WITH_COMP_SCHED,
                D.BOY_STATE_SNC_WITH_COMP_SCHED  = S.BOY_STATE_SNC_WITH_COMP_SCHED,
                D.EPA_UNADDRESSED                = S.EPA_UNADDRESSED,
                D.BOY_EPA_UNADDRESSED            = S.BOY_EPA_UNADDRESSED,
                D.EPA_ADDRESSED                  = S.EPA_ADDRESSED,
                D.BOY_EPA_ADDRESSED              = S.BOY_EPA_ADDRESSED,
                D.EPA_SNC_WITH_COMP_SCHED        = S.EPA_SNC_WITH_COMP_SCHED,
                D.BOY_EPA_SNC_WITH_COMP_SCHED    = S.BOY_EPA_SNC_WITH_COMP_SCHED,
                D.FA_REQUIRED                    = S.FA_REQUIRED,
                D.HHANDLER_LAST_CHANGE_DATE      = S.HHANDLER_LAST_CHANGE_DATE,
                D.PUBLIC_NOTES                   = S.PUBLIC_NOTES,
                D.NOTES                          = S.NOTES,
                D.RECOGNIZED_TRADER_IMPORTER_IND = S.RECOGNIZED_TRADER_IMPORTER_IND,
                D.RECOGNIZED_TRADER_EXPORTER_IND = S.RECOGNIZED_TRADER_EXPORTER_IND,
                D.SLAB_IMPORTER_IND              = S.SLAB_IMPORTER_IND,
                D.SLAB_EXPORTER_IND              = S.SLAB_EXPORTER_IND,
                D.RECYCLER_NON_STORAGE_IND       = S.RECYCLER_NON_STORAGE_IND,
                D.MANIFEST_BROKER_IND            = S.MANIFEST_BROKER_IND,
                D.SUBPART_P_IND                  = S.SUBPART_P_IND,
                D.LOCATION_LATITUDE              = S.LOCATION_LATITUDE,
                D.LOCATION_LONGITUDE             = S.LOCATION_LONGITUDE,
                D.LOCATION_GIS_PRIM              = S.LOCATION_GIS_PRIM,
                D.LOCATION_GIS_ORIG              = S.LOCATION_GIS_ORIG
        WHEN NOT MATCHED THEN
            INSERT (HANDLER_ID,
                    ACTIVITY_LOCATION,
                    SOURCE_TYPE,
                    SEQ_NUMBER,
                    RECEIVE_DATE,
                    HANDLER_NAME,
                    NON_NOTIFIER_IND,
                    ACCESSIBILITY,
                    REPORT_CYCLE,
                    REGION,
                    STATE,
                    EXTRACT_FLAG,
                    ACTIVE_SITE,
                    COUNTY_CODE,
                    COUNTY_NAME,
                    LOCATION_STREET_NUMBER,
                    LOCATION_STREET1,
                    LOCATION_STREET2,
                    LOCATION_CITY,
                    LOCATION_STATE,
                    LOCATION_COUNTRY,
                    LOCATION_ZIP,
                    MAIL_STREET_NUMBER,
                    MAIL_STREET1,
                    MAIL_STREET2,
                    MAIL_CITY,
                    MAIL_STATE,
                    MAIL_COUNTRY,
                    MAIL_ZIP,
                    CONTACT_STREET_NUMBER,
                    CONTACT_STREET1,
                    CONTACT_STREET2,
                    CONTACT_CITY,
                    CONTACT_STATE,
                    CONTACT_COUNTRY,
                    CONTACT_ZIP,
                    CONTACT_NAME,
                    CONTACT_PHONE,
                    CONTACT_FAX,
                    CONTACT_EMAIL,
                    CONTACT_TITLE,
                    OWNER_NAME,
                    OWNER_TYPE,
                    OWNER_SEQ_NUM,
                    OPER_NAME,
                    OPER_TYPE,
                    OPER_SEQ_NUM,
                    NAIC1_CODE,
                    NAIC2_CODE,
                    NAIC3_CODE,
                    NAIC4_CODE,
                    IN_HANDLER_UNIVERSE,
                    IN_A_UNIVERSE,
                    FED_WASTE_GENERATOR_OWNER,
                    FED_WASTE_GENERATOR,
                    STATE_WASTE_GENERATOR_OWNER,
                    STATE_WASTE_GENERATOR,
                    GEN_STATUS,
                    UNIV_WASTE,
                    LAND_TYPE,
                    STATE_DISTRICT_OWNER,
                    STATE_DISTRICT,
                    SHORT_TERM_GEN_IND,
                    IMPORTER_ACTIVITY,
                    MIXED_WASTE_GENERATOR,
                    TRANSPORTER_ACTIVITY,
                    TRANSFER_FACILITY_IND,
                    RECYCLER_ACTIVITY,
                    ONSITE_BURNER_EXEMPTION,
                    FURNACE_EXEMPTION,
                    UNDERGROUND_INJECTION_ACTIVITY,
                    UNIVERSAL_WASTE_DEST_FACILITY,
                    OFFSITE_WASTE_RECEIPT,
                    USED_OIL,
                    FEDERAL_UNIVERSAL_WASTE,
                    AS_FEDERAL_REGULATED_TSDF,
                    AS_CONVERTED_TSDF,
                    AS_STATE_REGULATED_TSDF,
                    FEDERAL_IND,
                    HSM,
                    SUBPART_K,
                    COMMERCIAL_TSD,
                    TSD,
                    GPRA_PERMIT,
                    GPRA_RENEWAL,
                    PERMIT_RENEWAL_WRKLD,
                    PERM_WRKLD,
                    PERM_PROG,
                    PC_WRKLD,
                    CLOS_WRKLD,
                    GPRACA,
                    CA_WRKLD,
                    SUBJ_CA,
                    SUBJ_CA_NON_TSD,
                    SUBJ_CA_TSD_3004,
                    SUBJ_CA_DISCRETION,
                    NCAPS,
                    EC_IND,
                    IC_IND,
                    CA_725_IND,
                    CA_750_IND,
                    OPERATING_TSDF,
                    FULL_ENFORCEMENT,
                    SNC,
                    BOY_SNC,
                    BOY_STATE_UNADDRESSED_SNC,
                    STATE_UNADDRESSED,
                    STATE_ADDRESSED,
                    BOY_STATE_ADDRESSED,
                    STATE_SNC_WITH_COMP_SCHED,
                    BOY_STATE_SNC_WITH_COMP_SCHED,
                    EPA_UNADDRESSED,
                    BOY_EPA_UNADDRESSED,
                    EPA_ADDRESSED,
                    BOY_EPA_ADDRESSED,
                    EPA_SNC_WITH_COMP_SCHED,
                    BOY_EPA_SNC_WITH_COMP_SCHED,
                    FA_REQUIRED,
                    HHANDLER_LAST_CHANGE_DATE,
                    PUBLIC_NOTES,
                    NOTES,
                    RECOGNIZED_TRADER_IMPORTER_IND,
                    RECOGNIZED_TRADER_EXPORTER_IND,
                    SLAB_IMPORTER_IND,
                    SLAB_EXPORTER_IND,
                    RECYCLER_NON_STORAGE_IND,
                    MANIFEST_BROKER_IND,
                    SUBPART_P_IND,
                    LOCATION_LATITUDE,
                    LOCATION_LONGITUDE,
                    LOCATION_GIS_PRIM,
                    LOCATION_GIS_ORIG)
            VALUES (S.HANDLER_ID,
                    S.ACTIVITY_LOCATION,
                    S.SOURCE_TYPE,
                    S.SEQ_NUMBER,
                    S.RECEIVE_DATE,
                    S.HANDLER_NAME,
                    S.NON_NOTIFIER_IND,
                    S.ACCESSIBILITY,
                    S.REPORT_CYCLE,
                    S.REGION,
                    S.STATE,
                    S.EXTRACT_FLAG,
                    S.ACTIVE_SITE,
                    S.COUNTY_CODE,
                    S.COUNTY_NAME,
                    S.LOCATION_STREET_NUMBER,
                    S.LOCATION_STREET1,
                    S.LOCATION_STREET2,
                    S.LOCATION_CITY,
                    S.LOCATION_STATE,
                    S.LOCATION_COUNTRY,
                    S.LOCATION_ZIP,
                    S.MAIL_STREET_NUMBER,
                    S.MAIL_STREET1,
                    S.MAIL_STREET2,
                    S.MAIL_CITY,
                    S.MAIL_STATE,
                    S.MAIL_COUNTRY,
                    S.MAIL_ZIP,
                    S.CONTACT_STREET_NUMBER,
                    S.CONTACT_STREET1,
                    S.CONTACT_STREET2,
                    S.CONTACT_CITY,
                    S.CONTACT_STATE,
                    S.CONTACT_COUNTRY,
                    S.CONTACT_ZIP,
                    S.CONTACT_NAME,
                    S.CONTACT_PHONE,
                    S.CONTACT_FAX,
                    S.CONTACT_EMAIL,
                    S.CONTACT_TITLE,
                    S.OWNER_NAME,
                    S.OWNER_TYPE,
                    S.OWNER_SEQ_NUM,
                    S.OPER_NAME,
                    S.OPER_TYPE,
                    S.OPER_SEQ_NUM,
                    S.NAIC1_CODE,
                    S.NAIC2_CODE,
                    S.NAIC3_CODE,
                    S.NAIC4_CODE,
                    S.IN_HANDLER_UNIVERSE,
                    S.IN_A_UNIVERSE,
                    S.FED_WASTE_GENERATOR_OWNER,
                    S.FED_WASTE_GENERATOR,
                    S.STATE_WASTE_GENERATOR_OWNER,
                    S.STATE_WASTE_GENERATOR,
                    S.GEN_STATUS,
                    S.UNIV_WASTE,
                    S.LAND_TYPE,
                    S.STATE_DISTRICT_OWNER,
                    S.STATE_DISTRICT,
                    S.SHORT_TERM_GEN_IND,
                    S.IMPORTER_ACTIVITY,
                    S.MIXED_WASTE_GENERATOR,
                    S.TRANSPORTER_ACTIVITY,
                    S.TRANSFER_FACILITY_IND,
                    S.RECYCLER_ACTIVITY,
                    S.ONSITE_BURNER_EXEMPTION,
                    S.FURNACE_EXEMPTION,
                    S.UNDERGROUND_INJECTION_ACTIVITY,
                    S.UNIVERSAL_WASTE_DEST_FACILITY,
                    S.OFFSITE_WASTE_RECEIPT,
                    S.USED_OIL,
                    S.FEDERAL_UNIVERSAL_WASTE,
                    S.AS_FEDERAL_REGULATED_TSDF,
                    S.AS_CONVERTED_TSDF,
                    S.AS_STATE_REGULATED_TSDF,
                    S.FEDERAL_IND,
                    S.HSM,
                    S.SUBPART_K,
                    S.COMMERCIAL_TSD,
                    S.TSD,
                    S.GPRA_PERMIT,
                    S.GPRA_RENEWAL,
                    S.PERMIT_RENEWAL_WRKLD,
                    S.PERM_WRKLD,
                    S.PERM_PROG,
                    S.PC_WRKLD,
                    S.CLOS_WRKLD,
                    S.GPRACA,
                    S.CA_WRKLD,
                    S.SUBJ_CA,
                    S.SUBJ_CA_NON_TSD,
                    S.SUBJ_CA_TSD_3004,
                    S.SUBJ_CA_DISCRETION,
                    S.NCAPS,
                    S.EC_IND,
                    S.IC_IND,
                    S.CA_725_IND,
                    S.CA_750_IND,
                    S.OPERATING_TSDF,
                    S.FULL_ENFORCEMENT,
                    S.SNC,
                    S.BOY_SNC,
                    S.BOY_STATE_UNADDRESSED_SNC,
                    S.STATE_UNADDRESSED,
                    S.STATE_ADDRESSED,
                    S.BOY_STATE_ADDRESSED,
                    S.STATE_SNC_WITH_COMP_SCHED,
                    S.BOY_STATE_SNC_WITH_COMP_SCHED,
                    S.EPA_UNADDRESSED,
                    S.BOY_EPA_UNADDRESSED,
                    S.EPA_ADDRESSED,
                    S.BOY_EPA_ADDRESSED,
                    S.EPA_SNC_WITH_COMP_SCHED,
                    S.BOY_EPA_SNC_WITH_COMP_SCHED,
                    S.FA_REQUIRED,
                    S.HHANDLER_LAST_CHANGE_DATE,
                    S.PUBLIC_NOTES,
                    S.NOTES,
                    S.RECOGNIZED_TRADER_IMPORTER_IND,
                    S.RECOGNIZED_TRADER_EXPORTER_IND,
                    S.SLAB_IMPORTER_IND,
                    S.SLAB_EXPORTER_IND,
                    S.RECYCLER_NON_STORAGE_IND,
                    S.MANIFEST_BROKER_IND,
                    S.SUBPART_P_IND,
                    S.LOCATION_LATITUDE,
                    S.LOCATION_LONGITUDE,
                    S.LOCATION_GIS_PRIM,
                    S.LOCATION_GIS_ORIG);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 21-reporting_db-hd_merge_episodic_prjt-sp.sql 
 */
/*************************************************************************************************
** ObjectName: HD_MERGE_EPISODIC_PRJT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_EPISODIC_PRJT table
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  02/14/2021   Windsor     Created.
***************************************************************************************************/ --
CREATE PROCEDURE [dbo].[HD_MERGE_EPISODIC_PRJT] @HD_SUBM_ID varchar(40) AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        MERGE INTO RCRA_HD_EPISODIC_PRJT D
        USING (SELECT *
               FROM ETL_HD_EPISODIC_PRJT
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_EPISODIC_PRJT_ID = S.HD_EPISODIC_PRJT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR (D.PRJT_CODE_OWNER IS NOT NULL AND S.PRJT_CODE_OWNER IS NOT NULL AND
                        D.PRJT_CODE_OWNER <> S.PRJT_CODE_OWNER)
                    OR (D.PRJT_CODE_OWNER IS NULL AND S.PRJT_CODE_OWNER IS NOT NULL)
                    OR (D.PRJT_CODE_OWNER IS NOT NULL AND S.PRJT_CODE_OWNER IS NULL)
                    OR (D.PRJT_CODE IS NOT NULL AND S.PRJT_CODE IS NOT NULL AND D.PRJT_CODE <> S.PRJT_CODE)
                    OR (D.PRJT_CODE IS NULL AND S.PRJT_CODE IS NOT NULL)
                    OR (D.PRJT_CODE IS NOT NULL AND S.PRJT_CODE IS NULL)
                    OR (D.OTHER_PRJT_DESC IS NOT NULL AND S.OTHER_PRJT_DESC IS NOT NULL AND
                        D.OTHER_PRJT_DESC <> S.OTHER_PRJT_DESC)
                    OR (D.OTHER_PRJT_DESC IS NULL AND S.OTHER_PRJT_DESC IS NOT NULL)
                    OR (D.OTHER_PRJT_DESC IS NOT NULL AND S.OTHER_PRJT_DESC IS NULL)
                ) THEN
            UPDATE
            SET D.TRANSACTION_CODE = S.TRANSACTION_CODE,
                D.PRJT_CODE_OWNER  = S.PRJT_CODE_OWNER,
                D.PRJT_CODE        = S.PRJT_CODE,
                D.OTHER_PRJT_DESC  = S.OTHER_PRJT_DESC
        WHEN NOT MATCHED THEN
            INSERT (HD_EPISODIC_EVENT_ID,
                    TRANSACTION_CODE,
                    PRJT_CODE_OWNER,
                    PRJT_CODE,
                    OTHER_PRJT_DESC)
            VALUES (S.HD_EPISODIC_EVENT_ID,
                    S.TRANSACTION_CODE,
                    S.PRJT_CODE_OWNER,
                    S.PRJT_CODE,
                    S.OTHER_PRJT_DESC);
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO

/* 
 * source: 22-reporting_db_hd_merge_data-sp.sql 
 */
/*************************************************************************************************
** ObjectName: HD_MERGE_DATA.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the HD-related tables
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   Windsor     Created.
**  02/14/2021   Windsor     Added handling of the HD_EPISODIC_PRJT table.
***************************************************************************************************/ --
ALTER PROCEDURE [dbo].[HD_MERGE_DATA] @DeleteStaging bit = 1 AS
DECLARE
    @HD_SUBM_ID varchar(40);
DECLARE @getSubmId CURSOR;
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT,
        QUOTED_IDENTIFIER,
        ANSI_NULLS,
        ANSI_PADDING,
        ANSI_WARNINGS,
        ARITHABORT,
        CONCAT_NULL_YIELDS_NULL ON;
    SET NUMERIC_ROUNDABORT OFF;

    DECLARE @int INT;

    DECLARE @localTran BIT
    IF @@TRANCOUNT = 0
        BEGIN
            SET @localTran = 1
            BEGIN TRANSACTION LocalTran
        END

    BEGIN TRY
        SET @getSubmId = CURSOR FOR
            SELECT HD_SUBM_ID
            FROM NODE_RCRA_HD_SUBM
            WHERE HD_SUBM_ID NOT IN (SELECT SUBM_ID FROM ETL_RUN WHERE SUBM_ID IS NOT NULL AND ETL_TYPE = 'HD');
        OPEN @getSubmId;
        FETCH NEXT FROM @getSubmId
            INTO @HD_SUBM_ID;
        WHILE @@FETCH_STATUS = 0
            BEGIN
                EXEC HD_LOG_HANDLERS @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_HBASIC @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_HANDLER @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_NAICS @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_CERTIFICATION @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_ENV_PERMIT @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_WASTE_CODE @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_UNIVERSAL_WASTE @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_STATE_ACTIVITY @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_OWNEROP @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_SEC_MATERIAL_ACTIVITY @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_SEC_WASTE_CODE @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_OTHER_ID @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_LQG_CONSOLIDATION @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_LQG_CLOSURE @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_EPISODIC_EVENT @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_EPISODIC_WASTE @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_EPISODIC_WASTE_CODE @HD_SUBM_ID = @HD_SUBM_ID;
                EXEC HD_MERGE_EPISODIC_PRJT @HD_SUBM_ID = @HD_SUBM_ID;
                IF @DeleteStaging = 1
                    BEGIN
                        DELETE
                        FROM NODE_RCRA_HD_SUBM
                        WHERE CURRENT OF @getSubmId;
                    END;
                FETCH NEXT FROM @getSubmId
                    INTO @HD_SUBM_ID;
            END;
        CLOSE @getSubmId;
        DEALLOCATE @getSubmId;
        IF @localTran = 1 AND XACT_STATE() = 1
            COMMIT TRAN LocalTran

    END TRY
    BEGIN CATCH

        DECLARE @ErrorMessage NVARCHAR(4000)
        DECLARE @ErrorSeverity INT
        DECLARE @ErrorState INT

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE()

        IF @localTran = 1 AND XACT_STATE() <> 0
            ROLLBACK TRAN

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

    END CATCH
END
GO
